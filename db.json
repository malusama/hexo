{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/milk/source/js/theme.js","path":"js/theme.js","modified":1,"renderable":1},{"_id":"themes/milk/source/css/theme.css","path":"css/theme.css","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/Read Me.txt","path":"css/caomei1.2.1/Read Me.txt","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/README.md","path":"css/mobi.css-3.0.4/README.md","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/style.css","path":"css/caomei1.2.1/style.css","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/gulpfile.js","path":"css/mobi.css-3.0.4/gulpfile.js","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/package.json","path":"css/mobi.css-3.0.4/package.json","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.ttf","path":"css/caomei1.2.1/fonts/strawberryicon.ttf","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.woff","path":"css/caomei1.2.1/fonts/strawberryicon.woff","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.eot","path":"css/caomei1.2.1/fonts/strawberryicon.eot","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.css","path":"css/mobi.css-3.0.4/dist/mobi.css","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.css.map","path":"css/mobi.css-3.0.4/dist/mobi.css.map","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.min.css.map","path":"css/mobi.css-3.0.4/dist/mobi.min.css.map","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.min.css","path":"css/mobi.css-3.0.4/dist/mobi.min.css","modified":1,"renderable":1},{"_id":"themes/milk/source/css/mobi.css-3.0.4/src/mobi.css","path":"css/mobi.css-3.0.4/src/mobi.css","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.svg","path":"css/caomei1.2.1/fonts/strawberryicon.svg","modified":1,"renderable":1},{"_id":"themes/milk/source/css/caomei1.2.1/selection.json","path":"css/caomei1.2.1/selection.json","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"90ae44c7296dd338c9f0f2408524026fe0e47400","modified":1535215839689},{"_id":"themes/milk/package.json","hash":"b9a105af3edd5ec62529f7fc80333bfa6b4058b8","modified":1532525408970},{"_id":"themes/milk/_config.yml","hash":"adbe03889316a6c860ea840cb6acb62407ee8365","modified":1532525408961},{"_id":"themes/milk/README.md","hash":"2e45983be41a4ce6c9ef6668c9db13b7b9ed72ed","modified":1532525408960},{"_id":"source/_posts/acr122.md","hash":"c210e81f2491e1229caa12e712cea400c099e680","modified":1532525408584},{"_id":"source/_posts/.DS_Store","hash":"407007ed317d830376b6d3760e11cebfd4a2bd39","modified":1535215839688},{"_id":"source/_posts/RSA加密.md","hash":"d5046ae53d9c7ede0fb26ad9281898a01d507a09","modified":1532525408564},{"_id":"source/_posts/flask后端.md","hash":"53b97af111bcf540902e3bcba50b09e98b52f40d","modified":1532525408584},{"_id":"source/_posts/东湖绿道.md","hash":"9ebe65243fc4fc66e4b05c091ee7fc8559e22ad7","modified":1532525408585},{"_id":"source/_posts/为什么我不喜欢国内网游.md","hash":"4efbd274cda580ad82354516f0e381c03c233db6","modified":1532525408816},{"_id":"source/_posts/使用uwsgi-和-nginx-部署-Flask.md","hash":"a315bffccced826beaff7630b3446643ecd7117d","modified":1532525408826},{"_id":"source/_posts/一出好戏.md","hash":"5d303e0302cb9e7cfb41efaae4d5d36793d48c52","modified":1535215703110},{"_id":"source/_posts/关于重装系统后的二三事.md","hash":"ff69aee8a4f3ff4379746f12dc1db665427f0379","modified":1532525408827},{"_id":"source/_posts/关于一些网站的传说.md","hash":"fcd29be2b85dcc6cd42c0e322afd45a5a65d4d94","modified":1532525408827},{"_id":"source/_posts/在github上搭建静态博客.md","hash":"a724d3bc7a089dbb53fd9a41d2c5d0b75313dc09","modified":1532525408828},{"_id":"source/_posts/多贝云的一次电话面试.md","hash":"c60df7902f561153f96354e91b8652427f7f989a","modified":1532525408842},{"_id":"source/_posts/多贝云的一次笔试.md","hash":"b5bc5c487771f120b27ace18b3c0cd506a4fbf00","modified":1532525408842},{"_id":"source/_posts/压制组在做什么.md","hash":"6bc17ff7e3f771a745e2dae750d01b50f142e6b7","modified":1532581820600},{"_id":"source/_posts/最近关于大规模下架vpn业务一事有感.md","hash":"f5367a1e50a560a55f74259205f8a70e9129d121","modified":1532525408865},{"_id":"source/_posts/援力满满交易所的自动许愿.md","hash":"e9d36f601c6d99cd0af3de8f7a8a37c837e76acb","modified":1532525408843},{"_id":"source/_posts/给网站添加https.md","hash":"48b7251d109eb33d3d5a5e702c31f3e73012c580","modified":1532525408881},{"_id":"source/_posts/第一次安装hexo.md","hash":"f6b87f8a28e38b98925c6f278e78388de5b5c85e","modified":1532525408880},{"_id":"source/_posts/英才工程.md","hash":"315965a3c7f78f37957d31c6cc1c7075bd7c7285","modified":1532525408882},{"_id":"source/_posts/最近的一些想法.md","hash":"393b88594207bf419c2f47f2a91389aef6af3d4a","modified":1532525408865},{"_id":"source/_posts/给后端添加redis缓存.md","hash":"c10ba3c7c357610700507eed0569f341e08fee23","modified":1532525408881},{"_id":"source/_posts/记录新发现的事物，高会中转站.md","hash":"b709893f0d3c8941fc7b48927c39ec626e05abf1","modified":1532525408883},{"_id":"source/categories/index.md","hash":"74479f8d3b3b39941268885f7199d948743fc916","modified":1532525408891},{"_id":"source/_posts/配置-VPS-运行-Flask.md","hash":"2b273e247281020beb89c95b36840aaf86794c59","modified":1532525408890},{"_id":"source/_posts/轻文面试经历.md","hash":"812f9925ff2d2b961a4b9ed13dd346201798369d","modified":1532525408890},{"_id":"themes/milk/languages/zh-CN.yml","hash":"385dca74b68f788ca0623f6cbaf1bd8cd07c31ff","modified":1532525408962},{"_id":"source/tags/index.md","hash":"1352435349acbb94783d0d6f0fbe1111c6b2d679","modified":1532525408891},{"_id":"themes/milk/languages/en.yml","hash":"3950f3ae9cc508f959604a0f6a17d0a2394d3542","modified":1532525408961},{"_id":"themes/milk/layout/archive.ejs","hash":"9e7bbd7de2beb85610b20e7c51661811bd7b01f8","modified":1532525408967},{"_id":"themes/milk/layout/category.ejs","hash":"466490a330344c1af4c303b5cfbdb173cb38a050","modified":1532525408967},{"_id":"themes/milk/layout/index.ejs","hash":"802e528c4e912422d1c9ac566a1f7c64ca897164","modified":1532525408967},{"_id":"themes/milk/layout/layout.ejs","hash":"1152db3c3c8cc39417a3c51976e50efda8c413c7","modified":1532525408967},{"_id":"themes/milk/layout/post.ejs","hash":"7a8be91f131a5cb9c7e8e469a0fa27e00ddb9215","modified":1532525408969},{"_id":"themes/milk/layout/tag.ejs","hash":"9fd3281bfb8c08f649c4703d3a06dacf4e9ff29e","modified":1532525408969},{"_id":"themes/milk/layout/page.ejs","hash":"f6df09e3b63aed41cef5eb4533f5a4fc4b104f99","modified":1532525408968},{"_id":"source/_posts/一出好戏/.DS_Store","hash":"93f567f0e7ff39f9e06cc21f9ae1b7fd7715238c","modified":1535214654412},{"_id":"source/_posts/RSA加密/流程.jpg","hash":"eb042b586c2d1edf6936e4b7f3033aff76729b69","modified":1532525408565},{"_id":"source/_posts/压制组在做什么/.DS_Store","hash":"d3ec27b5450d241b8cf8554d8d51ee64c3a62069","modified":1532581608534},{"_id":"source/_posts/在github上搭建静态博客/hexo-v.png","hash":"ea57036b0f26c3deb90fd310cdad468d494dffcd","modified":1532525408840},{"_id":"source/_posts/在github上搭建静态博客/npm-install-hexo-cli.png","hash":"1eb30ab70fab324d475e051a27f07a5ed72cc55a","modified":1532525408841},{"_id":"source/_posts/在github上搭建静态博客/主页.png","hash":"5d02ff78b46d6abd2bb34aef49bfc929d5c2c10d","modified":1532525408841},{"_id":"source/_posts/援力满满交易所的自动许愿/死熊猫.gif","hash":"8b42a7823241e265a15a2b21f2e0578f879ca93d","modified":1532525408864},{"_id":"source/_posts/记录新发现的事物，高会中转站/porn.png","hash":"94dda6ad446745310cdd6d6575dbad4c86c128cd","modified":1532525408889},{"_id":"source/_posts/记录新发现的事物，高会中转站/netdisc.png","hash":"cf1a15c8d05f3c5ae2b518493d67df44ef66e65f","modified":1532525408887},{"_id":"themes/milk/layout/_partial/baidu_analytics.ejs","hash":"4dcd9964c85ebe21d2a7ae1d2e2a5747d8fe48ac","modified":1532525408963},{"_id":"themes/milk/layout/_partial/categories.ejs","hash":"8f306646dbec2bc8de1729f0a5bffc7b4eed19d8","modified":1532525408963},{"_id":"source/_posts/记录新发现的事物，高会中转站/promulgator\n.png","hash":"9a58e849656bc63b42ea679ef3359a73d1677fe8","modified":1532525408890},{"_id":"source/_posts/记录新发现的事物，高会中转站/promulgator\n-1.png","hash":"9c1aecb23a8a64da0780e0253e72feda4afd55fd","modified":1532525408889},{"_id":"themes/milk/layout/_partial/comments.ejs","hash":"9d53c363193dcb9fede7510f13263f0c278c45e1","modified":1532525408963},{"_id":"themes/milk/layout/_partial/google_analytics.ejs","hash":"bde580eb62588158b2d439181b26616bf9e6fd26","modified":1532525408964},{"_id":"themes/milk/layout/_partial/disqus_count.ejs","hash":"c74c3b33c5f861916d1b3855650cf76f8d9283b5","modified":1532525408963},{"_id":"themes/milk/layout/_partial/footer.ejs","hash":"a4defe81c3de253a1c366c3bed0829e7085acc2e","modified":1532525408964},{"_id":"themes/milk/layout/_partial/head.ejs","hash":"f5dca429e8bd61f6fa8c595aa99909fbbc34da87","modified":1532525408964},{"_id":"themes/milk/layout/_partial/icons.ejs","hash":"e9abbc82e18412a51ed591fbe8061f7d42b6c57b","modified":1532525408965},{"_id":"themes/milk/layout/_partial/header.ejs","hash":"c476b77140e1913d9b93527e531bb3264629611d","modified":1532525408964},{"_id":"themes/milk/layout/_partial/page.ejs","hash":"f02bbd52ead5be605066763b7878b981029d36db","modified":1532525408965},{"_id":"themes/milk/layout/_partial/pagination.ejs","hash":"355cab33a53135846c94a97fc8329faa5a56318d","modified":1532525408965},{"_id":"themes/milk/layout/_partial/post.ejs","hash":"6fd963203e842775fd4596d2085ac37d5c75f59e","modified":1532525408965},{"_id":"themes/milk/layout/_partial/post_meta.ejs","hash":"029380af9a64e79923e20e3de5746e3e215ca3e3","modified":1532525408966},{"_id":"themes/milk/layout/_partial/posts_excerpt.ejs","hash":"36cd8cb8bd17bc97778b688227d0e0211f815d9e","modified":1532525408966},{"_id":"themes/milk/layout/_partial/posts_title.ejs","hash":"5f372931a9b677bb1aa2d6afc67dc3643f901ec2","modified":1532525408966},{"_id":"themes/milk/layout/_partial/tags.ejs","hash":"67f9c9dcfbe773f84a156acf5cc732ea957a8d59","modified":1532525408966},{"_id":"themes/milk/layout/_partial/sidebar.ejs","hash":"10cca672da79f552d365e312fa7d4edd6a56b732","modified":1532525408966},{"_id":"themes/milk/source/js/theme.js","hash":"1b5741bdc5bc5c6b6f35ae02ce336861f2c1115f","modified":1532525408981},{"_id":"themes/milk/source/css/theme.css","hash":"5cabbbf2a652b27d86076f03b49255dd82c753b3","modified":1532525408981},{"_id":"source/_posts/一出好戏/蜥蜴.jpg","hash":"cab8bc26fde91055083a5b5d961a8bed888d1662","modified":1535212633301},{"_id":"source/_posts/援力满满交易所的自动许愿/stock.png","hash":"3e83f73172dfa4eeeeadad4169046d63a776e6c4","modified":1532525408864},{"_id":"source/_posts/记录新发现的事物，高会中转站/offcloud.png","hash":"f934e40013165316312fc487af25fa5bb939fd70","modified":1532525408888},{"_id":"source/_posts/记录新发现的事物，高会中转站/ad.png","hash":"ff80c618d56617abe5c3e7dc855d4b9f454d23f9","modified":1532525408885},{"_id":"source/_posts/为什么我不喜欢国内网游/EVE国服市场.png","hash":"7dd77e47198b9e39de5f54de395d790a3a38c981","modified":1532525408822},{"_id":"source/_posts/为什么我不喜欢国内网游/EVE经济图表.png","hash":"27c93718481c394862908e47f62ce6aaf25c672d","modified":1532525408826},{"_id":"source/_posts/在github上搭建静态博客/DNS解析.png","hash":"62be5712571dd44d5066187bd385ed3c484ac5c3","modified":1532525408831},{"_id":"source/_posts/援力满满交易所的自动许愿/Network.png","hash":"1d3501f8e7d68ee6b38b36fc672bcdae8d953d8a","modified":1532525408847},{"_id":"themes/milk/source/css/caomei1.2.1/Read Me.txt","hash":"430b8928f865fe5a8dd7396ea23b38e8181387b8","modified":1532525408971},{"_id":"themes/milk/source/css/mobi.css-3.0.4/README.md","hash":"966f8b582bc4e2ccb5e2383d4caabe49ffa6a5ba","modified":1532525408978},{"_id":"themes/milk/source/css/caomei1.2.1/style.css","hash":"e8b5d40cd3a8e205422a91d349c6be0320f6cd63","modified":1532525408978},{"_id":"themes/milk/source/css/mobi.css-3.0.4/gulpfile.js","hash":"55af947500ccc03ce09458b3aa09df7f0964b113","modified":1532525408980},{"_id":"themes/milk/source/css/mobi.css-3.0.4/package.json","hash":"9412f7314d3fd59a278ed8dddfc145d80bf62732","modified":1532525408980},{"_id":"source/_posts/援力满满交易所的自动许愿/Sources.png","hash":"5d9ec65f4b409371ea96cfdafdf05fb6193e6c12","modified":1532525408853},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.ttf","hash":"3905353c0bde1c6ee082fa74db534ae6215296dc","modified":1532525408975},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.woff","hash":"61929d47b3643740ad140189be79842d25fbbffa","modified":1532525408976},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.eot","hash":"4743934be6fa38c6dfccff5b1dd41bce64a688c3","modified":1532525408972},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.css","hash":"7ce47b62ef20d5cc066544248fe25ad5597bd020","modified":1532525408979},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.css.map","hash":"9c0f43a52c45cd48538622924ad878e70ebc0318","modified":1532525408979},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.min.css.map","hash":"49f744037dc8fa3dc4b658693c6a3de2f3a71115","modified":1532525408980},{"_id":"themes/milk/source/css/mobi.css-3.0.4/dist/mobi.min.css","hash":"346e22f5c4777c4092485fd17e9e1f3e699d2d6e","modified":1532525408979},{"_id":"themes/milk/source/css/mobi.css-3.0.4/src/mobi.css","hash":"f79e67fad4274543fc202a8a6ce5513c6c0c9bec","modified":1532525408981},{"_id":"source/_posts/一出好戏/宗教.jpg","hash":"cb863a79b2655458c9f1ad2ded4f822588cf5b93","modified":1535214564901},{"_id":"source/_posts/压制组在做什么/image-3.png","hash":"4213f0bef1548cb43161eeb19afab257e51951ec","modified":1532581783288},{"_id":"themes/milk/source/css/caomei1.2.1/fonts/strawberryicon.svg","hash":"e2c89fa372a49205e251ba8a95cad7ecb9ce784e","modified":1532525408974},{"_id":"themes/milk/source/css/caomei1.2.1/selection.json","hash":"6f51747a2e11db04354a6dbda7983d41f7974608","modified":1532525408977},{"_id":"source/_posts/在github上搭建静态博客/hexo-first-time.png","hash":"e10acad8d86b468d0c61ffbdb18c58513f7cad82","modified":1532525408839},{"_id":"source/_posts/RSA加密/界面.jpg","hash":"bd11a2f816cbb4d1e1e117741adfbb246f028d7f","modified":1532525408583},{"_id":"source/_posts/最近的一些想法/百仞滩.jpg","hash":"e978a424fe523f3503b0529c36e4b6e806baf913","modified":1532525408879},{"_id":"source/_posts/援力满满交易所的自动许愿/index.png","hash":"22b0cf89e77f890248a46414b964e8afd29a93af","modified":1532525408861},{"_id":"source/_posts/一出好戏/黄渤.gif","hash":"5fdfb91b811baa724173aff17def063c7465d1b3","modified":1535214237736},{"_id":"source/_posts/东湖绿道/东湖桥2.jpg","hash":"3b4de4dc3c31b877ba687332aec0cb39e55b6659","modified":1532525408645},{"_id":"source/_posts/东湖绿道/东湖桥3.jpg","hash":"517a79825b9beca34347e5ef0a6ce00ec3701a44","modified":1532525408666},{"_id":"source/_posts/东湖绿道/东湖凌波栈道.jpg","hash":"c24e5bed7ffcf9b86ee9ee691bbc5a05894581b5","modified":1532525408606},{"_id":"source/_posts/东湖绿道/东湖绿道3.jpg","hash":"c9b8c6b0c159cd1122eb05ef47bc2ac8ff970d4e","modified":1532525408738},{"_id":"source/_posts/东湖绿道/东湖绿道2.jpg","hash":"b8a4d94136196b1c707345e11d04deebc702c627","modified":1532525408715},{"_id":"source/_posts/东湖绿道/东湖桥1.jpg","hash":"1c7bf6a2a62eb54e2ad61243c5a7e3e5f901ec1f","modified":1532525408630},{"_id":"source/_posts/压制组在做什么/image-1.png","hash":"1813f8feb35aa31af845f6bd3263c1ca65515532","modified":1532526251650},{"_id":"source/_posts/东湖绿道/玩偶.jpg","hash":"d9aea3614d00103f5ada937b96dc42ab2e748320","modified":1532525408812},{"_id":"source/_posts/东湖绿道/东湖绿道1.jpg","hash":"059b17be8b1fd5be0e793c4eac8227321522e206","modified":1532525408691},{"_id":"source/_posts/压制组在做什么/image-2.png","hash":"1c84d3b4f019165a4ed29273319ac2401afd2006","modified":1532526257009},{"_id":"source/_posts/一出好戏/脑袋有问题.png","hash":"228b119d8d5d14f8c3bf284e975141c33236f114","modified":1535213379803},{"_id":"source/_posts/东湖绿道/农夫山泉.jpg","hash":"7a06f07b5c0af6442fa567f5670cdd9b402d86cb","modified":1532525408793},{"_id":"source/_posts/压制组在做什么/image.png","hash":"f1bac690e7128249222ffbbc3dca1f5c08b498c3","modified":1532526242837},{"_id":"public/categories/index.html","hash":"c32620ea9c74a019d7f307adbc055ab1b13ea56c","modified":1535217018513},{"_id":"public/tags/index.html","hash":"a9cd23498cf6ce67ba99e1cf54864a6233c0eff4","modified":1535217018513},{"_id":"public/2018/08/26/一出好戏/index.html","hash":"3a2c890d73675e74b1df0df204612e427bfcefb2","modified":1535217018513},{"_id":"public/2018/07/25/压制组在做什么/index.html","hash":"877aef249058788c3f9e28ac77dcd9e82e8443c6","modified":1535217018513},{"_id":"public/2018/05/29/为什么我不喜欢国内网游/index.html","hash":"78b855909f171da4de78c028783775b4158be9b2","modified":1535217018513},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/index.html","hash":"a993b2d5a406f5417cacaedfeca9a6485b6a8673","modified":1535217018513},{"_id":"public/2018/05/16/多贝云的一次笔试/index.html","hash":"7129521bbba5fed03c205a9c99fce10358cd8dcd","modified":1535217018514},{"_id":"public/2018/05/02/给网站添加https/index.html","hash":"51330908af67734931eb85a210e5cd3f14a3076b","modified":1535217018514},{"_id":"public/2018/05/01/使用uwsgi-和-nginx-部署-Flask/index.html","hash":"f57ca0ffbde1f3573c49a0f52631d0e50e926c62","modified":1535217018514},{"_id":"public/2018/04/29/给后端添加redis缓存/index.html","hash":"2b60f23917a0c00807e3ee8c117008e2b783a35a","modified":1535217018514},{"_id":"public/2018/04/23/配置-VPS-运行-Flask/index.html","hash":"e153e4cab1e595a2e2f17d0241a8d895231ed6e1","modified":1535217018514},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/index.html","hash":"2aaa00e02b97f79d7cedc322921ee92594da4471","modified":1535217018514},{"_id":"public/2017/07/20/最近关于大规模下架vpn业务一事有感/index.html","hash":"d9fa7c260b2d6c4d92c80b940cee31ef9fd40923","modified":1535217018514},{"_id":"public/2017/07/01/flask后端/index.html","hash":"3ed2726b3842c99b0f531c115355c44c921393a7","modified":1535217018514},{"_id":"public/2017/06/19/acr122/index.html","hash":"b8bece016f646208b9328b48c0d8502aecd409da","modified":1535217018514},{"_id":"public/2017/06/18/东湖绿道/index.html","hash":"cf7176ac6d13abb017a5243d4cfe8dc54ddb0b01","modified":1535217018514},{"_id":"public/2017/06/04/英才工程/index.html","hash":"378e5791be97de2e79273165afe88e3021138bc4","modified":1535217018516},{"_id":"public/2017/03/14/最近的一些想法/index.html","hash":"f7f3c6f20a5402e82892711e8c9b053b8a84baff","modified":1535217018516},{"_id":"public/2017/03/14/第一次安装hexo/index.html","hash":"a8b16f5e69df6db98189017e4c8c57539e02a37b","modified":1535217018516},{"_id":"public/2017/03/11/关于重装系统后的二三事/index.html","hash":"a2c5b7af1d6eda94f28e376621e175bdd0a5723a","modified":1535217018517},{"_id":"public/archives/index.html","hash":"49ac57df4839529c8b5c131823e0db85ad338047","modified":1535217018517},{"_id":"public/archives/page/2/index.html","hash":"05efdc9964e5a9aa914f7efd44997f9ae75925d4","modified":1535217018517},{"_id":"public/archives/page/3/index.html","hash":"b66bc2705caf55b3dc91a9f75499c754412c0d50","modified":1535217018517},{"_id":"public/archives/2017/index.html","hash":"032ad93348d8816ac66bffd80428623aaf8334ee","modified":1535217018517},{"_id":"public/archives/2017/page/2/index.html","hash":"0817f7f69a8f7b4af9eaa80dd7aac656cf8d5ad9","modified":1535217018517},{"_id":"public/archives/2017/03/index.html","hash":"4ab2a5988da34e9655bc4ecb50cf1f182869d659","modified":1535217018518},{"_id":"public/archives/2017/06/index.html","hash":"c22395e93efe866044824fe72bd8c8707e5a88c4","modified":1535217018518},{"_id":"public/archives/2017/07/index.html","hash":"7867e815b9b8a4aa22d0f288be3fd36d5a2e1e35","modified":1535217018518},{"_id":"public/archives/2017/08/index.html","hash":"780dee0680741a35111771b61f2c1c3e702e4b3c","modified":1535217018518},{"_id":"public/archives/2017/10/index.html","hash":"8bcd744278aab2ea84587e98ea97d900f3af3dde","modified":1535217018518},{"_id":"public/archives/2018/index.html","hash":"1d7f239853bd14a011c639867289e6e9669b41d2","modified":1535217018518},{"_id":"public/archives/2018/page/2/index.html","hash":"be209840a183f5f558a277c5e5875f257453ef26","modified":1535217018518},{"_id":"public/archives/2018/03/index.html","hash":"c73901dfc6a0628adcf0366dbd9a2a40cddb59b1","modified":1535217018518},{"_id":"public/archives/2018/04/index.html","hash":"dc63f309155518004a17eec82298aff64f52eb20","modified":1535217018518},{"_id":"public/archives/2018/05/index.html","hash":"a4cde15c212568883926f161bdca54a3db45bc79","modified":1535217018518},{"_id":"public/archives/2018/07/index.html","hash":"0f00590105664ef78a6ef9977b3e731efb22acad","modified":1535217018518},{"_id":"public/archives/2018/08/index.html","hash":"a9f2665e53f0e5e6d1832a6877b2b8777036abc2","modified":1535217018519},{"_id":"public/index.html","hash":"8466b0e8bbab14a84b06cd4828b6d6e17bd38448","modified":1535217018519},{"_id":"public/page/2/index.html","hash":"876f55f0b974802572b7485aeb4f0392d4466c47","modified":1535217018519},{"_id":"public/page/3/index.html","hash":"4c0cc4362f0d7b73c6be09b6f0c896f41d567e11","modified":1535217018519},{"_id":"public/tags/IC卡/index.html","hash":"73d35a0efe96861cee71104cec966757143cb1d7","modified":1535217018520},{"_id":"public/tags/flask/index.html","hash":"3cc9414f056a2b5be67f3756abdc2b5d6638dd8e","modified":1535217018520},{"_id":"public/tags/碎碎念/index.html","hash":"ffa49cae3346b9a6224a3e5df3cc048959bcc318","modified":1535217018520},{"_id":"public/tags/uwsgi-nginx-Flask/index.html","hash":"6485371eaec7cb788dd7fff0e4468cdd49070003","modified":1535217018520},{"_id":"public/tags/杂谈/index.html","hash":"deafec43cb8702ee6560d5066024390a56f31fc1","modified":1535217018520},{"_id":"public/tags/笔试/index.html","hash":"33e6ad9a538780b1f9da673d107ad72277f5ed4c","modified":1535217018520},{"_id":"public/tags/压制-视频/index.html","hash":"9b3b007330631ec1ddb7b82fa9ad0c910ce738c5","modified":1535217018520},{"_id":"public/tags/翻墙/index.html","hash":"0202dec53916f194c4c9902400d7b91c9151f7b1","modified":1535217018521},{"_id":"public/tags/Python/index.html","hash":"b7a2ea54cadb77aaf1e73610e923e741033b528b","modified":1535217018522},{"_id":"public/tags/ACG，脚本/index.html","hash":"12121b4caf7c5dc40aaf261298a454e586c94013","modified":1535217018522},{"_id":"public/tags/https/index.html","hash":"4f1708c99d17018e6dd0a3848b0a790ba9a0ec9d","modified":1535217018523},{"_id":"public/tags/后端-redis/index.html","hash":"b9ed8a9c38217099b535832a3eb8fc500a7598b7","modified":1535217018524},{"_id":"public/tags/记录/index.html","hash":"346144d2234f77b1dbe0e1ff44feaeb6015d8ade","modified":1535217018524},{"_id":"public/tags/Falsk-VPS/index.html","hash":"3158602675879cb3cd721e4fab96eee042955ad6","modified":1535217018524},{"_id":"public/tags/面试/index.html","hash":"a278dc3b98f0634a8d2a16c3b2309e82739e6e2f","modified":1535217018524},{"_id":"public/tags/java-RSA/index.html","hash":"40e4cff3d7cc9dc19adc790404fb6606fce9f22a","modified":1535217018524},{"_id":"public/tags/EVE/index.html","hash":"94257b2a5acbd98a1144bf57cf466e4f23364ae8","modified":1535217018524},{"_id":"public/tags/网游/index.html","hash":"91f2678f36d5599e6c51b96281ba5fcadc0efd4d","modified":1535217018524},{"_id":"public/tags/经济/index.html","hash":"ac4ed040ee90ce110303fe39e5ebd56e202a5fa6","modified":1535217018524},{"_id":"public/tags/英才工程/index.html","hash":"19e8c93bed1e562f6b4948e4c2828398a34fcae3","modified":1535217018525},{"_id":"public/tags/面试，-多贝云/index.html","hash":"3a4e5c301e766fcefb239bb8b8a9e90a43e03e35","modified":1535217018525},{"_id":"public/tags/H/index.html","hash":"e5e39b3558a9ad31b3c1ac4119f7fe9b4571e63d","modified":1535217018525},{"_id":"public/2018/05/19/多贝云的一次电话面试/index.html","hash":"a9bbb2358fbbd9221f48523f4fce488f9150f22d","modified":1535217018525},{"_id":"public/2018/03/14/轻文面试经历/index.html","hash":"145a5e8e42fd00bdb6f19bfcf1515b6561a58c3b","modified":1535217018525},{"_id":"public/2017/10/17/RSA加密/index.html","hash":"0a0190a43febf3cfee1c2579f4c4f0c1605014c6","modified":1535217018525},{"_id":"public/2017/08/17/关于一些网站的传说/index.html","hash":"ab0b69c6ce9938f11b92b897ce455546e7961fcb","modified":1535217018525},{"_id":"public/2017/06/04/在github上搭建静态博客/index.html","hash":"debbedcba39822818f5ce23c953ca4b5368f701f","modified":1535217018525},{"_id":"public/css/caomei1.2.1/Read Me.txt","hash":"430b8928f865fe5a8dd7396ea23b38e8181387b8","modified":1535217018551},{"_id":"public/css/caomei1.2.1/fonts/strawberryicon.ttf","hash":"3905353c0bde1c6ee082fa74db534ae6215296dc","modified":1535217018551},{"_id":"public/css/caomei1.2.1/fonts/strawberryicon.woff","hash":"61929d47b3643740ad140189be79842d25fbbffa","modified":1535217018551},{"_id":"public/css/caomei1.2.1/fonts/strawberryicon.eot","hash":"4743934be6fa38c6dfccff5b1dd41bce64a688c3","modified":1535217018551},{"_id":"public/css/mobi.css-3.0.4/dist/mobi.css.map","hash":"9c0f43a52c45cd48538622924ad878e70ebc0318","modified":1535217018551},{"_id":"public/css/mobi.css-3.0.4/dist/mobi.min.css.map","hash":"49f744037dc8fa3dc4b658693c6a3de2f3a71115","modified":1535217018552},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/死熊猫.gif","hash":"8b42a7823241e265a15a2b21f2e0578f879ca93d","modified":1535217018552},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/stock.png","hash":"3e83f73172dfa4eeeeadad4169046d63a776e6c4","modified":1535217018552},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/porn.png","hash":"94dda6ad446745310cdd6d6575dbad4c86c128cd","modified":1535217018552},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/netdisc.png","hash":"cf1a15c8d05f3c5ae2b518493d67df44ef66e65f","modified":1535217018552},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/promulgator\n.png","hash":"9a58e849656bc63b42ea679ef3359a73d1677fe8","modified":1535217018552},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/promulgator\n-1.png","hash":"9c1aecb23a8a64da0780e0253e72feda4afd55fd","modified":1535217018552},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/offcloud.png","hash":"f934e40013165316312fc487af25fa5bb939fd70","modified":1535217018552},{"_id":"public/2017/10/17/RSA加密/流程.jpg","hash":"eb042b586c2d1edf6936e4b7f3033aff76729b69","modified":1535217018552},{"_id":"public/2017/06/04/在github上搭建静态博客/npm-install-hexo-cli.png","hash":"1eb30ab70fab324d475e051a27f07a5ed72cc55a","modified":1535217018552},{"_id":"public/2017/06/04/在github上搭建静态博客/hexo-v.png","hash":"ea57036b0f26c3deb90fd310cdad468d494dffcd","modified":1535217018552},{"_id":"public/2017/06/04/在github上搭建静态博客/主页.png","hash":"5d02ff78b46d6abd2bb34aef49bfc929d5c2c10d","modified":1535217018553},{"_id":"public/2018/08/26/一出好戏/蜥蜴.jpg","hash":"cab8bc26fde91055083a5b5d961a8bed888d1662","modified":1535217018565},{"_id":"public/2018/03/01/记录新发现的事物，高会中转站/ad.png","hash":"ff80c618d56617abe5c3e7dc855d4b9f454d23f9","modified":1535217018565},{"_id":"public/js/theme.js","hash":"79685ebbdd7452c6b3b5715b4ba3ee39f007170b","modified":1535217018568},{"_id":"public/css/theme.css","hash":"5cabbbf2a652b27d86076f03b49255dd82c753b3","modified":1535217018568},{"_id":"public/css/mobi.css-3.0.4/README.html","hash":"61137459acb2c07d2b86aae085d3c26dd4869ed8","modified":1535217018569},{"_id":"public/css/mobi.css-3.0.4/gulpfile.js","hash":"55af947500ccc03ce09458b3aa09df7f0964b113","modified":1535217018570},{"_id":"public/css/mobi.css-3.0.4/package.json","hash":"0baeb2ccb7a14b5910c82f7763c1ba24d58c1a72","modified":1535217018570},{"_id":"public/css/mobi.css-3.0.4/src/mobi.css","hash":"f79e67fad4274543fc202a8a6ce5513c6c0c9bec","modified":1535217018571},{"_id":"public/css/caomei1.2.1/fonts/strawberryicon.svg","hash":"e2c89fa372a49205e251ba8a95cad7ecb9ce784e","modified":1535217018571},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/Network.png","hash":"1d3501f8e7d68ee6b38b36fc672bcdae8d953d8a","modified":1535217018571},{"_id":"public/css/caomei1.2.1/style.css","hash":"e8b5d40cd3a8e205422a91d349c6be0320f6cd63","modified":1535217018584},{"_id":"public/css/mobi.css-3.0.4/dist/mobi.css","hash":"7ce47b62ef20d5cc066544248fe25ad5597bd020","modified":1535217018584},{"_id":"public/css/mobi.css-3.0.4/dist/mobi.min.css","hash":"346e22f5c4777c4092485fd17e9e1f3e699d2d6e","modified":1535217018585},{"_id":"public/2018/05/29/为什么我不喜欢国内网游/EVE国服市场.png","hash":"7dd77e47198b9e39de5f54de395d790a3a38c981","modified":1535217018585},{"_id":"public/2018/05/29/为什么我不喜欢国内网游/EVE经济图表.png","hash":"27c93718481c394862908e47f62ce6aaf25c672d","modified":1535217018585},{"_id":"public/2017/06/04/在github上搭建静态博客/DNS解析.png","hash":"62be5712571dd44d5066187bd385ed3c484ac5c3","modified":1535217018585},{"_id":"public/2018/07/25/压制组在做什么/image-3.png","hash":"4213f0bef1548cb43161eeb19afab257e51951ec","modified":1535217018633},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/Sources.png","hash":"5d9ec65f4b409371ea96cfdafdf05fb6193e6c12","modified":1535217018648},{"_id":"public/2018/08/26/一出好戏/宗教.jpg","hash":"cb863a79b2655458c9f1ad2ded4f822588cf5b93","modified":1535217018648},{"_id":"public/2017/06/04/在github上搭建静态博客/hexo-first-time.png","hash":"e10acad8d86b468d0c61ffbdb18c58513f7cad82","modified":1535217018654},{"_id":"public/2018/05/29/援力满满交易所的自动许愿/index.png","hash":"22b0cf89e77f890248a46414b964e8afd29a93af","modified":1535217018676},{"_id":"public/2017/10/17/RSA加密/界面.jpg","hash":"bd11a2f816cbb4d1e1e117741adfbb246f028d7f","modified":1535217018681},{"_id":"public/2017/03/14/最近的一些想法/百仞滩.jpg","hash":"e978a424fe523f3503b0529c36e4b6e806baf913","modified":1535217018681},{"_id":"public/2018/08/26/一出好戏/黄渤.gif","hash":"5fdfb91b811baa724173aff17def063c7465d1b3","modified":1535217018702},{"_id":"public/2017/06/18/东湖绿道/东湖桥2.jpg","hash":"3b4de4dc3c31b877ba687332aec0cb39e55b6659","modified":1535217018702},{"_id":"public/2017/06/18/东湖绿道/东湖桥3.jpg","hash":"517a79825b9beca34347e5ef0a6ce00ec3701a44","modified":1535217018713},{"_id":"public/2017/06/18/东湖绿道/东湖凌波栈道.jpg","hash":"c24e5bed7ffcf9b86ee9ee691bbc5a05894581b5","modified":1535217018732},{"_id":"public/2017/06/18/东湖绿道/东湖绿道3.jpg","hash":"c9b8c6b0c159cd1122eb05ef47bc2ac8ff970d4e","modified":1535217018743},{"_id":"public/2017/06/18/东湖绿道/东湖绿道2.jpg","hash":"b8a4d94136196b1c707345e11d04deebc702c627","modified":1535217018765},{"_id":"public/2018/07/25/压制组在做什么/image-1.png","hash":"1813f8feb35aa31af845f6bd3263c1ca65515532","modified":1535217018774},{"_id":"public/2017/06/18/东湖绿道/东湖桥1.jpg","hash":"1c7bf6a2a62eb54e2ad61243c5a7e3e5f901ec1f","modified":1535217018778},{"_id":"public/2017/06/18/东湖绿道/玩偶.jpg","hash":"d9aea3614d00103f5ada937b96dc42ab2e748320","modified":1535217018778},{"_id":"public/2018/07/25/压制组在做什么/image-2.png","hash":"1c84d3b4f019165a4ed29273319ac2401afd2006","modified":1535217018806},{"_id":"public/2017/06/18/东湖绿道/东湖绿道1.jpg","hash":"059b17be8b1fd5be0e793c4eac8227321522e206","modified":1535217018823},{"_id":"public/css/caomei1.2.1/selection.json","hash":"bf0c200c9d8f3e8f7befbbc69cb01660b19f913d","modified":1535217018894},{"_id":"public/2018/08/26/一出好戏/脑袋有问题.png","hash":"228b119d8d5d14f8c3bf284e975141c33236f114","modified":1535217018902},{"_id":"public/2017/06/18/东湖绿道/农夫山泉.jpg","hash":"7a06f07b5c0af6442fa567f5670cdd9b402d86cb","modified":1535217018935},{"_id":"public/2018/07/25/压制组在做什么/image.png","hash":"f1bac690e7128249222ffbbc3dca1f5c08b498c3","modified":1535217018942}],"Category":[],"Data":[],"Page":[{"type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntype: categories\ncomments: false\n---\n","date":"2018-07-25T13:30:08.891Z","updated":"2018-07-25T13:30:08.891Z","path":"categories/index.html","title":"","layout":"page","_id":"cjl9oknpu0001gvd9c7tfv48r","content":"","site":{"data":{}},"excerpt":"","more":""},{"tpye":"tagss","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntpye: tagss\ncomments: false\n---\n","date":"2018-07-25T13:30:08.891Z","updated":"2018-07-25T13:30:08.891Z","path":"tags/index.html","title":"","layout":"page","_id":"cjl9oknpz0003gvd9o0u3zct3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"acr122","date":"2017-06-19T14:10:38.000Z","_content":"\n​\t话说之前看到有人破解水卡手里就痒痒,于是在淘宝买了个ACR122.今天中午快递到了,下午才和京东的快递一起拿.回来试了一下,水卡读不出来,店家说是屏蔽卡....\n\n我也不知道是什么,搜索读出来的内容发现吾爱破解论坛说是屏蔽了效验位.很麻烦,也不知道怎么弄.\n\n随手那饭卡试了一下,破解成功.写入没问题,拿下楼刷了门禁,开了.但是我肯定是不敢拿去刷钱的,饭卡里金额肯定是存在数据库里的.如果卡里也有修改也没用,和数据库校对不上肯定得去喝茶了.话说卡里没有的话复制别人的卡岂不也是很危险?所以一般都是卡里的金额和数据库金额效验把?\n\n复制修改不了也没啥意思.退货了...\n\n","source":"_posts/acr122.md","raw":"---\ntitle: acr122\ndate: 2017-06-19 22:10:38\ntags: IC卡\n---\n\n​\t话说之前看到有人破解水卡手里就痒痒,于是在淘宝买了个ACR122.今天中午快递到了,下午才和京东的快递一起拿.回来试了一下,水卡读不出来,店家说是屏蔽卡....\n\n我也不知道是什么,搜索读出来的内容发现吾爱破解论坛说是屏蔽了效验位.很麻烦,也不知道怎么弄.\n\n随手那饭卡试了一下,破解成功.写入没问题,拿下楼刷了门禁,开了.但是我肯定是不敢拿去刷钱的,饭卡里金额肯定是存在数据库里的.如果卡里也有修改也没用,和数据库校对不上肯定得去喝茶了.话说卡里没有的话复制别人的卡岂不也是很危险?所以一般都是卡里的金额和数据库金额效验把?\n\n复制修改不了也没啥意思.退货了...\n\n","slug":"acr122","published":1,"updated":"2018-07-25T13:30:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknpn0000gvd9dk9i89qj","content":"<p>​    话说之前看到有人破解水卡手里就痒痒,于是在淘宝买了个ACR122.今天中午快递到了,下午才和京东的快递一起拿.回来试了一下,水卡读不出来,店家说是屏蔽卡….</p>\n<p>我也不知道是什么,搜索读出来的内容发现吾爱破解论坛说是屏蔽了效验位.很麻烦,也不知道怎么弄.</p>\n<p>随手那饭卡试了一下,破解成功.写入没问题,拿下楼刷了门禁,开了.但是我肯定是不敢拿去刷钱的,饭卡里金额肯定是存在数据库里的.如果卡里也有修改也没用,和数据库校对不上肯定得去喝茶了.话说卡里没有的话复制别人的卡岂不也是很危险?所以一般都是卡里的金额和数据库金额效验把?</p>\n<p>复制修改不了也没啥意思.退货了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    话说之前看到有人破解水卡手里就痒痒,于是在淘宝买了个ACR122.今天中午快递到了,下午才和京东的快递一起拿.回来试了一下,水卡读不出来,店家说是屏蔽卡….</p>\n<p>我也不知道是什么,搜索读出来的内容发现吾爱破解论坛说是屏蔽了效验位.很麻烦,也不知道怎么弄.</p>\n<p>随手那饭卡试了一下,破解成功.写入没问题,拿下楼刷了门禁,开了.但是我肯定是不敢拿去刷钱的,饭卡里金额肯定是存在数据库里的.如果卡里也有修改也没用,和数据库校对不上肯定得去喝茶了.话说卡里没有的话复制别人的卡岂不也是很危险?所以一般都是卡里的金额和数据库金额效验把?</p>\n<p>复制修改不了也没啥意思.退货了…</p>\n"},{"title":"flask后端","date":"2017-07-01T11:23:35.000Z","_content":"\n闲着无事便想着把之前没做的做完，我呈想过独立实现一个个人博客的前端后端，现在准备开始写。之前我曾经用Django写过两天，但是后面因为自己懒加上还有课程实习各种实习就搁置了。。。ORZ\n\n粗略看了一下flask发现是py的一个后端框架，正好对py兴趣正浓便用上了。这次打算重头造一次轮子，把过程弄清楚咯\n\n我想先把登录的后端验证写了，我对这方面很感兴趣。看了一下HTTP是无状态协议，每次请求是不知道你现在的权限的，但是我又不能每个页面操作都输入一次密码，所以得借助一些东西帮助服务端验证你的身份。那么我能想到的便是使用本地储存的cookie了，每次访问需要权限的页面把cookie发送给服务器验证，相当于自动验证密码不用手动输入了。\n\n我先尝试使用cookie做验证然后太讨论安全问题。\n\n中途出去了以下，妈个鸡的放假了校园还是那么多情侣。走到哪个幽暗角落都有抱在一起的情侣，贼尴尬。\n\n突然失去了梦想，想做一条咸鱼。","source":"_posts/flask后端.md","raw":"---\ntitle: flask后端\ndate: 2017-07-01 19:23:35\ntags: flask\n---\n\n闲着无事便想着把之前没做的做完，我呈想过独立实现一个个人博客的前端后端，现在准备开始写。之前我曾经用Django写过两天，但是后面因为自己懒加上还有课程实习各种实习就搁置了。。。ORZ\n\n粗略看了一下flask发现是py的一个后端框架，正好对py兴趣正浓便用上了。这次打算重头造一次轮子，把过程弄清楚咯\n\n我想先把登录的后端验证写了，我对这方面很感兴趣。看了一下HTTP是无状态协议，每次请求是不知道你现在的权限的，但是我又不能每个页面操作都输入一次密码，所以得借助一些东西帮助服务端验证你的身份。那么我能想到的便是使用本地储存的cookie了，每次访问需要权限的页面把cookie发送给服务器验证，相当于自动验证密码不用手动输入了。\n\n我先尝试使用cookie做验证然后太讨论安全问题。\n\n中途出去了以下，妈个鸡的放假了校园还是那么多情侣。走到哪个幽暗角落都有抱在一起的情侣，贼尴尬。\n\n突然失去了梦想，想做一条咸鱼。","slug":"flask后端","published":1,"updated":"2018-07-25T13:30:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknpv0002gvd9oihn8dvq","content":"<p>闲着无事便想着把之前没做的做完，我呈想过独立实现一个个人博客的前端后端，现在准备开始写。之前我曾经用Django写过两天，但是后面因为自己懒加上还有课程实习各种实习就搁置了。。。ORZ</p>\n<p>粗略看了一下flask发现是py的一个后端框架，正好对py兴趣正浓便用上了。这次打算重头造一次轮子，把过程弄清楚咯</p>\n<p>我想先把登录的后端验证写了，我对这方面很感兴趣。看了一下HTTP是无状态协议，每次请求是不知道你现在的权限的，但是我又不能每个页面操作都输入一次密码，所以得借助一些东西帮助服务端验证你的身份。那么我能想到的便是使用本地储存的cookie了，每次访问需要权限的页面把cookie发送给服务器验证，相当于自动验证密码不用手动输入了。</p>\n<p>我先尝试使用cookie做验证然后太讨论安全问题。</p>\n<p>中途出去了以下，妈个鸡的放假了校园还是那么多情侣。走到哪个幽暗角落都有抱在一起的情侣，贼尴尬。</p>\n<p>突然失去了梦想，想做一条咸鱼。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>闲着无事便想着把之前没做的做完，我呈想过独立实现一个个人博客的前端后端，现在准备开始写。之前我曾经用Django写过两天，但是后面因为自己懒加上还有课程实习各种实习就搁置了。。。ORZ</p>\n<p>粗略看了一下flask发现是py的一个后端框架，正好对py兴趣正浓便用上了。这次打算重头造一次轮子，把过程弄清楚咯</p>\n<p>我想先把登录的后端验证写了，我对这方面很感兴趣。看了一下HTTP是无状态协议，每次请求是不知道你现在的权限的，但是我又不能每个页面操作都输入一次密码，所以得借助一些东西帮助服务端验证你的身份。那么我能想到的便是使用本地储存的cookie了，每次访问需要权限的页面把cookie发送给服务器验证，相当于自动验证密码不用手动输入了。</p>\n<p>我先尝试使用cookie做验证然后太讨论安全问题。</p>\n<p>中途出去了以下，妈个鸡的放假了校园还是那么多情侣。走到哪个幽暗角落都有抱在一起的情侣，贼尴尬。</p>\n<p>突然失去了梦想，想做一条咸鱼。</p>\n"},{"title":"东湖绿道","date":"2017-06-18T14:38:25.000Z","_content":"\n​\t闲着无事便想去去东湖绿道看看,看看路过几次但是一只没机会走上去的东湖凌波栈道.\n\n{% asset_img 东湖凌波栈道.jpg 东湖凌波栈道 %}\n\n下午三点半出的门,太阳烈得不行.看到有不少人都拿被子出来晒,还看到了几个被妹子捆绑着的玩偶.\n\n{% asset_img 玩偶.jpg 玩偶 %}\n\n在等车的时候看见一妹子穿着韩服,跟着我上了同一班公交车(401,4字头是武汉的旅游路线.)\n\n磨山附近和上次去有了很大的不同,现在到处是共享单车.但是还是有人在共享单车旁做租车的生意,不知道能有什么竞争力.而且20块钱一个小时还要押金...\n\n东湖402线路好像已经不开了吧,毕竟东湖绿道已经被共享单车占领了,当初被誉为武汉最美的公交路线确实名副其实.\n\n{% asset_img 东湖绿道1.jpg 东湖绿道 %}\n\n{% asset_img 东湖绿道2.jpg 东湖绿道 %}\n\n{% asset_img 东湖绿道3.jpg 东湖绿道 %}\n\n我开始不好意思开共享单车...毕竟才刚刚学会.后面实在走不动了,附近开了下有没有ofo,就注册了摩拜还交了299的押金.踩的还是第一代人工发电的车.真的很重,知道为什么V2EX上一堆吐槽摩拜的了.下次试试他家新的车子(话说有些家长把孩子放在车筐里,路上我停车从后面过我还差点撞到,那母亲吓得不行,我也吓的不行....)\n\n我绕了一圈后到了东湖的桥那便不骑了,刚刚会老是扭车头,桥上人多路挤怕撞到人(下次买个保险再上路)\n\n停车买了一瓶农夫山泉,很喜欢它的瓶身插画和他的设计啊.感觉农夫山泉简直是现在饮料界的一朵奇葩,但是文艺感满满\n\n{% asset_img 农夫山泉.jpg 农夫山泉 %}\n\n(农夫山泉还做了国内第一款原味茶饮料,销售不咋的但是还是坚持保留了,听说只是看到日本原味茶饮料的市场份额提前占领国内市场233.它母公司还是养生堂,搞保健品的,但是子公司这这波我还是支持的)\n\n{% asset_img 东湖桥1.jpg 东湖桥-1 %}\n\n{% asset_img 东湖桥2.jpg 东湖桥-2 %}\n\n{% asset_img 东湖桥3.jpg 东湖桥-3 %}\n\n我过桥便走到八一路回学校了,路上开了一辆小黄车,那感觉真的好.踩上嗖嗖的,妈个鸡的摩拜就像我是人肉发电机一样.再也不想踩一代摩拜了.\n\n\n\n\n\n\n\n\n\n","source":"_posts/东湖绿道.md","raw":"---\ntitle: 东湖绿道\ndate: 2017-06-18 22:38:25\ntags: 碎碎念\n---\n\n​\t闲着无事便想去去东湖绿道看看,看看路过几次但是一只没机会走上去的东湖凌波栈道.\n\n{% asset_img 东湖凌波栈道.jpg 东湖凌波栈道 %}\n\n下午三点半出的门,太阳烈得不行.看到有不少人都拿被子出来晒,还看到了几个被妹子捆绑着的玩偶.\n\n{% asset_img 玩偶.jpg 玩偶 %}\n\n在等车的时候看见一妹子穿着韩服,跟着我上了同一班公交车(401,4字头是武汉的旅游路线.)\n\n磨山附近和上次去有了很大的不同,现在到处是共享单车.但是还是有人在共享单车旁做租车的生意,不知道能有什么竞争力.而且20块钱一个小时还要押金...\n\n东湖402线路好像已经不开了吧,毕竟东湖绿道已经被共享单车占领了,当初被誉为武汉最美的公交路线确实名副其实.\n\n{% asset_img 东湖绿道1.jpg 东湖绿道 %}\n\n{% asset_img 东湖绿道2.jpg 东湖绿道 %}\n\n{% asset_img 东湖绿道3.jpg 东湖绿道 %}\n\n我开始不好意思开共享单车...毕竟才刚刚学会.后面实在走不动了,附近开了下有没有ofo,就注册了摩拜还交了299的押金.踩的还是第一代人工发电的车.真的很重,知道为什么V2EX上一堆吐槽摩拜的了.下次试试他家新的车子(话说有些家长把孩子放在车筐里,路上我停车从后面过我还差点撞到,那母亲吓得不行,我也吓的不行....)\n\n我绕了一圈后到了东湖的桥那便不骑了,刚刚会老是扭车头,桥上人多路挤怕撞到人(下次买个保险再上路)\n\n停车买了一瓶农夫山泉,很喜欢它的瓶身插画和他的设计啊.感觉农夫山泉简直是现在饮料界的一朵奇葩,但是文艺感满满\n\n{% asset_img 农夫山泉.jpg 农夫山泉 %}\n\n(农夫山泉还做了国内第一款原味茶饮料,销售不咋的但是还是坚持保留了,听说只是看到日本原味茶饮料的市场份额提前占领国内市场233.它母公司还是养生堂,搞保健品的,但是子公司这这波我还是支持的)\n\n{% asset_img 东湖桥1.jpg 东湖桥-1 %}\n\n{% asset_img 东湖桥2.jpg 东湖桥-2 %}\n\n{% asset_img 东湖桥3.jpg 东湖桥-3 %}\n\n我过桥便走到八一路回学校了,路上开了一辆小黄车,那感觉真的好.踩上嗖嗖的,妈个鸡的摩拜就像我是人肉发电机一样.再也不想踩一代摩拜了.\n\n\n\n\n\n\n\n\n\n","slug":"东湖绿道","published":1,"updated":"2018-07-25T13:30:08.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknq30005gvd9jazdezqz","content":"<p>​    闲着无事便想去去东湖绿道看看,看看路过几次但是一只没机会走上去的东湖凌波栈道.</p>\n<img src=\"/2017/06/18/东湖绿道/东湖凌波栈道.jpg\" title=\"东湖凌波栈道\">\n<p>下午三点半出的门,太阳烈得不行.看到有不少人都拿被子出来晒,还看到了几个被妹子捆绑着的玩偶.</p>\n<img src=\"/2017/06/18/东湖绿道/玩偶.jpg\" title=\"玩偶\">\n<p>在等车的时候看见一妹子穿着韩服,跟着我上了同一班公交车(401,4字头是武汉的旅游路线.)</p>\n<p>磨山附近和上次去有了很大的不同,现在到处是共享单车.但是还是有人在共享单车旁做租车的生意,不知道能有什么竞争力.而且20块钱一个小时还要押金…</p>\n<p>东湖402线路好像已经不开了吧,毕竟东湖绿道已经被共享单车占领了,当初被誉为武汉最美的公交路线确实名副其实.</p>\n<img src=\"/2017/06/18/东湖绿道/东湖绿道1.jpg\" title=\"东湖绿道\">\n<img src=\"/2017/06/18/东湖绿道/东湖绿道2.jpg\" title=\"东湖绿道\">\n<img src=\"/2017/06/18/东湖绿道/东湖绿道3.jpg\" title=\"东湖绿道\">\n<p>我开始不好意思开共享单车…毕竟才刚刚学会.后面实在走不动了,附近开了下有没有ofo,就注册了摩拜还交了299的押金.踩的还是第一代人工发电的车.真的很重,知道为什么V2EX上一堆吐槽摩拜的了.下次试试他家新的车子(话说有些家长把孩子放在车筐里,路上我停车从后面过我还差点撞到,那母亲吓得不行,我也吓的不行….)</p>\n<p>我绕了一圈后到了东湖的桥那便不骑了,刚刚会老是扭车头,桥上人多路挤怕撞到人(下次买个保险再上路)</p>\n<p>停车买了一瓶农夫山泉,很喜欢它的瓶身插画和他的设计啊.感觉农夫山泉简直是现在饮料界的一朵奇葩,但是文艺感满满</p>\n<img src=\"/2017/06/18/东湖绿道/农夫山泉.jpg\" title=\"农夫山泉\">\n<p>(农夫山泉还做了国内第一款原味茶饮料,销售不咋的但是还是坚持保留了,听说只是看到日本原味茶饮料的市场份额提前占领国内市场233.它母公司还是养生堂,搞保健品的,但是子公司这这波我还是支持的)</p>\n<img src=\"/2017/06/18/东湖绿道/东湖桥1.jpg\" title=\"东湖桥-1\">\n<img src=\"/2017/06/18/东湖绿道/东湖桥2.jpg\" title=\"东湖桥-2\">\n<img src=\"/2017/06/18/东湖绿道/东湖桥3.jpg\" title=\"东湖桥-3\">\n<p>我过桥便走到八一路回学校了,路上开了一辆小黄车,那感觉真的好.踩上嗖嗖的,妈个鸡的摩拜就像我是人肉发电机一样.再也不想踩一代摩拜了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    闲着无事便想去去东湖绿道看看,看看路过几次但是一只没机会走上去的东湖凌波栈道.</p>\n<img src=\"/2017/06/18/东湖绿道/东湖凌波栈道.jpg\" title=\"东湖凌波栈道\">\n<p>下午三点半出的门,太阳烈得不行.看到有不少人都拿被子出来晒,还看到了几个被妹子捆绑着的玩偶.</p>\n<img src=\"/2017/06/18/东湖绿道/玩偶.jpg\" title=\"玩偶\">\n<p>在等车的时候看见一妹子穿着韩服,跟着我上了同一班公交车(401,4字头是武汉的旅游路线.)</p>\n<p>磨山附近和上次去有了很大的不同,现在到处是共享单车.但是还是有人在共享单车旁做租车的生意,不知道能有什么竞争力.而且20块钱一个小时还要押金…</p>\n<p>东湖402线路好像已经不开了吧,毕竟东湖绿道已经被共享单车占领了,当初被誉为武汉最美的公交路线确实名副其实.</p>\n<img src=\"/2017/06/18/东湖绿道/东湖绿道1.jpg\" title=\"东湖绿道\">\n<img src=\"/2017/06/18/东湖绿道/东湖绿道2.jpg\" title=\"东湖绿道\">\n<img src=\"/2017/06/18/东湖绿道/东湖绿道3.jpg\" title=\"东湖绿道\">\n<p>我开始不好意思开共享单车…毕竟才刚刚学会.后面实在走不动了,附近开了下有没有ofo,就注册了摩拜还交了299的押金.踩的还是第一代人工发电的车.真的很重,知道为什么V2EX上一堆吐槽摩拜的了.下次试试他家新的车子(话说有些家长把孩子放在车筐里,路上我停车从后面过我还差点撞到,那母亲吓得不行,我也吓的不行….)</p>\n<p>我绕了一圈后到了东湖的桥那便不骑了,刚刚会老是扭车头,桥上人多路挤怕撞到人(下次买个保险再上路)</p>\n<p>停车买了一瓶农夫山泉,很喜欢它的瓶身插画和他的设计啊.感觉农夫山泉简直是现在饮料界的一朵奇葩,但是文艺感满满</p>\n<img src=\"/2017/06/18/东湖绿道/农夫山泉.jpg\" title=\"农夫山泉\">\n<p>(农夫山泉还做了国内第一款原味茶饮料,销售不咋的但是还是坚持保留了,听说只是看到日本原味茶饮料的市场份额提前占领国内市场233.它母公司还是养生堂,搞保健品的,但是子公司这这波我还是支持的)</p>\n<img src=\"/2017/06/18/东湖绿道/东湖桥1.jpg\" title=\"东湖桥-1\">\n<img src=\"/2017/06/18/东湖绿道/东湖桥2.jpg\" title=\"东湖桥-2\">\n<img src=\"/2017/06/18/东湖绿道/东湖桥3.jpg\" title=\"东湖桥-3\">\n<p>我过桥便走到八一路回学校了,路上开了一辆小黄车,那感觉真的好.踩上嗖嗖的,妈个鸡的摩拜就像我是人肉发电机一样.再也不想踩一代摩拜了.</p>\n"},{"title":"使用uwsgi 和 nginx 部署 Flask","date":"2018-05-01T11:09:22.000Z","_content":"\n​\t之前使用了 gunicorn 来部署 Flask 应用,但是感觉 nginx 会不会更快一些, 于是就有了尝试使用 uwsgi 配合 nginx 来部署 Flask 的想法.\n\n​\t但是看了一些文章之后感觉速度应该是一样的, 后端都是 Python, 但是有人说 Nginx 更安全. 静态页面的支持也更好, 所以也配置玩一下顺便测试一下静态的并发量.\n\n​\t首先安装uWSGI, 使用pip来安装\n\n```\npip install uwsgi\n```\n\n在 Flask 应用的目录下测试 uwsgi 是否工作 \n\n```bash\nuwsgi --socket 0.0.0.0:8000 --protocol=http -w run:app\n```\n\n这时候打开 127.0.0.1:8000 就可以看到 网站的首页了.\n\n接着我们配置真正配合 nginx 使用的 uwsgi 配置.\n\n在 Flask 应用目录下新建一个文件 config.ini 作为uwsgi 的配置文件\n\n```\n[uwsgi]\nmaster = true\nwsgi-file = run.py\ncallable = app\nchmod-socker = 777\nsocket =  127.0.0.1:3031\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n这里 run.py 是 Flask 应用的主文件, socket 是接收 nginx 转发过来的接口.\n\n使用这个配置文件启动 uwsgi\n\n```\nuwsgi config.ini\n```\n\n接着配置 nginx 的配置文件\n\nnginx 默认的是 /etc/nginx/nginc.conf, 里面会载入 sites-enabled 里的所有文件.\n\n所以我们在 sites-enabled 文件夹里新建个名为 stock.conf 的文件,填入以下字段\n\n```nginx\nserver {\n\tlisten 80;\n\tlocation / {\n    \tinclude uwsgi_params;\n    \tuwsgi_pass 127.0.0.1:3031;\n\t}\n}\n```\n\n这里的意思是监听 80 端口的信息, 使用 uwsgi 传递给 127.0.0.1:3031 这个地址, 3031是随便取得, 取啥都可以, 没有被系统占用就行.\n\n配置完成后可以先检查一下配置文件是否正确\n\n```bash\nsudo nginx -t\n```\n\n如果正确无误就可以启动 ngxin 了\n\n```bash\nsudo service nginx start\n```\n\n接着打开你的网址应该就可以看到网站的首页了.\n\n接着我用 webbench -c 500 -t 60 测试本地的服务器并发数, 一回车 CPU 就吃满了\n\n![](http://malu-picture.oss-cn-beijing.aliyuncs.com/18-5-1/23344536.jpg)\n\n但是效果非常好, 比之前高了很多,\n\n```\nBenchmarking: GET http://127.0.0.1/\n500 clients, running 60 sec.\n\nSpeed=135661 pages/min, 1288988 bytes/sec.\nRequests: 94304 susceed, 41357 failed.\n```\n\n大约相比本地使用 Flask 自带的 http server 使用 Redis 缓存效果高五倍\n\n接着测试打在阿里云 1G1C 服务器上的效果\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=4011 pages/min, 113179 bytes/sec.\nRequests: 4011 susceed, 0 failed.\n```\n\n效果并没有好多少...不过看了113179 bytes/sec.大约也跑满了1m的带宽了...难道真的是我的服务器带宽限制了???\n\n在付了两块钱临时升级3个小时到10M带宽后再进行测试一下.\n\n先测速一下\n\n```\nRetrieving speedtest.net configuration...\nTesting from CNISP-Union Technology (Beijing) Co. (106.15.205.43)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by China Telecom ZheJiang Branch (Hangzhou) [4.87 km]: 6.874 ms\nTesting download speed................................................................................\nDownload: 324.60 Mbit/s\nTesting upload speed................................................................................................\nUpload: 9.36 Mbit/s\n```\n\n不错, 阿里云好像是带宽限制的是上传的, 下载能飙到 300 M. 测试前打开top查看cpu占用\n\n```\ntop - 23:04:20 up 3 days,  4:32,  2 users,  load average: 1.81, 0.44, 0.14\nTasks:  96 total,   4 running,  92 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 77.7 us, 14.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  8.0 si,  0.0 st\nKiB Mem :  2052568 total,  1291168 free,   161252 used,   600148 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  1693260 avail Mem \n```\n\n小鸡 CPU 跑到 70多...\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=43731 pages/min, 1123486 bytes/sec.\nRequests: 42446 susceed, 1285 failed.\n```\n\n好了, 数据确实多了10倍...看来确实是带宽限制了. 小鸡 CPU 也不怎么受得了.\n\n","source":"_posts/使用uwsgi-和-nginx-部署-Flask.md","raw":"---\ntitle: 使用uwsgi 和 nginx 部署 Flask\ndate: 2018-05-01 19:09:22\ntags: uwsgi nginx Flask\n---\n\n​\t之前使用了 gunicorn 来部署 Flask 应用,但是感觉 nginx 会不会更快一些, 于是就有了尝试使用 uwsgi 配合 nginx 来部署 Flask 的想法.\n\n​\t但是看了一些文章之后感觉速度应该是一样的, 后端都是 Python, 但是有人说 Nginx 更安全. 静态页面的支持也更好, 所以也配置玩一下顺便测试一下静态的并发量.\n\n​\t首先安装uWSGI, 使用pip来安装\n\n```\npip install uwsgi\n```\n\n在 Flask 应用的目录下测试 uwsgi 是否工作 \n\n```bash\nuwsgi --socket 0.0.0.0:8000 --protocol=http -w run:app\n```\n\n这时候打开 127.0.0.1:8000 就可以看到 网站的首页了.\n\n接着我们配置真正配合 nginx 使用的 uwsgi 配置.\n\n在 Flask 应用目录下新建一个文件 config.ini 作为uwsgi 的配置文件\n\n```\n[uwsgi]\nmaster = true\nwsgi-file = run.py\ncallable = app\nchmod-socker = 777\nsocket =  127.0.0.1:3031\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n这里 run.py 是 Flask 应用的主文件, socket 是接收 nginx 转发过来的接口.\n\n使用这个配置文件启动 uwsgi\n\n```\nuwsgi config.ini\n```\n\n接着配置 nginx 的配置文件\n\nnginx 默认的是 /etc/nginx/nginc.conf, 里面会载入 sites-enabled 里的所有文件.\n\n所以我们在 sites-enabled 文件夹里新建个名为 stock.conf 的文件,填入以下字段\n\n```nginx\nserver {\n\tlisten 80;\n\tlocation / {\n    \tinclude uwsgi_params;\n    \tuwsgi_pass 127.0.0.1:3031;\n\t}\n}\n```\n\n这里的意思是监听 80 端口的信息, 使用 uwsgi 传递给 127.0.0.1:3031 这个地址, 3031是随便取得, 取啥都可以, 没有被系统占用就行.\n\n配置完成后可以先检查一下配置文件是否正确\n\n```bash\nsudo nginx -t\n```\n\n如果正确无误就可以启动 ngxin 了\n\n```bash\nsudo service nginx start\n```\n\n接着打开你的网址应该就可以看到网站的首页了.\n\n接着我用 webbench -c 500 -t 60 测试本地的服务器并发数, 一回车 CPU 就吃满了\n\n![](http://malu-picture.oss-cn-beijing.aliyuncs.com/18-5-1/23344536.jpg)\n\n但是效果非常好, 比之前高了很多,\n\n```\nBenchmarking: GET http://127.0.0.1/\n500 clients, running 60 sec.\n\nSpeed=135661 pages/min, 1288988 bytes/sec.\nRequests: 94304 susceed, 41357 failed.\n```\n\n大约相比本地使用 Flask 自带的 http server 使用 Redis 缓存效果高五倍\n\n接着测试打在阿里云 1G1C 服务器上的效果\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=4011 pages/min, 113179 bytes/sec.\nRequests: 4011 susceed, 0 failed.\n```\n\n效果并没有好多少...不过看了113179 bytes/sec.大约也跑满了1m的带宽了...难道真的是我的服务器带宽限制了???\n\n在付了两块钱临时升级3个小时到10M带宽后再进行测试一下.\n\n先测速一下\n\n```\nRetrieving speedtest.net configuration...\nTesting from CNISP-Union Technology (Beijing) Co. (106.15.205.43)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by China Telecom ZheJiang Branch (Hangzhou) [4.87 km]: 6.874 ms\nTesting download speed................................................................................\nDownload: 324.60 Mbit/s\nTesting upload speed................................................................................................\nUpload: 9.36 Mbit/s\n```\n\n不错, 阿里云好像是带宽限制的是上传的, 下载能飙到 300 M. 测试前打开top查看cpu占用\n\n```\ntop - 23:04:20 up 3 days,  4:32,  2 users,  load average: 1.81, 0.44, 0.14\nTasks:  96 total,   4 running,  92 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 77.7 us, 14.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  8.0 si,  0.0 st\nKiB Mem :  2052568 total,  1291168 free,   161252 used,   600148 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  1693260 avail Mem \n```\n\n小鸡 CPU 跑到 70多...\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=43731 pages/min, 1123486 bytes/sec.\nRequests: 42446 susceed, 1285 failed.\n```\n\n好了, 数据确实多了10倍...看来确实是带宽限制了. 小鸡 CPU 也不怎么受得了.\n\n","slug":"使用uwsgi-和-nginx-部署-Flask","published":1,"updated":"2018-07-25T13:30:08.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknq60006gvd9ck542jmp","content":"<p>​    之前使用了 gunicorn 来部署 Flask 应用,但是感觉 nginx 会不会更快一些, 于是就有了尝试使用 uwsgi 配合 nginx 来部署 Flask 的想法.</p>\n<p>​    但是看了一些文章之后感觉速度应该是一样的, 后端都是 Python, 但是有人说 Nginx 更安全. 静态页面的支持也更好, 所以也配置玩一下顺便测试一下静态的并发量.</p>\n<p>​    首先安装uWSGI, 使用pip来安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n<p>在 Flask 应用的目录下测试 uwsgi 是否工作 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --socket 0.0.0.0:8000 --protocol=http -w run:app</span><br></pre></td></tr></table></figure>\n<p>这时候打开 127.0.0.1:8000 就可以看到 网站的首页了.</p>\n<p>接着我们配置真正配合 nginx 使用的 uwsgi 配置.</p>\n<p>在 Flask 应用目录下新建一个文件 config.ini 作为uwsgi 的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">master = true</span><br><span class=\"line\">wsgi-file = run.py</span><br><span class=\"line\">callable = app</span><br><span class=\"line\">chmod-socker = 777</span><br><span class=\"line\">socket =  127.0.0.1:3031</span><br><span class=\"line\">processes = 4</span><br><span class=\"line\">threads = 2</span><br><span class=\"line\">buffer-size = 32768</span><br></pre></td></tr></table></figure>\n<p>这里 run.py 是 Flask 应用的主文件, socket 是接收 nginx 转发过来的接口.</p>\n<p>使用这个配置文件启动 uwsgi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi config.ini</span><br></pre></td></tr></table></figure>\n<p>接着配置 nginx 的配置文件</p>\n<p>nginx 默认的是 /etc/nginx/nginc.conf, 里面会载入 sites-enabled 里的所有文件.</p>\n<p>所以我们在 sites-enabled 文件夹里新建个名为 stock.conf 的文件,填入以下字段</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">include</span> uwsgi_params;</span><br><span class=\"line\">    \t<span class=\"attribute\">uwsgi_pass</span> <span class=\"number\">127.0.0.1:3031</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的意思是监听 80 端口的信息, 使用 uwsgi 传递给 127.0.0.1:3031 这个地址, 3031是随便取得, 取啥都可以, 没有被系统占用就行.</p>\n<p>配置完成后可以先检查一下配置文件是否正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>如果正确无误就可以启动 ngxin 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>接着打开你的网址应该就可以看到网站的首页了.</p>\n<p>接着我用 webbench -c 500 -t 60 测试本地的服务器并发数, 一回车 CPU 就吃满了</p>\n<p><img src=\"http://malu-picture.oss-cn-beijing.aliyuncs.com/18-5-1/23344536.jpg\" alt=\"\"></p>\n<p>但是效果非常好, 比之前高了很多,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=135661 pages/min, 1288988 bytes/sec.</span><br><span class=\"line\">Requests: 94304 susceed, 41357 failed.</span><br></pre></td></tr></table></figure>\n<p>大约相比本地使用 Flask 自带的 http server 使用 Redis 缓存效果高五倍</p>\n<p>接着测试打在阿里云 1G1C 服务器上的效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=4011 pages/min, 113179 bytes/sec.</span><br><span class=\"line\">Requests: 4011 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>效果并没有好多少…不过看了113179 bytes/sec.大约也跑满了1m的带宽了…难道真的是我的服务器带宽限制了???</p>\n<p>在付了两块钱临时升级3个小时到10M带宽后再进行测试一下.</p>\n<p>先测速一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrieving speedtest.net configuration...</span><br><span class=\"line\">Testing from CNISP-Union Technology (Beijing) Co. (106.15.205.43)...</span><br><span class=\"line\">Retrieving speedtest.net server list...</span><br><span class=\"line\">Selecting best server based on ping...</span><br><span class=\"line\">Hosted by China Telecom ZheJiang Branch (Hangzhou) [4.87 km]: 6.874 ms</span><br><span class=\"line\">Testing download speed................................................................................</span><br><span class=\"line\">Download: 324.60 Mbit/s</span><br><span class=\"line\">Testing upload speed................................................................................................</span><br><span class=\"line\">Upload: 9.36 Mbit/s</span><br></pre></td></tr></table></figure>\n<p>不错, 阿里云好像是带宽限制的是上传的, 下载能飙到 300 M. 测试前打开top查看cpu占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 23:04:20 up 3 days,  4:32,  2 users,  load average: 1.81, 0.44, 0.14</span><br><span class=\"line\">Tasks:  96 total,   4 running,  92 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s): 77.7 us, 14.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  8.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  2052568 total,  1291168 free,   161252 used,   600148 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  1693260 avail Mem</span><br></pre></td></tr></table></figure>\n<p>小鸡 CPU 跑到 70多…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=43731 pages/min, 1123486 bytes/sec.</span><br><span class=\"line\">Requests: 42446 susceed, 1285 failed.</span><br></pre></td></tr></table></figure>\n<p>好了, 数据确实多了10倍…看来确实是带宽限制了. 小鸡 CPU 也不怎么受得了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    之前使用了 gunicorn 来部署 Flask 应用,但是感觉 nginx 会不会更快一些, 于是就有了尝试使用 uwsgi 配合 nginx 来部署 Flask 的想法.</p>\n<p>​    但是看了一些文章之后感觉速度应该是一样的, 后端都是 Python, 但是有人说 Nginx 更安全. 静态页面的支持也更好, 所以也配置玩一下顺便测试一下静态的并发量.</p>\n<p>​    首先安装uWSGI, 使用pip来安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n<p>在 Flask 应用的目录下测试 uwsgi 是否工作 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --socket 0.0.0.0:8000 --protocol=http -w run:app</span><br></pre></td></tr></table></figure>\n<p>这时候打开 127.0.0.1:8000 就可以看到 网站的首页了.</p>\n<p>接着我们配置真正配合 nginx 使用的 uwsgi 配置.</p>\n<p>在 Flask 应用目录下新建一个文件 config.ini 作为uwsgi 的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">master = true</span><br><span class=\"line\">wsgi-file = run.py</span><br><span class=\"line\">callable = app</span><br><span class=\"line\">chmod-socker = 777</span><br><span class=\"line\">socket =  127.0.0.1:3031</span><br><span class=\"line\">processes = 4</span><br><span class=\"line\">threads = 2</span><br><span class=\"line\">buffer-size = 32768</span><br></pre></td></tr></table></figure>\n<p>这里 run.py 是 Flask 应用的主文件, socket 是接收 nginx 转发过来的接口.</p>\n<p>使用这个配置文件启动 uwsgi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi config.ini</span><br></pre></td></tr></table></figure>\n<p>接着配置 nginx 的配置文件</p>\n<p>nginx 默认的是 /etc/nginx/nginc.conf, 里面会载入 sites-enabled 里的所有文件.</p>\n<p>所以我们在 sites-enabled 文件夹里新建个名为 stock.conf 的文件,填入以下字段</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">include</span> uwsgi_params;</span><br><span class=\"line\">    \t<span class=\"attribute\">uwsgi_pass</span> <span class=\"number\">127.0.0.1:3031</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的意思是监听 80 端口的信息, 使用 uwsgi 传递给 127.0.0.1:3031 这个地址, 3031是随便取得, 取啥都可以, 没有被系统占用就行.</p>\n<p>配置完成后可以先检查一下配置文件是否正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>如果正确无误就可以启动 ngxin 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>接着打开你的网址应该就可以看到网站的首页了.</p>\n<p>接着我用 webbench -c 500 -t 60 测试本地的服务器并发数, 一回车 CPU 就吃满了</p>\n<p><img src=\"http://malu-picture.oss-cn-beijing.aliyuncs.com/18-5-1/23344536.jpg\" alt=\"\"></p>\n<p>但是效果非常好, 比之前高了很多,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=135661 pages/min, 1288988 bytes/sec.</span><br><span class=\"line\">Requests: 94304 susceed, 41357 failed.</span><br></pre></td></tr></table></figure>\n<p>大约相比本地使用 Flask 自带的 http server 使用 Redis 缓存效果高五倍</p>\n<p>接着测试打在阿里云 1G1C 服务器上的效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=4011 pages/min, 113179 bytes/sec.</span><br><span class=\"line\">Requests: 4011 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>效果并没有好多少…不过看了113179 bytes/sec.大约也跑满了1m的带宽了…难道真的是我的服务器带宽限制了???</p>\n<p>在付了两块钱临时升级3个小时到10M带宽后再进行测试一下.</p>\n<p>先测速一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrieving speedtest.net configuration...</span><br><span class=\"line\">Testing from CNISP-Union Technology (Beijing) Co. (106.15.205.43)...</span><br><span class=\"line\">Retrieving speedtest.net server list...</span><br><span class=\"line\">Selecting best server based on ping...</span><br><span class=\"line\">Hosted by China Telecom ZheJiang Branch (Hangzhou) [4.87 km]: 6.874 ms</span><br><span class=\"line\">Testing download speed................................................................................</span><br><span class=\"line\">Download: 324.60 Mbit/s</span><br><span class=\"line\">Testing upload speed................................................................................................</span><br><span class=\"line\">Upload: 9.36 Mbit/s</span><br></pre></td></tr></table></figure>\n<p>不错, 阿里云好像是带宽限制的是上传的, 下载能飙到 300 M. 测试前打开top查看cpu占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 23:04:20 up 3 days,  4:32,  2 users,  load average: 1.81, 0.44, 0.14</span><br><span class=\"line\">Tasks:  96 total,   4 running,  92 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s): 77.7 us, 14.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  8.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  2052568 total,  1291168 free,   161252 used,   600148 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  1693260 avail Mem</span><br></pre></td></tr></table></figure>\n<p>小鸡 CPU 跑到 70多…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=43731 pages/min, 1123486 bytes/sec.</span><br><span class=\"line\">Requests: 42446 susceed, 1285 failed.</span><br></pre></td></tr></table></figure>\n<p>好了, 数据确实多了10倍…看来确实是带宽限制了. 小鸡 CPU 也不怎么受得了.</p>\n"},{"title":"一出好戏","date":"2018-08-25T16:07:30.000Z","_content":"\n今天去看了黄渤的《一出好戏》,起因还是纸巾说黄渤当上导演后就变成索吻狂魔, 剧中舒淇,张艺兴都被索吻了,只因张艺兴拍片经验不足而在银幕献出了初吻.[捂脸]\n\n{% asset_img 黄渤.gif 初吻 %}\n\n感觉片中黄渤想说的很多,但是限于电影的篇幅没办法展开来,其实任何一个话题展开来都可以拍成一部电影.但是黄渤紧赶慢赶朝着他想表达的结局去了.\n\n剧情发生在一个荒岛上.一群人因为灾难困在了一个无人岛,接下来就是生存的问题,相信不少人都这么幻想过这么一个场景,所以每个人心中也都有一个答案,电影中的情节也更容易被人评判合不合 「常理」.我也不例外.\n\n面对一个荒岛求生问题,剧中人在一开始还保留着社会中人与人的地位关系,导游(王宝强)照顾着一大群人,而公司底层的保安被x总使唤着.直到有一天底层的人发现原来的社会回不去了,自然不满因为之前社会而形成的阶层关系,在剧里则是王宝强不满其他人不工作吃着他获取的食物和有的没的抱怨. 而保安也不满现在仍被使唤着.冲突便爆发了 .\n\n在避雨的洞穴里众人秉着有奶便是娘的朴素观念推举王宝强为众人的头, 带领着这群人活下去.在x总还碎嘴管理经验时王宝强道出他也有好几年的经验. 两年猴子三年熊. 退伍后在动物园里担任饲养员...于是王宝强在众人的强烈意愿下走上了管理的职位. 到这里自己也感觉合情合理,在极端的环境下自然是掌握更多资源的人统领着.现在有价值的自然是武力和资源, 这时候王宝强两项都有,他是退伍兵和懂得野外生存技巧.(虽然我觉得大活人怎么可能饿死...)\n\n之后王宝强用管理后的方法管理着人,每天规定带回来食物,空手而归就饿肚子(话说既然这样为什么还要找一个人领导呢,自己一个人也饿不着啊),但是黄渤因为中了彩票6000w有强烈回归社会的欲望...\n\n再一次冲突爆发是因为黄渤因为一次没带鱼回来然后王宝强杀鸡儆猴..(感觉这时候的冲突剧里演绎得很严重,但是每个人似乎却没什么反应...在我的设想里权利的争夺出几条人命是非常正常的事情.但是在这里似乎每个人都是社会主义好公民,)..黄渤在这段里想舒淇索吻..果断被拒绝了.在出海被浪冲回来后冲突达到高点.和张总谋划着什么.\n\n在晚上分食中,有人抱怨为啥什么都不做却可以分到食物,这时候已经分化出两个阶级了.王宝强和他身边的狗腿子.剩下的便是需要每天带着食物回来的劳动人民..冲突爆发,张总即主角不满当下没尊严的上下级关系.带着一群人去建立带有人类尊严的新世界.\n\n张总那么有底气是因为他发现了一艘颠倒的巨轮.这里有个BUG,剧中人物通过颠倒的楼梯走到船上的一层...或许是他们新弄了一个梯子吧..别在意,别在意\n\n{% asset_img 脑袋有问题.png 阿虚 %}\n\n巨轮上什么都有,杯碟,葡萄酒,以及渔网(一个邮轮干嘛有渔网啊!!!,别在意别在意),这时候岛上有了两个团体,一个王宝强带领着的第一代和张总坐拥游轮宝库的第二代.剧中展现了有渔网后生产力大幅提升的画面.\n\n在第一代和第二代接触后,张总表达了欢迎对面的人过来的意思,但是基于不知道什么的原因竟然有人依旧跟着王宝强(为啥?告诉我为啥?),张总作为拥有游轮宝库的人,表达了任何人都可以用手中的食物交换游轮上物件.并使用纸牌作为交易媒介,于是货币产生了.\n\n到这里感觉黄渤想表达很多东西,可是如果这方面如果更详细的表现我相信会更有意思.现代货币的抵押物,以及什么能代表他的价值,但是这里感觉黄渤一笔带过,就是为了之后张总的超发货币埋下伏笔,剧集中人发现扑克牌的货币和说好的数量不一样,,,拜托,超发最先体现的就是价值变化好吗,你们作为使用者这么后知后觉么.感觉如果黄渤想表达张总如何通过货币的发行权剥削所有人,那么通过设置一个使用货币的场景使用者发现货币的价值下降了来表达更好.而不是后来用为什么有四张红桃2表现出来.而且随着生产力的发展发行货币并没有什么错误啊,如果随着物质的增加而货币没有增加,那么单位货币代表的货物价值便增加了.这么就相当于拥有大量货币的人剥削着增长的生产率.这个话题拍一部电影都没问题.\n\n之后主演黄渤在不知道为什么在明显没有任何办法回去的情况下还强行离开第二代团队.而且离开团队后也没有任何离开小岛的行动,这一段非常无厘头,感觉明显为了冲突而冲突.期间不知道为什么展现了很奇怪的逻辑,比如对关心自己的女神发了一段脾气.\n\n对了,这里觉得黄渤主演的这个小人物追求女孩的行为非常危险,因为在之前和舒淇对话中舒淇表示并不知道对方喜欢自己,并说为什么不勇敢表达出来,在黄渤鼓起勇气表白后舒淇十动然拒.黄渤出演的小人物突然变得愤怒,似乎觉得对方愧对自己的真心和种种奉献.但是感觉这类人物会把自己对别人的奉献想得无比厚重,同时对方必须回敬.所以后面被拒绝后会愤怒,觉得对方亏待了自己.感觉显示中很多分手后报复的行为都和这种心理有关.往往追求得越痴情,报复也更加惨重.\n\n在之后兑奖期后黄渤彻底放弃了回去的念头,但是老天爷开了个玩笑,以天降许多鱼的方式给了他6000w,于是黄渤决定在这小岛上好好经营自己.他使用咸鱼兑换岛上不可再生的一切物品,感觉黄渤想涉及很多社会的自治和经济的一些东西,但是这些在剧集里仅仅一笔带过.最后也没见兑换东西的作用.到底还是黄渤想表达得太多太多.最后却什么也没展现\n\n在黄渤以信仰的方式取得地位后每个人都穿用床单制作的新衣服,感觉这似乎是想表达新的社会结构?,感觉像是日本60年代那段最左翼的时期,邪教和社会运动共同作用的结果,人们聚集在会社形式的村子里共同生活,组织生产.各种形式的社会实验.\n\n{% asset_img 宗教.jpg 宗教 %}\n\n接下来我感觉是剧情最密集的时刻,能看出许多有趣的话题但却翻篇太快,感觉像是15页的哲学史.在这后面里看到了黄渤想表达信仰聚集起来的组织结构,\t爱情与人性的抉择,拥有权力后与自己当初承诺的背离,特别是在最后发现现代社会并没有崩坏,相反每隔12天还有一艘游轮经过后.\n\n这里之前表现的仅仅是在荒岛上拥有地位发现可以回去现代社会,但是回去后自己还是那个小角色,每个人的地位又回去了. 似乎有不少电影都有的剧情,这里也没表现有什么方法可以让游轮发现荒岛上还有一群人的方法,仅仅告不告诉,后面的烧船又似乎是想表现另外一个事情,如果把剧情改成不是黄渤不想告诉,而是回去的方法是烧掉当前的游轮群众不愿意会不会更好?太多太多,感觉自己都混乱了.\n\n后面又不断表达这是梦境,这是梦境,又是一种表现手法?是黄渤想拍得太多还是仅仅我们观众多想了而已?\n\n{% asset_img 蜥蜴.jpg 蜥蜴 %}","source":"_posts/一出好戏.md","raw":"---\ntitle: 一出好戏\ndate: 2018-08-26 00:07:30\ntags: 杂谈\n---\n\n今天去看了黄渤的《一出好戏》,起因还是纸巾说黄渤当上导演后就变成索吻狂魔, 剧中舒淇,张艺兴都被索吻了,只因张艺兴拍片经验不足而在银幕献出了初吻.[捂脸]\n\n{% asset_img 黄渤.gif 初吻 %}\n\n感觉片中黄渤想说的很多,但是限于电影的篇幅没办法展开来,其实任何一个话题展开来都可以拍成一部电影.但是黄渤紧赶慢赶朝着他想表达的结局去了.\n\n剧情发生在一个荒岛上.一群人因为灾难困在了一个无人岛,接下来就是生存的问题,相信不少人都这么幻想过这么一个场景,所以每个人心中也都有一个答案,电影中的情节也更容易被人评判合不合 「常理」.我也不例外.\n\n面对一个荒岛求生问题,剧中人在一开始还保留着社会中人与人的地位关系,导游(王宝强)照顾着一大群人,而公司底层的保安被x总使唤着.直到有一天底层的人发现原来的社会回不去了,自然不满因为之前社会而形成的阶层关系,在剧里则是王宝强不满其他人不工作吃着他获取的食物和有的没的抱怨. 而保安也不满现在仍被使唤着.冲突便爆发了 .\n\n在避雨的洞穴里众人秉着有奶便是娘的朴素观念推举王宝强为众人的头, 带领着这群人活下去.在x总还碎嘴管理经验时王宝强道出他也有好几年的经验. 两年猴子三年熊. 退伍后在动物园里担任饲养员...于是王宝强在众人的强烈意愿下走上了管理的职位. 到这里自己也感觉合情合理,在极端的环境下自然是掌握更多资源的人统领着.现在有价值的自然是武力和资源, 这时候王宝强两项都有,他是退伍兵和懂得野外生存技巧.(虽然我觉得大活人怎么可能饿死...)\n\n之后王宝强用管理后的方法管理着人,每天规定带回来食物,空手而归就饿肚子(话说既然这样为什么还要找一个人领导呢,自己一个人也饿不着啊),但是黄渤因为中了彩票6000w有强烈回归社会的欲望...\n\n再一次冲突爆发是因为黄渤因为一次没带鱼回来然后王宝强杀鸡儆猴..(感觉这时候的冲突剧里演绎得很严重,但是每个人似乎却没什么反应...在我的设想里权利的争夺出几条人命是非常正常的事情.但是在这里似乎每个人都是社会主义好公民,)..黄渤在这段里想舒淇索吻..果断被拒绝了.在出海被浪冲回来后冲突达到高点.和张总谋划着什么.\n\n在晚上分食中,有人抱怨为啥什么都不做却可以分到食物,这时候已经分化出两个阶级了.王宝强和他身边的狗腿子.剩下的便是需要每天带着食物回来的劳动人民..冲突爆发,张总即主角不满当下没尊严的上下级关系.带着一群人去建立带有人类尊严的新世界.\n\n张总那么有底气是因为他发现了一艘颠倒的巨轮.这里有个BUG,剧中人物通过颠倒的楼梯走到船上的一层...或许是他们新弄了一个梯子吧..别在意,别在意\n\n{% asset_img 脑袋有问题.png 阿虚 %}\n\n巨轮上什么都有,杯碟,葡萄酒,以及渔网(一个邮轮干嘛有渔网啊!!!,别在意别在意),这时候岛上有了两个团体,一个王宝强带领着的第一代和张总坐拥游轮宝库的第二代.剧中展现了有渔网后生产力大幅提升的画面.\n\n在第一代和第二代接触后,张总表达了欢迎对面的人过来的意思,但是基于不知道什么的原因竟然有人依旧跟着王宝强(为啥?告诉我为啥?),张总作为拥有游轮宝库的人,表达了任何人都可以用手中的食物交换游轮上物件.并使用纸牌作为交易媒介,于是货币产生了.\n\n到这里感觉黄渤想表达很多东西,可是如果这方面如果更详细的表现我相信会更有意思.现代货币的抵押物,以及什么能代表他的价值,但是这里感觉黄渤一笔带过,就是为了之后张总的超发货币埋下伏笔,剧集中人发现扑克牌的货币和说好的数量不一样,,,拜托,超发最先体现的就是价值变化好吗,你们作为使用者这么后知后觉么.感觉如果黄渤想表达张总如何通过货币的发行权剥削所有人,那么通过设置一个使用货币的场景使用者发现货币的价值下降了来表达更好.而不是后来用为什么有四张红桃2表现出来.而且随着生产力的发展发行货币并没有什么错误啊,如果随着物质的增加而货币没有增加,那么单位货币代表的货物价值便增加了.这么就相当于拥有大量货币的人剥削着增长的生产率.这个话题拍一部电影都没问题.\n\n之后主演黄渤在不知道为什么在明显没有任何办法回去的情况下还强行离开第二代团队.而且离开团队后也没有任何离开小岛的行动,这一段非常无厘头,感觉明显为了冲突而冲突.期间不知道为什么展现了很奇怪的逻辑,比如对关心自己的女神发了一段脾气.\n\n对了,这里觉得黄渤主演的这个小人物追求女孩的行为非常危险,因为在之前和舒淇对话中舒淇表示并不知道对方喜欢自己,并说为什么不勇敢表达出来,在黄渤鼓起勇气表白后舒淇十动然拒.黄渤出演的小人物突然变得愤怒,似乎觉得对方愧对自己的真心和种种奉献.但是感觉这类人物会把自己对别人的奉献想得无比厚重,同时对方必须回敬.所以后面被拒绝后会愤怒,觉得对方亏待了自己.感觉显示中很多分手后报复的行为都和这种心理有关.往往追求得越痴情,报复也更加惨重.\n\n在之后兑奖期后黄渤彻底放弃了回去的念头,但是老天爷开了个玩笑,以天降许多鱼的方式给了他6000w,于是黄渤决定在这小岛上好好经营自己.他使用咸鱼兑换岛上不可再生的一切物品,感觉黄渤想涉及很多社会的自治和经济的一些东西,但是这些在剧集里仅仅一笔带过.最后也没见兑换东西的作用.到底还是黄渤想表达得太多太多.最后却什么也没展现\n\n在黄渤以信仰的方式取得地位后每个人都穿用床单制作的新衣服,感觉这似乎是想表达新的社会结构?,感觉像是日本60年代那段最左翼的时期,邪教和社会运动共同作用的结果,人们聚集在会社形式的村子里共同生活,组织生产.各种形式的社会实验.\n\n{% asset_img 宗教.jpg 宗教 %}\n\n接下来我感觉是剧情最密集的时刻,能看出许多有趣的话题但却翻篇太快,感觉像是15页的哲学史.在这后面里看到了黄渤想表达信仰聚集起来的组织结构,\t爱情与人性的抉择,拥有权力后与自己当初承诺的背离,特别是在最后发现现代社会并没有崩坏,相反每隔12天还有一艘游轮经过后.\n\n这里之前表现的仅仅是在荒岛上拥有地位发现可以回去现代社会,但是回去后自己还是那个小角色,每个人的地位又回去了. 似乎有不少电影都有的剧情,这里也没表现有什么方法可以让游轮发现荒岛上还有一群人的方法,仅仅告不告诉,后面的烧船又似乎是想表现另外一个事情,如果把剧情改成不是黄渤不想告诉,而是回去的方法是烧掉当前的游轮群众不愿意会不会更好?太多太多,感觉自己都混乱了.\n\n后面又不断表达这是梦境,这是梦境,又是一种表现手法?是黄渤想拍得太多还是仅仅我们观众多想了而已?\n\n{% asset_img 蜥蜴.jpg 蜥蜴 %}","slug":"一出好戏","published":1,"updated":"2018-08-25T16:48:23.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqg0007gvd9m89u49ux","content":"<p>今天去看了黄渤的《一出好戏》,起因还是纸巾说黄渤当上导演后就变成索吻狂魔, 剧中舒淇,张艺兴都被索吻了,只因张艺兴拍片经验不足而在银幕献出了初吻.[捂脸]</p>\n<img src=\"/2018/08/26/一出好戏/黄渤.gif\" title=\"初吻\">\n<p>感觉片中黄渤想说的很多,但是限于电影的篇幅没办法展开来,其实任何一个话题展开来都可以拍成一部电影.但是黄渤紧赶慢赶朝着他想表达的结局去了.</p>\n<p>剧情发生在一个荒岛上.一群人因为灾难困在了一个无人岛,接下来就是生存的问题,相信不少人都这么幻想过这么一个场景,所以每个人心中也都有一个答案,电影中的情节也更容易被人评判合不合 「常理」.我也不例外.</p>\n<p>面对一个荒岛求生问题,剧中人在一开始还保留着社会中人与人的地位关系,导游(王宝强)照顾着一大群人,而公司底层的保安被x总使唤着.直到有一天底层的人发现原来的社会回不去了,自然不满因为之前社会而形成的阶层关系,在剧里则是王宝强不满其他人不工作吃着他获取的食物和有的没的抱怨. 而保安也不满现在仍被使唤着.冲突便爆发了 .</p>\n<p>在避雨的洞穴里众人秉着有奶便是娘的朴素观念推举王宝强为众人的头, 带领着这群人活下去.在x总还碎嘴管理经验时王宝强道出他也有好几年的经验. 两年猴子三年熊. 退伍后在动物园里担任饲养员…于是王宝强在众人的强烈意愿下走上了管理的职位. 到这里自己也感觉合情合理,在极端的环境下自然是掌握更多资源的人统领着.现在有价值的自然是武力和资源, 这时候王宝强两项都有,他是退伍兵和懂得野外生存技巧.(虽然我觉得大活人怎么可能饿死…)</p>\n<p>之后王宝强用管理后的方法管理着人,每天规定带回来食物,空手而归就饿肚子(话说既然这样为什么还要找一个人领导呢,自己一个人也饿不着啊),但是黄渤因为中了彩票6000w有强烈回归社会的欲望…</p>\n<p>再一次冲突爆发是因为黄渤因为一次没带鱼回来然后王宝强杀鸡儆猴..(感觉这时候的冲突剧里演绎得很严重,但是每个人似乎却没什么反应…在我的设想里权利的争夺出几条人命是非常正常的事情.但是在这里似乎每个人都是社会主义好公民,)..黄渤在这段里想舒淇索吻..果断被拒绝了.在出海被浪冲回来后冲突达到高点.和张总谋划着什么.</p>\n<p>在晚上分食中,有人抱怨为啥什么都不做却可以分到食物,这时候已经分化出两个阶级了.王宝强和他身边的狗腿子.剩下的便是需要每天带着食物回来的劳动人民..冲突爆发,张总即主角不满当下没尊严的上下级关系.带着一群人去建立带有人类尊严的新世界.</p>\n<p>张总那么有底气是因为他发现了一艘颠倒的巨轮.这里有个BUG,剧中人物通过颠倒的楼梯走到船上的一层…或许是他们新弄了一个梯子吧..别在意,别在意</p>\n<img src=\"/2018/08/26/一出好戏/脑袋有问题.png\" title=\"阿虚\">\n<p>巨轮上什么都有,杯碟,葡萄酒,以及渔网(一个邮轮干嘛有渔网啊!!!,别在意别在意),这时候岛上有了两个团体,一个王宝强带领着的第一代和张总坐拥游轮宝库的第二代.剧中展现了有渔网后生产力大幅提升的画面.</p>\n<p>在第一代和第二代接触后,张总表达了欢迎对面的人过来的意思,但是基于不知道什么的原因竟然有人依旧跟着王宝强(为啥?告诉我为啥?),张总作为拥有游轮宝库的人,表达了任何人都可以用手中的食物交换游轮上物件.并使用纸牌作为交易媒介,于是货币产生了.</p>\n<p>到这里感觉黄渤想表达很多东西,可是如果这方面如果更详细的表现我相信会更有意思.现代货币的抵押物,以及什么能代表他的价值,但是这里感觉黄渤一笔带过,就是为了之后张总的超发货币埋下伏笔,剧集中人发现扑克牌的货币和说好的数量不一样,,,拜托,超发最先体现的就是价值变化好吗,你们作为使用者这么后知后觉么.感觉如果黄渤想表达张总如何通过货币的发行权剥削所有人,那么通过设置一个使用货币的场景使用者发现货币的价值下降了来表达更好.而不是后来用为什么有四张红桃2表现出来.而且随着生产力的发展发行货币并没有什么错误啊,如果随着物质的增加而货币没有增加,那么单位货币代表的货物价值便增加了.这么就相当于拥有大量货币的人剥削着增长的生产率.这个话题拍一部电影都没问题.</p>\n<p>之后主演黄渤在不知道为什么在明显没有任何办法回去的情况下还强行离开第二代团队.而且离开团队后也没有任何离开小岛的行动,这一段非常无厘头,感觉明显为了冲突而冲突.期间不知道为什么展现了很奇怪的逻辑,比如对关心自己的女神发了一段脾气.</p>\n<p>对了,这里觉得黄渤主演的这个小人物追求女孩的行为非常危险,因为在之前和舒淇对话中舒淇表示并不知道对方喜欢自己,并说为什么不勇敢表达出来,在黄渤鼓起勇气表白后舒淇十动然拒.黄渤出演的小人物突然变得愤怒,似乎觉得对方愧对自己的真心和种种奉献.但是感觉这类人物会把自己对别人的奉献想得无比厚重,同时对方必须回敬.所以后面被拒绝后会愤怒,觉得对方亏待了自己.感觉显示中很多分手后报复的行为都和这种心理有关.往往追求得越痴情,报复也更加惨重.</p>\n<p>在之后兑奖期后黄渤彻底放弃了回去的念头,但是老天爷开了个玩笑,以天降许多鱼的方式给了他6000w,于是黄渤决定在这小岛上好好经营自己.他使用咸鱼兑换岛上不可再生的一切物品,感觉黄渤想涉及很多社会的自治和经济的一些东西,但是这些在剧集里仅仅一笔带过.最后也没见兑换东西的作用.到底还是黄渤想表达得太多太多.最后却什么也没展现</p>\n<p>在黄渤以信仰的方式取得地位后每个人都穿用床单制作的新衣服,感觉这似乎是想表达新的社会结构?,感觉像是日本60年代那段最左翼的时期,邪教和社会运动共同作用的结果,人们聚集在会社形式的村子里共同生活,组织生产.各种形式的社会实验.</p>\n<img src=\"/2018/08/26/一出好戏/宗教.jpg\" title=\"宗教\">\n<p>接下来我感觉是剧情最密集的时刻,能看出许多有趣的话题但却翻篇太快,感觉像是15页的哲学史.在这后面里看到了黄渤想表达信仰聚集起来的组织结构,    爱情与人性的抉择,拥有权力后与自己当初承诺的背离,特别是在最后发现现代社会并没有崩坏,相反每隔12天还有一艘游轮经过后.</p>\n<p>这里之前表现的仅仅是在荒岛上拥有地位发现可以回去现代社会,但是回去后自己还是那个小角色,每个人的地位又回去了. 似乎有不少电影都有的剧情,这里也没表现有什么方法可以让游轮发现荒岛上还有一群人的方法,仅仅告不告诉,后面的烧船又似乎是想表现另外一个事情,如果把剧情改成不是黄渤不想告诉,而是回去的方法是烧掉当前的游轮群众不愿意会不会更好?太多太多,感觉自己都混乱了.</p>\n<p>后面又不断表达这是梦境,这是梦境,又是一种表现手法?是黄渤想拍得太多还是仅仅我们观众多想了而已?</p>\n<img src=\"/2018/08/26/一出好戏/蜥蜴.jpg\" title=\"蜥蜴\">","site":{"data":{}},"excerpt":"","more":"<p>今天去看了黄渤的《一出好戏》,起因还是纸巾说黄渤当上导演后就变成索吻狂魔, 剧中舒淇,张艺兴都被索吻了,只因张艺兴拍片经验不足而在银幕献出了初吻.[捂脸]</p>\n<img src=\"/2018/08/26/一出好戏/黄渤.gif\" title=\"初吻\">\n<p>感觉片中黄渤想说的很多,但是限于电影的篇幅没办法展开来,其实任何一个话题展开来都可以拍成一部电影.但是黄渤紧赶慢赶朝着他想表达的结局去了.</p>\n<p>剧情发生在一个荒岛上.一群人因为灾难困在了一个无人岛,接下来就是生存的问题,相信不少人都这么幻想过这么一个场景,所以每个人心中也都有一个答案,电影中的情节也更容易被人评判合不合 「常理」.我也不例外.</p>\n<p>面对一个荒岛求生问题,剧中人在一开始还保留着社会中人与人的地位关系,导游(王宝强)照顾着一大群人,而公司底层的保安被x总使唤着.直到有一天底层的人发现原来的社会回不去了,自然不满因为之前社会而形成的阶层关系,在剧里则是王宝强不满其他人不工作吃着他获取的食物和有的没的抱怨. 而保安也不满现在仍被使唤着.冲突便爆发了 .</p>\n<p>在避雨的洞穴里众人秉着有奶便是娘的朴素观念推举王宝强为众人的头, 带领着这群人活下去.在x总还碎嘴管理经验时王宝强道出他也有好几年的经验. 两年猴子三年熊. 退伍后在动物园里担任饲养员…于是王宝强在众人的强烈意愿下走上了管理的职位. 到这里自己也感觉合情合理,在极端的环境下自然是掌握更多资源的人统领着.现在有价值的自然是武力和资源, 这时候王宝强两项都有,他是退伍兵和懂得野外生存技巧.(虽然我觉得大活人怎么可能饿死…)</p>\n<p>之后王宝强用管理后的方法管理着人,每天规定带回来食物,空手而归就饿肚子(话说既然这样为什么还要找一个人领导呢,自己一个人也饿不着啊),但是黄渤因为中了彩票6000w有强烈回归社会的欲望…</p>\n<p>再一次冲突爆发是因为黄渤因为一次没带鱼回来然后王宝强杀鸡儆猴..(感觉这时候的冲突剧里演绎得很严重,但是每个人似乎却没什么反应…在我的设想里权利的争夺出几条人命是非常正常的事情.但是在这里似乎每个人都是社会主义好公民,)..黄渤在这段里想舒淇索吻..果断被拒绝了.在出海被浪冲回来后冲突达到高点.和张总谋划着什么.</p>\n<p>在晚上分食中,有人抱怨为啥什么都不做却可以分到食物,这时候已经分化出两个阶级了.王宝强和他身边的狗腿子.剩下的便是需要每天带着食物回来的劳动人民..冲突爆发,张总即主角不满当下没尊严的上下级关系.带着一群人去建立带有人类尊严的新世界.</p>\n<p>张总那么有底气是因为他发现了一艘颠倒的巨轮.这里有个BUG,剧中人物通过颠倒的楼梯走到船上的一层…或许是他们新弄了一个梯子吧..别在意,别在意</p>\n<img src=\"/2018/08/26/一出好戏/脑袋有问题.png\" title=\"阿虚\">\n<p>巨轮上什么都有,杯碟,葡萄酒,以及渔网(一个邮轮干嘛有渔网啊!!!,别在意别在意),这时候岛上有了两个团体,一个王宝强带领着的第一代和张总坐拥游轮宝库的第二代.剧中展现了有渔网后生产力大幅提升的画面.</p>\n<p>在第一代和第二代接触后,张总表达了欢迎对面的人过来的意思,但是基于不知道什么的原因竟然有人依旧跟着王宝强(为啥?告诉我为啥?),张总作为拥有游轮宝库的人,表达了任何人都可以用手中的食物交换游轮上物件.并使用纸牌作为交易媒介,于是货币产生了.</p>\n<p>到这里感觉黄渤想表达很多东西,可是如果这方面如果更详细的表现我相信会更有意思.现代货币的抵押物,以及什么能代表他的价值,但是这里感觉黄渤一笔带过,就是为了之后张总的超发货币埋下伏笔,剧集中人发现扑克牌的货币和说好的数量不一样,,,拜托,超发最先体现的就是价值变化好吗,你们作为使用者这么后知后觉么.感觉如果黄渤想表达张总如何通过货币的发行权剥削所有人,那么通过设置一个使用货币的场景使用者发现货币的价值下降了来表达更好.而不是后来用为什么有四张红桃2表现出来.而且随着生产力的发展发行货币并没有什么错误啊,如果随着物质的增加而货币没有增加,那么单位货币代表的货物价值便增加了.这么就相当于拥有大量货币的人剥削着增长的生产率.这个话题拍一部电影都没问题.</p>\n<p>之后主演黄渤在不知道为什么在明显没有任何办法回去的情况下还强行离开第二代团队.而且离开团队后也没有任何离开小岛的行动,这一段非常无厘头,感觉明显为了冲突而冲突.期间不知道为什么展现了很奇怪的逻辑,比如对关心自己的女神发了一段脾气.</p>\n<p>对了,这里觉得黄渤主演的这个小人物追求女孩的行为非常危险,因为在之前和舒淇对话中舒淇表示并不知道对方喜欢自己,并说为什么不勇敢表达出来,在黄渤鼓起勇气表白后舒淇十动然拒.黄渤出演的小人物突然变得愤怒,似乎觉得对方愧对自己的真心和种种奉献.但是感觉这类人物会把自己对别人的奉献想得无比厚重,同时对方必须回敬.所以后面被拒绝后会愤怒,觉得对方亏待了自己.感觉显示中很多分手后报复的行为都和这种心理有关.往往追求得越痴情,报复也更加惨重.</p>\n<p>在之后兑奖期后黄渤彻底放弃了回去的念头,但是老天爷开了个玩笑,以天降许多鱼的方式给了他6000w,于是黄渤决定在这小岛上好好经营自己.他使用咸鱼兑换岛上不可再生的一切物品,感觉黄渤想涉及很多社会的自治和经济的一些东西,但是这些在剧集里仅仅一笔带过.最后也没见兑换东西的作用.到底还是黄渤想表达得太多太多.最后却什么也没展现</p>\n<p>在黄渤以信仰的方式取得地位后每个人都穿用床单制作的新衣服,感觉这似乎是想表达新的社会结构?,感觉像是日本60年代那段最左翼的时期,邪教和社会运动共同作用的结果,人们聚集在会社形式的村子里共同生活,组织生产.各种形式的社会实验.</p>\n<img src=\"/2018/08/26/一出好戏/宗教.jpg\" title=\"宗教\">\n<p>接下来我感觉是剧情最密集的时刻,能看出许多有趣的话题但却翻篇太快,感觉像是15页的哲学史.在这后面里看到了黄渤想表达信仰聚集起来的组织结构,    爱情与人性的抉择,拥有权力后与自己当初承诺的背离,特别是在最后发现现代社会并没有崩坏,相反每隔12天还有一艘游轮经过后.</p>\n<p>这里之前表现的仅仅是在荒岛上拥有地位发现可以回去现代社会,但是回去后自己还是那个小角色,每个人的地位又回去了. 似乎有不少电影都有的剧情,这里也没表现有什么方法可以让游轮发现荒岛上还有一群人的方法,仅仅告不告诉,后面的烧船又似乎是想表现另外一个事情,如果把剧情改成不是黄渤不想告诉,而是回去的方法是烧掉当前的游轮群众不愿意会不会更好?太多太多,感觉自己都混乱了.</p>\n<p>后面又不断表达这是梦境,这是梦境,又是一种表现手法?是黄渤想拍得太多还是仅仅我们观众多想了而已?</p>\n<img src=\"/2018/08/26/一出好戏/蜥蜴.jpg\" title=\"蜥蜴\">"},{"title":"关于重装系统后的二三事","date":"2017-03-11T14:53:52.000Z","_content":"\n​\t话说我在看到 visual stuido 2017出来以后,就像下载安装试一下。 甚至于即使那些更新和我关系不大但是我还是想要更新。然后作死就开始了。\n\n​\tvisual stuido 很棒，新的安装界面，更快的安装速度。 作死的是我在安装完2017后就把2015卸载了。 MMP 的卸载了一个下午还没卸载好，我直接强制结束了。我打开2017，新建一个项目，添加一个cpp文件，编译运行，错误……\n\n​\t错误看不懂在说什么，2017又刚出来google什么的都找不到相关页面。估计是2015卸载顺便把什么东西一起卸载掉了。我期间重装了2015……一样出错。2017安装两次（2017安装真心块），都出错。\n\n​\t我绝望了。重装了系统。\n\n","source":"_posts/关于重装系统后的二三事.md","raw":"---\ntitle: 关于重装系统后的二三事\ndate: 2017-03-11 22:53:52\ntags: 碎碎念\n---\n\n​\t话说我在看到 visual stuido 2017出来以后,就像下载安装试一下。 甚至于即使那些更新和我关系不大但是我还是想要更新。然后作死就开始了。\n\n​\tvisual stuido 很棒，新的安装界面，更快的安装速度。 作死的是我在安装完2017后就把2015卸载了。 MMP 的卸载了一个下午还没卸载好，我直接强制结束了。我打开2017，新建一个项目，添加一个cpp文件，编译运行，错误……\n\n​\t错误看不懂在说什么，2017又刚出来google什么的都找不到相关页面。估计是2015卸载顺便把什么东西一起卸载掉了。我期间重装了2015……一样出错。2017安装两次（2017安装真心块），都出错。\n\n​\t我绝望了。重装了系统。\n\n","slug":"关于重装系统后的二三事","published":1,"updated":"2018-07-25T13:30:08.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqk000agvd93djs2453","content":"<p>​    话说我在看到 visual stuido 2017出来以后,就像下载安装试一下。 甚至于即使那些更新和我关系不大但是我还是想要更新。然后作死就开始了。</p>\n<p>​    visual stuido 很棒，新的安装界面，更快的安装速度。 作死的是我在安装完2017后就把2015卸载了。 MMP 的卸载了一个下午还没卸载好，我直接强制结束了。我打开2017，新建一个项目，添加一个cpp文件，编译运行，错误……</p>\n<p>​    错误看不懂在说什么，2017又刚出来google什么的都找不到相关页面。估计是2015卸载顺便把什么东西一起卸载掉了。我期间重装了2015……一样出错。2017安装两次（2017安装真心块），都出错。</p>\n<p>​    我绝望了。重装了系统。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    话说我在看到 visual stuido 2017出来以后,就像下载安装试一下。 甚至于即使那些更新和我关系不大但是我还是想要更新。然后作死就开始了。</p>\n<p>​    visual stuido 很棒，新的安装界面，更快的安装速度。 作死的是我在安装完2017后就把2015卸载了。 MMP 的卸载了一个下午还没卸载好，我直接强制结束了。我打开2017，新建一个项目，添加一个cpp文件，编译运行，错误……</p>\n<p>​    错误看不懂在说什么，2017又刚出来google什么的都找不到相关页面。估计是2015卸载顺便把什么东西一起卸载掉了。我期间重装了2015……一样出错。2017安装两次（2017安装真心块），都出错。</p>\n<p>​    我绝望了。重装了系统。</p>\n"},{"title":"多贝云的一次笔试","date":"2018-05-16T13:07:36.000Z","_content":"\n​\t在年级的就业实习群里看到了多贝云的招聘，就顺手投了一波简历，然后有个小哥哥打电话给我说是它们会在华科开宣讲会，顺带有笔试的那种，于是就从地大走到华科去参加宣讲会了。。华科真的蛮大的。\n\n​\t宣讲会是CTO来亲自给我们讲，感觉听不容易的。今天讲完晚上还得坐高铁赶到下一个城市。讲了多贝的做的一些事情，一些后台数据量，CTO希望一起共事的人的一些要求。我以为它们只是做在线教育的，但是CTO说是做在线教育的技术支持，也就是说提供一个平台，接入做在线教育的一些公司，为他们提供后面的网络等一些基础服务。有点像淘宝和上面的店家的区别。CTO提到的数据量也超级吓人的，说他们现在有1000多台服务器，每天产生150g的日志文件。那么多的服务器用阿里云之类的各种云？好像贵死吧。。？部署也是各种docker吧？加上微服务？当时听完这些数据第一感觉就是抱歉，我来错地方了。233\n\n​\t在宣讲会完之后就是笔试了，笔试一共是10道题和一道附加题，所有人都是同一套试题。限时是一个小时，不过大部分人都是30分钟左右就起身离开了吧。。弄得俺也心慌慌的，快到九点半的时候就交卷了，毕竟还得走回地大呢。题目有些记得不是那么清楚，但是尽量回忆吧。\n\n1.什么是死锁，怎么避免死锁\n\n​\t死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。死锁的预防可以使用银行家算法或者有序资源分配法。\n\n2.介绍一下堆和栈，有何区别\n\n​\t程序的栈区存放程序函数的参数值和局部变量值，由程序自动释放。堆区有程序员分配和释放。\n\n3.写出你认识的http methods，并说明使用场景\n\n​\tget，请求一个数据\n\n​\tpost，向服务器提交一个数据\n\n​\tput，向服务器提交一个数据更新它\n\n​\tdelete，删除指定的资源\n\n​\tpatch，对资源的部分修改\n\n4.编写一个函数，给定一个无序数组和一个数字，返回数字在数组中的下标\n\n​\t遍历，搜索到就返回下标\n\n5.要求如上题，但是数组为有序的\n\n​\t二分查找\n\n6.有一个10G的文本文件，但是机器内存只有1G，要求根据字母排序，写出排序的思路和方法。\n\n​\t我写的是根据首字母分为26个部分，倘若每个字母部分仍大于1g则使用第二个字母划分。这样保证每部分小于1g的容量再排序，排序完成后根据26个字母的顺序组合。\n\n7.若一条线路的TCP丢包率为10%，问其改进的方法？(这题我不会，也花时间)\n\n8.你了解什么设计模式，简单介绍一下\n\n​\t单例模式，类负责创建自己的对象，保证只有单个对象被创建。\n\n​\t工厂模式，使用一个类统一创建其他类的对象。\n\n​\t装饰器模式，允许向现有的对象添加新的功能同时又不改变其结构。\n\n9.你了解过什么语言，各有什么优势和缺点。\n\n​\tC++，静态语言，快，没有自动的内存回收，同时允许程序员申请内存空间和得自己处理内存释放。是优点同时也是缺点。\n\n​\tPython，动态语言。运行速度相交其他语言会慢，但是有各种语法糖能够快捷开发。\n\n​\tJava，第一影响就是万物介对象，各种库，冗长的代码，各种设计模式。\n\n附加题是设计一个长连接转换短连接的后端。有五个问题。\n\n怎么一一对应，\n\n​\t通过通过0~9, a~z, A~Z表示已给62进制的数，通过自增来给每一个长连接分配一个数字，数字即为短连接。\n\n怎么避免碰撞，\n\n数据库怎么设计，\n\n​\tid ShortUrl LongUrl CREATETIME UPDATETIME\n\n有什么改进的方法，\n\n​\t使用redis数据库缓存热点数据。\n\n分布式的话会有什么问题\n\n​\t数据库之间的同步？\n\n当时看到周围人都走了看时间也差不多了就急急忙忙的交了。九点20出来到宿舍正好10点钟。不知怎么的一股惆怅。","source":"_posts/多贝云的一次笔试.md","raw":"---\ntitle: 多贝云的一次笔试\ndate: 2018-05-16 21:07:36\ntags: 笔试\n---\n\n​\t在年级的就业实习群里看到了多贝云的招聘，就顺手投了一波简历，然后有个小哥哥打电话给我说是它们会在华科开宣讲会，顺带有笔试的那种，于是就从地大走到华科去参加宣讲会了。。华科真的蛮大的。\n\n​\t宣讲会是CTO来亲自给我们讲，感觉听不容易的。今天讲完晚上还得坐高铁赶到下一个城市。讲了多贝的做的一些事情，一些后台数据量，CTO希望一起共事的人的一些要求。我以为它们只是做在线教育的，但是CTO说是做在线教育的技术支持，也就是说提供一个平台，接入做在线教育的一些公司，为他们提供后面的网络等一些基础服务。有点像淘宝和上面的店家的区别。CTO提到的数据量也超级吓人的，说他们现在有1000多台服务器，每天产生150g的日志文件。那么多的服务器用阿里云之类的各种云？好像贵死吧。。？部署也是各种docker吧？加上微服务？当时听完这些数据第一感觉就是抱歉，我来错地方了。233\n\n​\t在宣讲会完之后就是笔试了，笔试一共是10道题和一道附加题，所有人都是同一套试题。限时是一个小时，不过大部分人都是30分钟左右就起身离开了吧。。弄得俺也心慌慌的，快到九点半的时候就交卷了，毕竟还得走回地大呢。题目有些记得不是那么清楚，但是尽量回忆吧。\n\n1.什么是死锁，怎么避免死锁\n\n​\t死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。死锁的预防可以使用银行家算法或者有序资源分配法。\n\n2.介绍一下堆和栈，有何区别\n\n​\t程序的栈区存放程序函数的参数值和局部变量值，由程序自动释放。堆区有程序员分配和释放。\n\n3.写出你认识的http methods，并说明使用场景\n\n​\tget，请求一个数据\n\n​\tpost，向服务器提交一个数据\n\n​\tput，向服务器提交一个数据更新它\n\n​\tdelete，删除指定的资源\n\n​\tpatch，对资源的部分修改\n\n4.编写一个函数，给定一个无序数组和一个数字，返回数字在数组中的下标\n\n​\t遍历，搜索到就返回下标\n\n5.要求如上题，但是数组为有序的\n\n​\t二分查找\n\n6.有一个10G的文本文件，但是机器内存只有1G，要求根据字母排序，写出排序的思路和方法。\n\n​\t我写的是根据首字母分为26个部分，倘若每个字母部分仍大于1g则使用第二个字母划分。这样保证每部分小于1g的容量再排序，排序完成后根据26个字母的顺序组合。\n\n7.若一条线路的TCP丢包率为10%，问其改进的方法？(这题我不会，也花时间)\n\n8.你了解什么设计模式，简单介绍一下\n\n​\t单例模式，类负责创建自己的对象，保证只有单个对象被创建。\n\n​\t工厂模式，使用一个类统一创建其他类的对象。\n\n​\t装饰器模式，允许向现有的对象添加新的功能同时又不改变其结构。\n\n9.你了解过什么语言，各有什么优势和缺点。\n\n​\tC++，静态语言，快，没有自动的内存回收，同时允许程序员申请内存空间和得自己处理内存释放。是优点同时也是缺点。\n\n​\tPython，动态语言。运行速度相交其他语言会慢，但是有各种语法糖能够快捷开发。\n\n​\tJava，第一影响就是万物介对象，各种库，冗长的代码，各种设计模式。\n\n附加题是设计一个长连接转换短连接的后端。有五个问题。\n\n怎么一一对应，\n\n​\t通过通过0~9, a~z, A~Z表示已给62进制的数，通过自增来给每一个长连接分配一个数字，数字即为短连接。\n\n怎么避免碰撞，\n\n数据库怎么设计，\n\n​\tid ShortUrl LongUrl CREATETIME UPDATETIME\n\n有什么改进的方法，\n\n​\t使用redis数据库缓存热点数据。\n\n分布式的话会有什么问题\n\n​\t数据库之间的同步？\n\n当时看到周围人都走了看时间也差不多了就急急忙忙的交了。九点20出来到宿舍正好10点钟。不知怎么的一股惆怅。","slug":"多贝云的一次笔试","published":1,"updated":"2018-07-25T13:30:08.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqs000bgvd9brs1q49q","content":"<p>​    在年级的就业实习群里看到了多贝云的招聘，就顺手投了一波简历，然后有个小哥哥打电话给我说是它们会在华科开宣讲会，顺带有笔试的那种，于是就从地大走到华科去参加宣讲会了。。华科真的蛮大的。</p>\n<p>​    宣讲会是CTO来亲自给我们讲，感觉听不容易的。今天讲完晚上还得坐高铁赶到下一个城市。讲了多贝的做的一些事情，一些后台数据量，CTO希望一起共事的人的一些要求。我以为它们只是做在线教育的，但是CTO说是做在线教育的技术支持，也就是说提供一个平台，接入做在线教育的一些公司，为他们提供后面的网络等一些基础服务。有点像淘宝和上面的店家的区别。CTO提到的数据量也超级吓人的，说他们现在有1000多台服务器，每天产生150g的日志文件。那么多的服务器用阿里云之类的各种云？好像贵死吧。。？部署也是各种docker吧？加上微服务？当时听完这些数据第一感觉就是抱歉，我来错地方了。233</p>\n<p>​    在宣讲会完之后就是笔试了，笔试一共是10道题和一道附加题，所有人都是同一套试题。限时是一个小时，不过大部分人都是30分钟左右就起身离开了吧。。弄得俺也心慌慌的，快到九点半的时候就交卷了，毕竟还得走回地大呢。题目有些记得不是那么清楚，但是尽量回忆吧。</p>\n<p>1.什么是死锁，怎么避免死锁</p>\n<p>​    死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。死锁的预防可以使用银行家算法或者有序资源分配法。</p>\n<p>2.介绍一下堆和栈，有何区别</p>\n<p>​    程序的栈区存放程序函数的参数值和局部变量值，由程序自动释放。堆区有程序员分配和释放。</p>\n<p>3.写出你认识的http methods，并说明使用场景</p>\n<p>​    get，请求一个数据</p>\n<p>​    post，向服务器提交一个数据</p>\n<p>​    put，向服务器提交一个数据更新它</p>\n<p>​    delete，删除指定的资源</p>\n<p>​    patch，对资源的部分修改</p>\n<p>4.编写一个函数，给定一个无序数组和一个数字，返回数字在数组中的下标</p>\n<p>​    遍历，搜索到就返回下标</p>\n<p>5.要求如上题，但是数组为有序的</p>\n<p>​    二分查找</p>\n<p>6.有一个10G的文本文件，但是机器内存只有1G，要求根据字母排序，写出排序的思路和方法。</p>\n<p>​    我写的是根据首字母分为26个部分，倘若每个字母部分仍大于1g则使用第二个字母划分。这样保证每部分小于1g的容量再排序，排序完成后根据26个字母的顺序组合。</p>\n<p>7.若一条线路的TCP丢包率为10%，问其改进的方法？(这题我不会，也花时间)</p>\n<p>8.你了解什么设计模式，简单介绍一下</p>\n<p>​    单例模式，类负责创建自己的对象，保证只有单个对象被创建。</p>\n<p>​    工厂模式，使用一个类统一创建其他类的对象。</p>\n<p>​    装饰器模式，允许向现有的对象添加新的功能同时又不改变其结构。</p>\n<p>9.你了解过什么语言，各有什么优势和缺点。</p>\n<p>​    C++，静态语言，快，没有自动的内存回收，同时允许程序员申请内存空间和得自己处理内存释放。是优点同时也是缺点。</p>\n<p>​    Python，动态语言。运行速度相交其他语言会慢，但是有各种语法糖能够快捷开发。</p>\n<p>​    Java，第一影响就是万物介对象，各种库，冗长的代码，各种设计模式。</p>\n<p>附加题是设计一个长连接转换短连接的后端。有五个问题。</p>\n<p>怎么一一对应，</p>\n<p>​    通过通过0~9, a~z, A~Z表示已给62进制的数，通过自增来给每一个长连接分配一个数字，数字即为短连接。</p>\n<p>怎么避免碰撞，</p>\n<p>数据库怎么设计，</p>\n<p>​    id ShortUrl LongUrl CREATETIME UPDATETIME</p>\n<p>有什么改进的方法，</p>\n<p>​    使用redis数据库缓存热点数据。</p>\n<p>分布式的话会有什么问题</p>\n<p>​    数据库之间的同步？</p>\n<p>当时看到周围人都走了看时间也差不多了就急急忙忙的交了。九点20出来到宿舍正好10点钟。不知怎么的一股惆怅。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在年级的就业实习群里看到了多贝云的招聘，就顺手投了一波简历，然后有个小哥哥打电话给我说是它们会在华科开宣讲会，顺带有笔试的那种，于是就从地大走到华科去参加宣讲会了。。华科真的蛮大的。</p>\n<p>​    宣讲会是CTO来亲自给我们讲，感觉听不容易的。今天讲完晚上还得坐高铁赶到下一个城市。讲了多贝的做的一些事情，一些后台数据量，CTO希望一起共事的人的一些要求。我以为它们只是做在线教育的，但是CTO说是做在线教育的技术支持，也就是说提供一个平台，接入做在线教育的一些公司，为他们提供后面的网络等一些基础服务。有点像淘宝和上面的店家的区别。CTO提到的数据量也超级吓人的，说他们现在有1000多台服务器，每天产生150g的日志文件。那么多的服务器用阿里云之类的各种云？好像贵死吧。。？部署也是各种docker吧？加上微服务？当时听完这些数据第一感觉就是抱歉，我来错地方了。233</p>\n<p>​    在宣讲会完之后就是笔试了，笔试一共是10道题和一道附加题，所有人都是同一套试题。限时是一个小时，不过大部分人都是30分钟左右就起身离开了吧。。弄得俺也心慌慌的，快到九点半的时候就交卷了，毕竟还得走回地大呢。题目有些记得不是那么清楚，但是尽量回忆吧。</p>\n<p>1.什么是死锁，怎么避免死锁</p>\n<p>​    死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。死锁的预防可以使用银行家算法或者有序资源分配法。</p>\n<p>2.介绍一下堆和栈，有何区别</p>\n<p>​    程序的栈区存放程序函数的参数值和局部变量值，由程序自动释放。堆区有程序员分配和释放。</p>\n<p>3.写出你认识的http methods，并说明使用场景</p>\n<p>​    get，请求一个数据</p>\n<p>​    post，向服务器提交一个数据</p>\n<p>​    put，向服务器提交一个数据更新它</p>\n<p>​    delete，删除指定的资源</p>\n<p>​    patch，对资源的部分修改</p>\n<p>4.编写一个函数，给定一个无序数组和一个数字，返回数字在数组中的下标</p>\n<p>​    遍历，搜索到就返回下标</p>\n<p>5.要求如上题，但是数组为有序的</p>\n<p>​    二分查找</p>\n<p>6.有一个10G的文本文件，但是机器内存只有1G，要求根据字母排序，写出排序的思路和方法。</p>\n<p>​    我写的是根据首字母分为26个部分，倘若每个字母部分仍大于1g则使用第二个字母划分。这样保证每部分小于1g的容量再排序，排序完成后根据26个字母的顺序组合。</p>\n<p>7.若一条线路的TCP丢包率为10%，问其改进的方法？(这题我不会，也花时间)</p>\n<p>8.你了解什么设计模式，简单介绍一下</p>\n<p>​    单例模式，类负责创建自己的对象，保证只有单个对象被创建。</p>\n<p>​    工厂模式，使用一个类统一创建其他类的对象。</p>\n<p>​    装饰器模式，允许向现有的对象添加新的功能同时又不改变其结构。</p>\n<p>9.你了解过什么语言，各有什么优势和缺点。</p>\n<p>​    C++，静态语言，快，没有自动的内存回收，同时允许程序员申请内存空间和得自己处理内存释放。是优点同时也是缺点。</p>\n<p>​    Python，动态语言。运行速度相交其他语言会慢，但是有各种语法糖能够快捷开发。</p>\n<p>​    Java，第一影响就是万物介对象，各种库，冗长的代码，各种设计模式。</p>\n<p>附加题是设计一个长连接转换短连接的后端。有五个问题。</p>\n<p>怎么一一对应，</p>\n<p>​    通过通过0~9, a~z, A~Z表示已给62进制的数，通过自增来给每一个长连接分配一个数字，数字即为短连接。</p>\n<p>怎么避免碰撞，</p>\n<p>数据库怎么设计，</p>\n<p>​    id ShortUrl LongUrl CREATETIME UPDATETIME</p>\n<p>有什么改进的方法，</p>\n<p>​    使用redis数据库缓存热点数据。</p>\n<p>分布式的话会有什么问题</p>\n<p>​    数据库之间的同步？</p>\n<p>当时看到周围人都走了看时间也差不多了就急急忙忙的交了。九点20出来到宿舍正好10点钟。不知怎么的一股惆怅。</p>\n"},{"title":"压制组在做什么","date":"2018-07-25T13:33:51.000Z","_content":"\n**当压制组在压制视频时,他们做了什么**\n\n​\t当我们打算压缩一个文件的时候,通常可考虑的有无损压缩和有损压缩两种方法.无损压缩类似于我们通常的打包一个压缩包,我们压缩一个文件解压后和我们原来的文件时一模一样的.这是无损压缩.与此同时,还有有损压缩.即压缩后的文件解压后与源文件对比是不同的,这之间损失了一部分的信息.\n\n**为什么我们需要有损压缩?**\n\n​\t因为类似图片和音频之类的数据对我们而言损失一部分信息是可接受的,人类可能察觉不到这之间丢失的信息,舍去这部分对人类观感影响不大的信息对压缩率提高却是巨大的.节省下来的储存容量是可观的.\n\n**所以现在的视频编码器在怎么做?**\n\n​\t视频就是一连串的图片顺序播放,所以我们可以使用图片中有损压缩的方法DCT(离散余弦变换)之后进行量化编码.这便是帧内编码.类似于把图片分割成一块一块的小格子,之后进行量化,这部分允许你选择保存信息的大小容量,若你选择的大小不够,那么就会丢失一些信息.我们在这里进行DCT是因为一张图片中的信息若把它分割成小块,那么有些信息是可复用的.所以一张纯色的图片经过压缩后会比复杂的图片小\n\n​\t既然视频是一连串的图片,图片与图片之间相似的话能不能够复用一部分信息呢?答案是可以的.并且现在的编码器已经实现了.这是帧间编码.现在的视频编码器会把一连串的图片分成I,P以及B帧,其中I帧为独立帧,P是会向前参考,只记录于之不同的信息,而B帧会前后都参考并记录不同的信息.这样达到压缩的目的.\n\n**为什么压制组要压缩视频,原来的视频不就经过编码吗**?**\n\n​\t因为目前以BD为载体的高清视频原编码使用的标准可能还会有H.262,即使上了H.264也会兼容一部分上古机器编码参数不会开得太高.经过压制后的视频文件大小更容易通过网络传播.\n\n**所以目前压制组做了什么你还是没说啊?**\n\n​\t压制组的目标很明确,尽可能保证高观感的前提下压缩视频.所有做的所有事情都尽可能的以这前提为目标.\n\n​\t压制组会选择合适的视频编码参数进行视频编码,尽可能在小体积的前提下获得高质量的观感,同时由于日本特别奇怪的制作流程和不负责任的视频处理,一些DVD或者蓝光的影碟抓取的源会有视频转制过程中的错误处理.造成不必要的视频质量损失.所以压制组会在可推断处理错误的情况下使用滤镜正确还原原有的影片信息.\n\n**压制组是怎么推断出这是制作方的错误处理过程呢?你怎么知道这不是艺术效果.**\n\n​\t有些视频是瑕疵是在编码过程中产生的,这类很容易判断.类似因为量化精度不足产生的banding,\n\n{% asset_img image-3.png banding %}\n\n抑或是采用固定码率这类不能够适应影片的码率变化产生的马赛克,当然,某些影片的马赛克是人工添加的,那就真的是艺术效果,压制也没办法给你“去马”. \n\n{% asset_img image-2.png block %}\n\n(现代编码器会在亮度低的区域偏向于降低码率,因为人眼对暗部并不敏感,所以也容易在暗部出现马赛克)\n\n​\t这都是在编码过程中引入的瑕疵,在使用新的编码标准或者提高编码参数且使用适当的滤镜能够有效提高观感.\n\n​\t有些瑕疵的引入纯粹就是制作方不负责任,在制作过程中引入的.比如在隔行扫描的视频上直接当成逐行扫描的视频处理,造成两张不同时域的帧出现在同一时间里.这种怪异的东西根本就不是啥艺术效果.\t\n\n{% asset_img image-1.png 交错 %} \n\n​\t还有在隔行扫描的视频上当成逐行扫描来处理,造成的缟缟(一种在隔行扫描的视频里使用拉伸算法产生的画面效果)\n\n {% asset_img image.png 缟缟 %} \n\n​\t所以压制组会使用各种方法去除这种因为处理错误造成的视频瑕疵.当然制作过程的错误大部分是历史原因(大雾——),现在的BD原盘也少了些DVD时代的IVTC错误.不像上古时代某些EP大神的rip可遇不可求.各种视频网站的兴起也使得压制组这一名词快要被人遗忘.同时也希望各个制作方别再用心做剧情,用脚出碟片.让人能够放心的收藏塑料盘.\n\n\n\n\n\n\n\n\n\n\n\n参考:https://vcb-s.com/archives/4738","source":"_posts/压制组在做什么.md","raw":"---\ntitle: 压制组在做什么\ndate: 2018-07-25 21:33:51\ntags: 压制 视频\n---\n\n**当压制组在压制视频时,他们做了什么**\n\n​\t当我们打算压缩一个文件的时候,通常可考虑的有无损压缩和有损压缩两种方法.无损压缩类似于我们通常的打包一个压缩包,我们压缩一个文件解压后和我们原来的文件时一模一样的.这是无损压缩.与此同时,还有有损压缩.即压缩后的文件解压后与源文件对比是不同的,这之间损失了一部分的信息.\n\n**为什么我们需要有损压缩?**\n\n​\t因为类似图片和音频之类的数据对我们而言损失一部分信息是可接受的,人类可能察觉不到这之间丢失的信息,舍去这部分对人类观感影响不大的信息对压缩率提高却是巨大的.节省下来的储存容量是可观的.\n\n**所以现在的视频编码器在怎么做?**\n\n​\t视频就是一连串的图片顺序播放,所以我们可以使用图片中有损压缩的方法DCT(离散余弦变换)之后进行量化编码.这便是帧内编码.类似于把图片分割成一块一块的小格子,之后进行量化,这部分允许你选择保存信息的大小容量,若你选择的大小不够,那么就会丢失一些信息.我们在这里进行DCT是因为一张图片中的信息若把它分割成小块,那么有些信息是可复用的.所以一张纯色的图片经过压缩后会比复杂的图片小\n\n​\t既然视频是一连串的图片,图片与图片之间相似的话能不能够复用一部分信息呢?答案是可以的.并且现在的编码器已经实现了.这是帧间编码.现在的视频编码器会把一连串的图片分成I,P以及B帧,其中I帧为独立帧,P是会向前参考,只记录于之不同的信息,而B帧会前后都参考并记录不同的信息.这样达到压缩的目的.\n\n**为什么压制组要压缩视频,原来的视频不就经过编码吗**?**\n\n​\t因为目前以BD为载体的高清视频原编码使用的标准可能还会有H.262,即使上了H.264也会兼容一部分上古机器编码参数不会开得太高.经过压制后的视频文件大小更容易通过网络传播.\n\n**所以目前压制组做了什么你还是没说啊?**\n\n​\t压制组的目标很明确,尽可能保证高观感的前提下压缩视频.所有做的所有事情都尽可能的以这前提为目标.\n\n​\t压制组会选择合适的视频编码参数进行视频编码,尽可能在小体积的前提下获得高质量的观感,同时由于日本特别奇怪的制作流程和不负责任的视频处理,一些DVD或者蓝光的影碟抓取的源会有视频转制过程中的错误处理.造成不必要的视频质量损失.所以压制组会在可推断处理错误的情况下使用滤镜正确还原原有的影片信息.\n\n**压制组是怎么推断出这是制作方的错误处理过程呢?你怎么知道这不是艺术效果.**\n\n​\t有些视频是瑕疵是在编码过程中产生的,这类很容易判断.类似因为量化精度不足产生的banding,\n\n{% asset_img image-3.png banding %}\n\n抑或是采用固定码率这类不能够适应影片的码率变化产生的马赛克,当然,某些影片的马赛克是人工添加的,那就真的是艺术效果,压制也没办法给你“去马”. \n\n{% asset_img image-2.png block %}\n\n(现代编码器会在亮度低的区域偏向于降低码率,因为人眼对暗部并不敏感,所以也容易在暗部出现马赛克)\n\n​\t这都是在编码过程中引入的瑕疵,在使用新的编码标准或者提高编码参数且使用适当的滤镜能够有效提高观感.\n\n​\t有些瑕疵的引入纯粹就是制作方不负责任,在制作过程中引入的.比如在隔行扫描的视频上直接当成逐行扫描的视频处理,造成两张不同时域的帧出现在同一时间里.这种怪异的东西根本就不是啥艺术效果.\t\n\n{% asset_img image-1.png 交错 %} \n\n​\t还有在隔行扫描的视频上当成逐行扫描来处理,造成的缟缟(一种在隔行扫描的视频里使用拉伸算法产生的画面效果)\n\n {% asset_img image.png 缟缟 %} \n\n​\t所以压制组会使用各种方法去除这种因为处理错误造成的视频瑕疵.当然制作过程的错误大部分是历史原因(大雾——),现在的BD原盘也少了些DVD时代的IVTC错误.不像上古时代某些EP大神的rip可遇不可求.各种视频网站的兴起也使得压制组这一名词快要被人遗忘.同时也希望各个制作方别再用心做剧情,用脚出碟片.让人能够放心的收藏塑料盘.\n\n\n\n\n\n\n\n\n\n\n\n参考:https://vcb-s.com/archives/4738","slug":"压制组在做什么","published":1,"updated":"2018-07-26T05:10:20.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqt000dgvd9tpzyu7yt","content":"<p><strong>当压制组在压制视频时,他们做了什么</strong></p>\n<p>​    当我们打算压缩一个文件的时候,通常可考虑的有无损压缩和有损压缩两种方法.无损压缩类似于我们通常的打包一个压缩包,我们压缩一个文件解压后和我们原来的文件时一模一样的.这是无损压缩.与此同时,还有有损压缩.即压缩后的文件解压后与源文件对比是不同的,这之间损失了一部分的信息.</p>\n<p><strong>为什么我们需要有损压缩?</strong></p>\n<p>​    因为类似图片和音频之类的数据对我们而言损失一部分信息是可接受的,人类可能察觉不到这之间丢失的信息,舍去这部分对人类观感影响不大的信息对压缩率提高却是巨大的.节省下来的储存容量是可观的.</p>\n<p><strong>所以现在的视频编码器在怎么做?</strong></p>\n<p>​    视频就是一连串的图片顺序播放,所以我们可以使用图片中有损压缩的方法DCT(离散余弦变换)之后进行量化编码.这便是帧内编码.类似于把图片分割成一块一块的小格子,之后进行量化,这部分允许你选择保存信息的大小容量,若你选择的大小不够,那么就会丢失一些信息.我们在这里进行DCT是因为一张图片中的信息若把它分割成小块,那么有些信息是可复用的.所以一张纯色的图片经过压缩后会比复杂的图片小</p>\n<p>​    既然视频是一连串的图片,图片与图片之间相似的话能不能够复用一部分信息呢?答案是可以的.并且现在的编码器已经实现了.这是帧间编码.现在的视频编码器会把一连串的图片分成I,P以及B帧,其中I帧为独立帧,P是会向前参考,只记录于之不同的信息,而B帧会前后都参考并记录不同的信息.这样达到压缩的目的.</p>\n<p><strong>为什么压制组要压缩视频,原来的视频不就经过编码吗</strong>?**</p>\n<p>​    因为目前以BD为载体的高清视频原编码使用的标准可能还会有H.262,即使上了H.264也会兼容一部分上古机器编码参数不会开得太高.经过压制后的视频文件大小更容易通过网络传播.</p>\n<p><strong>所以目前压制组做了什么你还是没说啊?</strong></p>\n<p>​    压制组的目标很明确,尽可能保证高观感的前提下压缩视频.所有做的所有事情都尽可能的以这前提为目标.</p>\n<p>​    压制组会选择合适的视频编码参数进行视频编码,尽可能在小体积的前提下获得高质量的观感,同时由于日本特别奇怪的制作流程和不负责任的视频处理,一些DVD或者蓝光的影碟抓取的源会有视频转制过程中的错误处理.造成不必要的视频质量损失.所以压制组会在可推断处理错误的情况下使用滤镜正确还原原有的影片信息.</p>\n<p><strong>压制组是怎么推断出这是制作方的错误处理过程呢?你怎么知道这不是艺术效果.</strong></p>\n<p>​    有些视频是瑕疵是在编码过程中产生的,这类很容易判断.类似因为量化精度不足产生的banding,</p>\n<img src=\"/2018/07/25/压制组在做什么/image-3.png\" title=\"banding\">\n<p>抑或是采用固定码率这类不能够适应影片的码率变化产生的马赛克,当然,某些影片的马赛克是人工添加的,那就真的是艺术效果,压制也没办法给你“去马”. </p>\n<img src=\"/2018/07/25/压制组在做什么/image-2.png\" title=\"block\">\n<p>(现代编码器会在亮度低的区域偏向于降低码率,因为人眼对暗部并不敏感,所以也容易在暗部出现马赛克)</p>\n<p>​    这都是在编码过程中引入的瑕疵,在使用新的编码标准或者提高编码参数且使用适当的滤镜能够有效提高观感.</p>\n<p>​    有些瑕疵的引入纯粹就是制作方不负责任,在制作过程中引入的.比如在隔行扫描的视频上直接当成逐行扫描的视频处理,造成两张不同时域的帧出现在同一时间里.这种怪异的东西根本就不是啥艺术效果.    </p>\n<img src=\"/2018/07/25/压制组在做什么/image-1.png\" title=\"交错\"> \n<p>​    还有在隔行扫描的视频上当成逐行扫描来处理,造成的缟缟(一种在隔行扫描的视频里使用拉伸算法产生的画面效果)</p>\n <img src=\"/2018/07/25/压制组在做什么/image.png\" title=\"缟缟\"> \n<p>​    所以压制组会使用各种方法去除这种因为处理错误造成的视频瑕疵.当然制作过程的错误大部分是历史原因(大雾——),现在的BD原盘也少了些DVD时代的IVTC错误.不像上古时代某些EP大神的rip可遇不可求.各种视频网站的兴起也使得压制组这一名词快要被人遗忘.同时也希望各个制作方别再用心做剧情,用脚出碟片.让人能够放心的收藏塑料盘.</p>\n<p>参考:<a href=\"https://vcb-s.com/archives/4738\" target=\"_blank\" rel=\"noopener\">https://vcb-s.com/archives/4738</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>当压制组在压制视频时,他们做了什么</strong></p>\n<p>​    当我们打算压缩一个文件的时候,通常可考虑的有无损压缩和有损压缩两种方法.无损压缩类似于我们通常的打包一个压缩包,我们压缩一个文件解压后和我们原来的文件时一模一样的.这是无损压缩.与此同时,还有有损压缩.即压缩后的文件解压后与源文件对比是不同的,这之间损失了一部分的信息.</p>\n<p><strong>为什么我们需要有损压缩?</strong></p>\n<p>​    因为类似图片和音频之类的数据对我们而言损失一部分信息是可接受的,人类可能察觉不到这之间丢失的信息,舍去这部分对人类观感影响不大的信息对压缩率提高却是巨大的.节省下来的储存容量是可观的.</p>\n<p><strong>所以现在的视频编码器在怎么做?</strong></p>\n<p>​    视频就是一连串的图片顺序播放,所以我们可以使用图片中有损压缩的方法DCT(离散余弦变换)之后进行量化编码.这便是帧内编码.类似于把图片分割成一块一块的小格子,之后进行量化,这部分允许你选择保存信息的大小容量,若你选择的大小不够,那么就会丢失一些信息.我们在这里进行DCT是因为一张图片中的信息若把它分割成小块,那么有些信息是可复用的.所以一张纯色的图片经过压缩后会比复杂的图片小</p>\n<p>​    既然视频是一连串的图片,图片与图片之间相似的话能不能够复用一部分信息呢?答案是可以的.并且现在的编码器已经实现了.这是帧间编码.现在的视频编码器会把一连串的图片分成I,P以及B帧,其中I帧为独立帧,P是会向前参考,只记录于之不同的信息,而B帧会前后都参考并记录不同的信息.这样达到压缩的目的.</p>\n<p><strong>为什么压制组要压缩视频,原来的视频不就经过编码吗</strong>?**</p>\n<p>​    因为目前以BD为载体的高清视频原编码使用的标准可能还会有H.262,即使上了H.264也会兼容一部分上古机器编码参数不会开得太高.经过压制后的视频文件大小更容易通过网络传播.</p>\n<p><strong>所以目前压制组做了什么你还是没说啊?</strong></p>\n<p>​    压制组的目标很明确,尽可能保证高观感的前提下压缩视频.所有做的所有事情都尽可能的以这前提为目标.</p>\n<p>​    压制组会选择合适的视频编码参数进行视频编码,尽可能在小体积的前提下获得高质量的观感,同时由于日本特别奇怪的制作流程和不负责任的视频处理,一些DVD或者蓝光的影碟抓取的源会有视频转制过程中的错误处理.造成不必要的视频质量损失.所以压制组会在可推断处理错误的情况下使用滤镜正确还原原有的影片信息.</p>\n<p><strong>压制组是怎么推断出这是制作方的错误处理过程呢?你怎么知道这不是艺术效果.</strong></p>\n<p>​    有些视频是瑕疵是在编码过程中产生的,这类很容易判断.类似因为量化精度不足产生的banding,</p>\n<img src=\"/2018/07/25/压制组在做什么/image-3.png\" title=\"banding\">\n<p>抑或是采用固定码率这类不能够适应影片的码率变化产生的马赛克,当然,某些影片的马赛克是人工添加的,那就真的是艺术效果,压制也没办法给你“去马”. </p>\n<img src=\"/2018/07/25/压制组在做什么/image-2.png\" title=\"block\">\n<p>(现代编码器会在亮度低的区域偏向于降低码率,因为人眼对暗部并不敏感,所以也容易在暗部出现马赛克)</p>\n<p>​    这都是在编码过程中引入的瑕疵,在使用新的编码标准或者提高编码参数且使用适当的滤镜能够有效提高观感.</p>\n<p>​    有些瑕疵的引入纯粹就是制作方不负责任,在制作过程中引入的.比如在隔行扫描的视频上直接当成逐行扫描的视频处理,造成两张不同时域的帧出现在同一时间里.这种怪异的东西根本就不是啥艺术效果.    </p>\n<img src=\"/2018/07/25/压制组在做什么/image-1.png\" title=\"交错\"> \n<p>​    还有在隔行扫描的视频上当成逐行扫描来处理,造成的缟缟(一种在隔行扫描的视频里使用拉伸算法产生的画面效果)</p>\n <img src=\"/2018/07/25/压制组在做什么/image.png\" title=\"缟缟\"> \n<p>​    所以压制组会使用各种方法去除这种因为处理错误造成的视频瑕疵.当然制作过程的错误大部分是历史原因(大雾——),现在的BD原盘也少了些DVD时代的IVTC错误.不像上古时代某些EP大神的rip可遇不可求.各种视频网站的兴起也使得压制组这一名词快要被人遗忘.同时也希望各个制作方别再用心做剧情,用脚出碟片.让人能够放心的收藏塑料盘.</p>\n<p>参考:<a href=\"https://vcb-s.com/archives/4738\" target=\"_blank\" rel=\"noopener\">https://vcb-s.com/archives/4738</a></p>\n"},{"title":"最近关于大规模下架vpn业务一事有感","date":"2017-07-20T12:39:30.000Z","_content":"\n起初是工信部发文[**工信部信管函[2017]32号**](http://www.miit.gov.cn/n1146295/n1652858/n1652930/n3757020/c5471946/content.html)说规范VPN市场得审批合格的企业才能售卖VPN。这直接就打死了把VPN用于翻墙目的商家(国内卖翻墙VPN的感觉还是在偷偷摸摸的于是这里就不用企业来称呼了。。。感觉很尴尬)。\n\n然后真正爆发的是国内的一个服务商[Green](https://www.greenjsq.me/)宣布六月二十二号宣布将于七月一日将终止服务，相继有几家提供VPN的服务商也宣布终止服务，这时候我们终于意识我们所做的不过是透过那一只手的手缝偷偷看这大千世界，当他不开心稍微握紧一些我们终会和大部分人一样。\n\nVPN业务的受尽让如今受众更广大的ShadowSocks群众开始慌张了，我们做的事不也一样啊！开始有一些消息传出说防火长城能够识别ss协议，将于明年开始部署等等的消息。[SSR](https://github.com/breakwa11/shadowsocks-rss)起初的维护者[breakwa11](https://github.com/breakwa11)也说深圳能够精确识别并开始请人喝茶了（不过似乎很多人并不喜欢breakwa11因为她开始并不遵守GPL协议，[有些人](https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168)声讨她开源后面她生气了开源就维护了。。。不过毕竟人家还是经济学半路出家的女程序员，很是惭愧）。\n\n在看breakwa11之前关于墙主动探测SS服务器的[讨论](https://github.com/breakwa11/shadowsocks-rss/issues/38)中breakwa11说当前的SS可能会被墙主动探测，并提出了改进。并且着实给出了一个python实现的ss服务检测脚本！！！（事实证明确实可以。。。）\n\n然而试试证明正态分布在哪都是起作用的，那个讨论帖一开始就没往技术方面讨论。。。而是牵扯到breakwa11的代码水平(但是这是个开源平台啊，自己fork过去重写啊，为啥抱怨啊？)和GPL协议。。。在吵吵嚷嚷了一阵后几位对密码学了解的人参与到了讨论中才开始了实现方式的讨论。不过途中也有一些人乱入，不知道为什么牵扯到对加密过程安全性的打包票证明的人，但是这并不是针对加密的攻击而是服务器行为的检测啊？反正后面就是很尴尬的场面，自己努力画的图证明自己论点还成为自己没读题并且没实现过过程的深刻证据。。。最后也还是承认自己理解有问题，还是很和谐的。\n\n不过说起来ss的原作者[clowwindy](https://github.com/clowwindy)似乎就是想让大家自己写自己的加密解密，但是他低估了人的惰性。。。现在他的[推](https://twitter.com/clowwindy)上还能看到一些关于人性哲学的感慨啥的。\n\n\n\n\n\n","source":"_posts/最近关于大规模下架vpn业务一事有感.md","raw":"---\ntitle: 最近关于大规模下架vpn业务一事有感\ndate: 2017-07-20 20:39:30\ntags: 翻墙\n---\n\n起初是工信部发文[**工信部信管函[2017]32号**](http://www.miit.gov.cn/n1146295/n1652858/n1652930/n3757020/c5471946/content.html)说规范VPN市场得审批合格的企业才能售卖VPN。这直接就打死了把VPN用于翻墙目的商家(国内卖翻墙VPN的感觉还是在偷偷摸摸的于是这里就不用企业来称呼了。。。感觉很尴尬)。\n\n然后真正爆发的是国内的一个服务商[Green](https://www.greenjsq.me/)宣布六月二十二号宣布将于七月一日将终止服务，相继有几家提供VPN的服务商也宣布终止服务，这时候我们终于意识我们所做的不过是透过那一只手的手缝偷偷看这大千世界，当他不开心稍微握紧一些我们终会和大部分人一样。\n\nVPN业务的受尽让如今受众更广大的ShadowSocks群众开始慌张了，我们做的事不也一样啊！开始有一些消息传出说防火长城能够识别ss协议，将于明年开始部署等等的消息。[SSR](https://github.com/breakwa11/shadowsocks-rss)起初的维护者[breakwa11](https://github.com/breakwa11)也说深圳能够精确识别并开始请人喝茶了（不过似乎很多人并不喜欢breakwa11因为她开始并不遵守GPL协议，[有些人](https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168)声讨她开源后面她生气了开源就维护了。。。不过毕竟人家还是经济学半路出家的女程序员，很是惭愧）。\n\n在看breakwa11之前关于墙主动探测SS服务器的[讨论](https://github.com/breakwa11/shadowsocks-rss/issues/38)中breakwa11说当前的SS可能会被墙主动探测，并提出了改进。并且着实给出了一个python实现的ss服务检测脚本！！！（事实证明确实可以。。。）\n\n然而试试证明正态分布在哪都是起作用的，那个讨论帖一开始就没往技术方面讨论。。。而是牵扯到breakwa11的代码水平(但是这是个开源平台啊，自己fork过去重写啊，为啥抱怨啊？)和GPL协议。。。在吵吵嚷嚷了一阵后几位对密码学了解的人参与到了讨论中才开始了实现方式的讨论。不过途中也有一些人乱入，不知道为什么牵扯到对加密过程安全性的打包票证明的人，但是这并不是针对加密的攻击而是服务器行为的检测啊？反正后面就是很尴尬的场面，自己努力画的图证明自己论点还成为自己没读题并且没实现过过程的深刻证据。。。最后也还是承认自己理解有问题，还是很和谐的。\n\n不过说起来ss的原作者[clowwindy](https://github.com/clowwindy)似乎就是想让大家自己写自己的加密解密，但是他低估了人的惰性。。。现在他的[推](https://twitter.com/clowwindy)上还能看到一些关于人性哲学的感慨啥的。\n\n\n\n\n\n","slug":"最近关于大规模下架vpn业务一事有感","published":1,"updated":"2018-07-25T13:30:08.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqw000fgvd9neo81x0e","content":"<p>起初是工信部发文<a href=\"http://www.miit.gov.cn/n1146295/n1652858/n1652930/n3757020/c5471946/content.html\" target=\"_blank\" rel=\"noopener\"><strong>工信部信管函[2017]32号</strong></a>说规范VPN市场得审批合格的企业才能售卖VPN。这直接就打死了把VPN用于翻墙目的商家(国内卖翻墙VPN的感觉还是在偷偷摸摸的于是这里就不用企业来称呼了。。。感觉很尴尬)。</p>\n<p>然后真正爆发的是国内的一个服务商<a href=\"https://www.greenjsq.me/\" target=\"_blank\" rel=\"noopener\">Green</a>宣布六月二十二号宣布将于七月一日将终止服务，相继有几家提供VPN的服务商也宣布终止服务，这时候我们终于意识我们所做的不过是透过那一只手的手缝偷偷看这大千世界，当他不开心稍微握紧一些我们终会和大部分人一样。</p>\n<p>VPN业务的受尽让如今受众更广大的ShadowSocks群众开始慌张了，我们做的事不也一样啊！开始有一些消息传出说防火长城能够识别ss协议，将于明年开始部署等等的消息。<a href=\"https://github.com/breakwa11/shadowsocks-rss\" target=\"_blank\" rel=\"noopener\">SSR</a>起初的维护者<a href=\"https://github.com/breakwa11\" target=\"_blank\" rel=\"noopener\">breakwa11</a>也说深圳能够精确识别并开始请人喝茶了（不过似乎很多人并不喜欢breakwa11因为她开始并不遵守GPL协议，<a href=\"https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168\" target=\"_blank\" rel=\"noopener\">有些人</a>声讨她开源后面她生气了开源就维护了。。。不过毕竟人家还是经济学半路出家的女程序员，很是惭愧）。</p>\n<p>在看breakwa11之前关于墙主动探测SS服务器的<a href=\"https://github.com/breakwa11/shadowsocks-rss/issues/38\" target=\"_blank\" rel=\"noopener\">讨论</a>中breakwa11说当前的SS可能会被墙主动探测，并提出了改进。并且着实给出了一个python实现的ss服务检测脚本！！！（事实证明确实可以。。。）</p>\n<p>然而试试证明正态分布在哪都是起作用的，那个讨论帖一开始就没往技术方面讨论。。。而是牵扯到breakwa11的代码水平(但是这是个开源平台啊，自己fork过去重写啊，为啥抱怨啊？)和GPL协议。。。在吵吵嚷嚷了一阵后几位对密码学了解的人参与到了讨论中才开始了实现方式的讨论。不过途中也有一些人乱入，不知道为什么牵扯到对加密过程安全性的打包票证明的人，但是这并不是针对加密的攻击而是服务器行为的检测啊？反正后面就是很尴尬的场面，自己努力画的图证明自己论点还成为自己没读题并且没实现过过程的深刻证据。。。最后也还是承认自己理解有问题，还是很和谐的。</p>\n<p>不过说起来ss的原作者<a href=\"https://github.com/clowwindy\" target=\"_blank\" rel=\"noopener\">clowwindy</a>似乎就是想让大家自己写自己的加密解密，但是他低估了人的惰性。。。现在他的<a href=\"https://twitter.com/clowwindy\" target=\"_blank\" rel=\"noopener\">推</a>上还能看到一些关于人性哲学的感慨啥的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>起初是工信部发文<a href=\"http://www.miit.gov.cn/n1146295/n1652858/n1652930/n3757020/c5471946/content.html\" target=\"_blank\" rel=\"noopener\"><strong>工信部信管函[2017]32号</strong></a>说规范VPN市场得审批合格的企业才能售卖VPN。这直接就打死了把VPN用于翻墙目的商家(国内卖翻墙VPN的感觉还是在偷偷摸摸的于是这里就不用企业来称呼了。。。感觉很尴尬)。</p>\n<p>然后真正爆发的是国内的一个服务商<a href=\"https://www.greenjsq.me/\" target=\"_blank\" rel=\"noopener\">Green</a>宣布六月二十二号宣布将于七月一日将终止服务，相继有几家提供VPN的服务商也宣布终止服务，这时候我们终于意识我们所做的不过是透过那一只手的手缝偷偷看这大千世界，当他不开心稍微握紧一些我们终会和大部分人一样。</p>\n<p>VPN业务的受尽让如今受众更广大的ShadowSocks群众开始慌张了，我们做的事不也一样啊！开始有一些消息传出说防火长城能够识别ss协议，将于明年开始部署等等的消息。<a href=\"https://github.com/breakwa11/shadowsocks-rss\" target=\"_blank\" rel=\"noopener\">SSR</a>起初的维护者<a href=\"https://github.com/breakwa11\" target=\"_blank\" rel=\"noopener\">breakwa11</a>也说深圳能够精确识别并开始请人喝茶了（不过似乎很多人并不喜欢breakwa11因为她开始并不遵守GPL协议，<a href=\"https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168\" target=\"_blank\" rel=\"noopener\">有些人</a>声讨她开源后面她生气了开源就维护了。。。不过毕竟人家还是经济学半路出家的女程序员，很是惭愧）。</p>\n<p>在看breakwa11之前关于墙主动探测SS服务器的<a href=\"https://github.com/breakwa11/shadowsocks-rss/issues/38\" target=\"_blank\" rel=\"noopener\">讨论</a>中breakwa11说当前的SS可能会被墙主动探测，并提出了改进。并且着实给出了一个python实现的ss服务检测脚本！！！（事实证明确实可以。。。）</p>\n<p>然而试试证明正态分布在哪都是起作用的，那个讨论帖一开始就没往技术方面讨论。。。而是牵扯到breakwa11的代码水平(但是这是个开源平台啊，自己fork过去重写啊，为啥抱怨啊？)和GPL协议。。。在吵吵嚷嚷了一阵后几位对密码学了解的人参与到了讨论中才开始了实现方式的讨论。不过途中也有一些人乱入，不知道为什么牵扯到对加密过程安全性的打包票证明的人，但是这并不是针对加密的攻击而是服务器行为的检测啊？反正后面就是很尴尬的场面，自己努力画的图证明自己论点还成为自己没读题并且没实现过过程的深刻证据。。。最后也还是承认自己理解有问题，还是很和谐的。</p>\n<p>不过说起来ss的原作者<a href=\"https://github.com/clowwindy\" target=\"_blank\" rel=\"noopener\">clowwindy</a>似乎就是想让大家自己写自己的加密解密，但是他低估了人的惰性。。。现在他的<a href=\"https://twitter.com/clowwindy\" target=\"_blank\" rel=\"noopener\">推</a>上还能看到一些关于人性哲学的感慨啥的。</p>\n"},{"title":"援力满满交易所的自动许愿","date":"2018-05-28T16:08:03.000Z","_content":"\n​\t前几天在逛[V2EX](https://www.v2ex.com)的时候发现一个[帖子](https://www.v2ex.com/t/457999),是一个二次元虚拟人物交易所的引流贴，因为自己简历上也是类似的项目所以超激动的点进去了。发现是一个差不多10年的程序员新开了一个项目也是做ACGN交易所，在寻找一起玩的玩家。点进去后发现这个项目早在8年前就有人构思过并实现了，并且站长凭借当初的交易所项目拿到了进入IT行业的敲门砖。（怎么感觉很眼熟的样子。。。）\n\n​\t帖子里还提到了更早以前就由类似的玩法不过是好莱坞明星的[虚拟交易市场](https://www.hsx.com/)。这个新的项目使用 VUE+ELE+RAILS+SIDKIQ 写的（话说我觉得RAILS的官方网站响应超级快。。）。也提到了台湾也有个ACGN交易所。顺带吐槽了那个类似90年代的界面。感觉台湾人确实在一些网页界面上莫名的遵循古制。对，说的就是PTT。\n\n​\t援力满满这个网站的玩法和ACGN不太一样，现在还是测试阶段，站长给了每个人每个股1000的原始股做测试。看了看网站界面，比ACGN-STOCK好多了，但是股票不多，也没看到可以提交股票申请上市的选项。\n\n{% asset_img index.png 首页 %}\n\n​\t这个网站代币的获得方式目前只有 “许愿” ，许愿会随机的给予一定的代币或者股票。通过这样放出代币活跃市场。但是许愿并不是没有代价的。如果没有代价就会有人无限制的点许愿了不是。许愿需要本地计算机提供工作量证明（LOVE_POW），方式大概是和现在的区块链一样。目前网站要求的工作量证明使用的算法是SHA512。\n\n{% asset_img stock.png 动漫人物界面 %}\n\n​\t这时候坏想法就出来了，网页上的许愿次数只有一次和十次的选项。作为一名合格的计算机学生这种重复性的工作肯定不能接受啊。于是想着怎么用脚本来刷\"许愿\"\n\n​\t首先通过CHROME元素查看许愿给服务器发送了些什么数据，通过Network栏看到点击许愿后的这段时间里有5个请求。其中一个名为wishs的POST请求发送的数据是许愿的请求。其他的都是一些股票数据的更新。\n\n{% asset_img Network.png Network%}\n\n​\t其中数据部分发送了\n\n```\ncheer_word:\"TEST\"\ncode: \"ERIRI\"\nlove_power:63895713284\n```\n\n​\t其中cheer_word应该是是许愿时候那段可以自定义的文字，默认是“我永远喜欢泽村·斯宾塞·英梨梨”。code应该是动漫任务的代码，关联你对那个人物许愿。其中love_power应该就是我们关键的工作量证明。这个love_power是本地JavaScript计算出来的。通过这几个关键的字段发送到服务器验证是否通过然后给账户添加代币或者是股票。这时候得弄清楚其中的ove_power是怎么被计算出来的。\n\n​\t好消息是JavaScript这种脚本语言是保留在计算机本地直接可以查看的。坏消息是为了便与传输JavaScript一般会在发布的时候加混淆。\n\n​\t通过Chrome的Sources栏查看网站附带的几个JS，发现其中一个名为app的最长。于是试着搜索了一下（虽然这里说说很简单，实际上这里看了好久找了好久才找到的。可能也是我菜吧）\n\n{% asset_img Sources.png Sources%}\n\n​\t发现了其中工作量证明的部分代码。其实我不是很懂这里的部分是在做什么，但是里面的部分差不多可以猜到。\n\no是取unix时间，精确到分钟。（毕竟网络这部分有延迟，本地和服务器不一致计算出来的就不对了）\n\nI是去股票的代码，估计就是ERIRI\n\nr是那段可以自定义的祈祷词。\n\ns是一个随机的数，范围是0-99999999999\n\nc是r + s + o + i\n\n然后对c进行sha512运算，正则判断是否有连续的四个0.\n\n​\t在尝试理解love_power的由来以后尝试在Python里吧这个过程实现一遍\n\n```python\n    unixtime = int(time.mktime(time.strptime(time.strftime(\"%Y-%m-%d %H:%M:00\", time.localtime()), '%Y-%m-%d %H:%M:%S')))\n    stockcode = 'ERIRI'\n    cheerWord = 'TEST'\n    s = random.randint(0,99999999999)\n    c = \"{}{}{}{}\".format(cheerWord, s, unixtime, stockcode).encode()\n    res = hashlib.sha512(c).hexdigest()\n    while re.search(r'0{4}$', res) is  None:\n        unixtime = int(\n            time.mktime(time.strptime(time.strftime(\"%Y-%m-%d %H:%M:00\", \t\t        time.localtime()), '%Y-%m-%d %H:%M:%S')))\n        s = random.randint(0, 99999999999)\n        c = \"{}{}{}{}\".format(cheerWord, s, unixtime, stockcode).encode()\n        res = hashlib.sha512(c).hexdigest()\n```\n\n在发送到服务器后返回的response也验证了我的猜想，证明我这工作量证明猜想是正确的。\n\n```json\n{\"success\":true,\"type\":\"coin\",\"amount\":608}\n<_sre.SRE_Match object; span=(124, 128), match='0000'> 92230011940 b'TEST922300119401527526500ERIRI'\n1527526500\n```\n\n\n\n有没有优化的空间呢？\n\n可能有的。因为unix时间取值进度是分钟，所以我们在计算完一个love_power后是可以在该分钟内重复发送的。\n\n但是如果今后服务器添加了已经验证过的love_power不能再验证就失效了。不过今后再说吧。\n\n\n\n事后发现今天下午就已经有大佬用脚本刷了百万代币，果然我还是太菜了。\n\n{% asset_img 死熊猫.gif 死熊猫 %}","source":"_posts/援力满满交易所的自动许愿.md","raw":"---\ntitle: 援力满满交易所的自动许愿\ndate: 2018-05-29 00:08:03\ntags: [Python,ACG，脚本]\n---\n\n​\t前几天在逛[V2EX](https://www.v2ex.com)的时候发现一个[帖子](https://www.v2ex.com/t/457999),是一个二次元虚拟人物交易所的引流贴，因为自己简历上也是类似的项目所以超激动的点进去了。发现是一个差不多10年的程序员新开了一个项目也是做ACGN交易所，在寻找一起玩的玩家。点进去后发现这个项目早在8年前就有人构思过并实现了，并且站长凭借当初的交易所项目拿到了进入IT行业的敲门砖。（怎么感觉很眼熟的样子。。。）\n\n​\t帖子里还提到了更早以前就由类似的玩法不过是好莱坞明星的[虚拟交易市场](https://www.hsx.com/)。这个新的项目使用 VUE+ELE+RAILS+SIDKIQ 写的（话说我觉得RAILS的官方网站响应超级快。。）。也提到了台湾也有个ACGN交易所。顺带吐槽了那个类似90年代的界面。感觉台湾人确实在一些网页界面上莫名的遵循古制。对，说的就是PTT。\n\n​\t援力满满这个网站的玩法和ACGN不太一样，现在还是测试阶段，站长给了每个人每个股1000的原始股做测试。看了看网站界面，比ACGN-STOCK好多了，但是股票不多，也没看到可以提交股票申请上市的选项。\n\n{% asset_img index.png 首页 %}\n\n​\t这个网站代币的获得方式目前只有 “许愿” ，许愿会随机的给予一定的代币或者股票。通过这样放出代币活跃市场。但是许愿并不是没有代价的。如果没有代价就会有人无限制的点许愿了不是。许愿需要本地计算机提供工作量证明（LOVE_POW），方式大概是和现在的区块链一样。目前网站要求的工作量证明使用的算法是SHA512。\n\n{% asset_img stock.png 动漫人物界面 %}\n\n​\t这时候坏想法就出来了，网页上的许愿次数只有一次和十次的选项。作为一名合格的计算机学生这种重复性的工作肯定不能接受啊。于是想着怎么用脚本来刷\"许愿\"\n\n​\t首先通过CHROME元素查看许愿给服务器发送了些什么数据，通过Network栏看到点击许愿后的这段时间里有5个请求。其中一个名为wishs的POST请求发送的数据是许愿的请求。其他的都是一些股票数据的更新。\n\n{% asset_img Network.png Network%}\n\n​\t其中数据部分发送了\n\n```\ncheer_word:\"TEST\"\ncode: \"ERIRI\"\nlove_power:63895713284\n```\n\n​\t其中cheer_word应该是是许愿时候那段可以自定义的文字，默认是“我永远喜欢泽村·斯宾塞·英梨梨”。code应该是动漫任务的代码，关联你对那个人物许愿。其中love_power应该就是我们关键的工作量证明。这个love_power是本地JavaScript计算出来的。通过这几个关键的字段发送到服务器验证是否通过然后给账户添加代币或者是股票。这时候得弄清楚其中的ove_power是怎么被计算出来的。\n\n​\t好消息是JavaScript这种脚本语言是保留在计算机本地直接可以查看的。坏消息是为了便与传输JavaScript一般会在发布的时候加混淆。\n\n​\t通过Chrome的Sources栏查看网站附带的几个JS，发现其中一个名为app的最长。于是试着搜索了一下（虽然这里说说很简单，实际上这里看了好久找了好久才找到的。可能也是我菜吧）\n\n{% asset_img Sources.png Sources%}\n\n​\t发现了其中工作量证明的部分代码。其实我不是很懂这里的部分是在做什么，但是里面的部分差不多可以猜到。\n\no是取unix时间，精确到分钟。（毕竟网络这部分有延迟，本地和服务器不一致计算出来的就不对了）\n\nI是去股票的代码，估计就是ERIRI\n\nr是那段可以自定义的祈祷词。\n\ns是一个随机的数，范围是0-99999999999\n\nc是r + s + o + i\n\n然后对c进行sha512运算，正则判断是否有连续的四个0.\n\n​\t在尝试理解love_power的由来以后尝试在Python里吧这个过程实现一遍\n\n```python\n    unixtime = int(time.mktime(time.strptime(time.strftime(\"%Y-%m-%d %H:%M:00\", time.localtime()), '%Y-%m-%d %H:%M:%S')))\n    stockcode = 'ERIRI'\n    cheerWord = 'TEST'\n    s = random.randint(0,99999999999)\n    c = \"{}{}{}{}\".format(cheerWord, s, unixtime, stockcode).encode()\n    res = hashlib.sha512(c).hexdigest()\n    while re.search(r'0{4}$', res) is  None:\n        unixtime = int(\n            time.mktime(time.strptime(time.strftime(\"%Y-%m-%d %H:%M:00\", \t\t        time.localtime()), '%Y-%m-%d %H:%M:%S')))\n        s = random.randint(0, 99999999999)\n        c = \"{}{}{}{}\".format(cheerWord, s, unixtime, stockcode).encode()\n        res = hashlib.sha512(c).hexdigest()\n```\n\n在发送到服务器后返回的response也验证了我的猜想，证明我这工作量证明猜想是正确的。\n\n```json\n{\"success\":true,\"type\":\"coin\",\"amount\":608}\n<_sre.SRE_Match object; span=(124, 128), match='0000'> 92230011940 b'TEST922300119401527526500ERIRI'\n1527526500\n```\n\n\n\n有没有优化的空间呢？\n\n可能有的。因为unix时间取值进度是分钟，所以我们在计算完一个love_power后是可以在该分钟内重复发送的。\n\n但是如果今后服务器添加了已经验证过的love_power不能再验证就失效了。不过今后再说吧。\n\n\n\n事后发现今天下午就已经有大佬用脚本刷了百万代币，果然我还是太菜了。\n\n{% asset_img 死熊猫.gif 死熊猫 %}","slug":"援力满满交易所的自动许愿","published":1,"updated":"2018-07-25T13:30:08.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknqz000hgvd9trsd8ym9","content":"<p>​    前几天在逛<a href=\"https://www.v2ex.com\" target=\"_blank\" rel=\"noopener\">V2EX</a>的时候发现一个<a href=\"https://www.v2ex.com/t/457999\" target=\"_blank\" rel=\"noopener\">帖子</a>,是一个二次元虚拟人物交易所的引流贴，因为自己简历上也是类似的项目所以超激动的点进去了。发现是一个差不多10年的程序员新开了一个项目也是做ACGN交易所，在寻找一起玩的玩家。点进去后发现这个项目早在8年前就有人构思过并实现了，并且站长凭借当初的交易所项目拿到了进入IT行业的敲门砖。（怎么感觉很眼熟的样子。。。）</p>\n<p>​    帖子里还提到了更早以前就由类似的玩法不过是好莱坞明星的<a href=\"https://www.hsx.com/\" target=\"_blank\" rel=\"noopener\">虚拟交易市场</a>。这个新的项目使用 VUE+ELE+RAILS+SIDKIQ 写的（话说我觉得RAILS的官方网站响应超级快。。）。也提到了台湾也有个ACGN交易所。顺带吐槽了那个类似90年代的界面。感觉台湾人确实在一些网页界面上莫名的遵循古制。对，说的就是PTT。</p>\n<p>​    援力满满这个网站的玩法和ACGN不太一样，现在还是测试阶段，站长给了每个人每个股1000的原始股做测试。看了看网站界面，比ACGN-STOCK好多了，但是股票不多，也没看到可以提交股票申请上市的选项。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/index.png\" title=\"首页\">\n<p>​    这个网站代币的获得方式目前只有 “许愿” ，许愿会随机的给予一定的代币或者股票。通过这样放出代币活跃市场。但是许愿并不是没有代价的。如果没有代价就会有人无限制的点许愿了不是。许愿需要本地计算机提供工作量证明（LOVE_POW），方式大概是和现在的区块链一样。目前网站要求的工作量证明使用的算法是SHA512。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/stock.png\" title=\"动漫人物界面\">\n<p>​    这时候坏想法就出来了，网页上的许愿次数只有一次和十次的选项。作为一名合格的计算机学生这种重复性的工作肯定不能接受啊。于是想着怎么用脚本来刷”许愿”</p>\n<p>​    首先通过CHROME元素查看许愿给服务器发送了些什么数据，通过Network栏看到点击许愿后的这段时间里有5个请求。其中一个名为wishs的POST请求发送的数据是许愿的请求。其他的都是一些股票数据的更新。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/Network.png\" title=\"Network\">\n<p>​    其中数据部分发送了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cheer_word:&quot;TEST&quot;</span><br><span class=\"line\">code: &quot;ERIRI&quot;</span><br><span class=\"line\">love_power:63895713284</span><br></pre></td></tr></table></figure>\n<p>​    其中cheer_word应该是是许愿时候那段可以自定义的文字，默认是“我永远喜欢泽村·斯宾塞·英梨梨”。code应该是动漫任务的代码，关联你对那个人物许愿。其中love_power应该就是我们关键的工作量证明。这个love_power是本地JavaScript计算出来的。通过这几个关键的字段发送到服务器验证是否通过然后给账户添加代币或者是股票。这时候得弄清楚其中的ove_power是怎么被计算出来的。</p>\n<p>​    好消息是JavaScript这种脚本语言是保留在计算机本地直接可以查看的。坏消息是为了便与传输JavaScript一般会在发布的时候加混淆。</p>\n<p>​    通过Chrome的Sources栏查看网站附带的几个JS，发现其中一个名为app的最长。于是试着搜索了一下（虽然这里说说很简单，实际上这里看了好久找了好久才找到的。可能也是我菜吧）</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/Sources.png\" title=\"Sources\">\n<p>​    发现了其中工作量证明的部分代码。其实我不是很懂这里的部分是在做什么，但是里面的部分差不多可以猜到。</p>\n<p>o是取unix时间，精确到分钟。（毕竟网络这部分有延迟，本地和服务器不一致计算出来的就不对了）</p>\n<p>I是去股票的代码，估计就是ERIRI</p>\n<p>r是那段可以自定义的祈祷词。</p>\n<p>s是一个随机的数，范围是0-99999999999</p>\n<p>c是r + s + o + i</p>\n<p>然后对c进行sha512运算，正则判断是否有连续的四个0.</p>\n<p>​    在尝试理解love_power的由来以后尝试在Python里吧这个过程实现一遍</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unixtime = int(time.mktime(time.strptime(time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:00\"</span>, time.localtime()), <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class=\"line\">stockcode = <span class=\"string\">'ERIRI'</span></span><br><span class=\"line\">cheerWord = <span class=\"string\">'TEST'</span></span><br><span class=\"line\">s = random.randint(<span class=\"number\">0</span>,<span class=\"number\">99999999999</span>)</span><br><span class=\"line\">c = <span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(cheerWord, s, unixtime, stockcode).encode()</span><br><span class=\"line\">res = hashlib.sha512(c).hexdigest()</span><br><span class=\"line\"><span class=\"keyword\">while</span> re.search(<span class=\"string\">r'0&#123;4&#125;$'</span>, res) <span class=\"keyword\">is</span>  <span class=\"keyword\">None</span>:</span><br><span class=\"line\">    unixtime = int(</span><br><span class=\"line\">        time.mktime(time.strptime(time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:00\"</span>, \t\t        time.localtime()), <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class=\"line\">    s = random.randint(<span class=\"number\">0</span>, <span class=\"number\">99999999999</span>)</span><br><span class=\"line\">    c = <span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(cheerWord, s, unixtime, stockcode).encode()</span><br><span class=\"line\">    res = hashlib.sha512(c).hexdigest()</span><br></pre></td></tr></table></figure>\n<p>在发送到服务器后返回的response也验证了我的猜想，证明我这工作量证明猜想是正确的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"success\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"coin\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">608</span>&#125;</span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(124, 128), match='0000'&gt; 92230011940 b'TEST922300119401527526500ERIRI'</span><br><span class=\"line\"><span class=\"number\">1527526500</span></span><br></pre></td></tr></table></figure>\n<p>有没有优化的空间呢？</p>\n<p>可能有的。因为unix时间取值进度是分钟，所以我们在计算完一个love_power后是可以在该分钟内重复发送的。</p>\n<p>但是如果今后服务器添加了已经验证过的love_power不能再验证就失效了。不过今后再说吧。</p>\n<p>事后发现今天下午就已经有大佬用脚本刷了百万代币，果然我还是太菜了。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/死熊猫.gif\" title=\"死熊猫\">","site":{"data":{}},"excerpt":"","more":"<p>​    前几天在逛<a href=\"https://www.v2ex.com\" target=\"_blank\" rel=\"noopener\">V2EX</a>的时候发现一个<a href=\"https://www.v2ex.com/t/457999\" target=\"_blank\" rel=\"noopener\">帖子</a>,是一个二次元虚拟人物交易所的引流贴，因为自己简历上也是类似的项目所以超激动的点进去了。发现是一个差不多10年的程序员新开了一个项目也是做ACGN交易所，在寻找一起玩的玩家。点进去后发现这个项目早在8年前就有人构思过并实现了，并且站长凭借当初的交易所项目拿到了进入IT行业的敲门砖。（怎么感觉很眼熟的样子。。。）</p>\n<p>​    帖子里还提到了更早以前就由类似的玩法不过是好莱坞明星的<a href=\"https://www.hsx.com/\" target=\"_blank\" rel=\"noopener\">虚拟交易市场</a>。这个新的项目使用 VUE+ELE+RAILS+SIDKIQ 写的（话说我觉得RAILS的官方网站响应超级快。。）。也提到了台湾也有个ACGN交易所。顺带吐槽了那个类似90年代的界面。感觉台湾人确实在一些网页界面上莫名的遵循古制。对，说的就是PTT。</p>\n<p>​    援力满满这个网站的玩法和ACGN不太一样，现在还是测试阶段，站长给了每个人每个股1000的原始股做测试。看了看网站界面，比ACGN-STOCK好多了，但是股票不多，也没看到可以提交股票申请上市的选项。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/index.png\" title=\"首页\">\n<p>​    这个网站代币的获得方式目前只有 “许愿” ，许愿会随机的给予一定的代币或者股票。通过这样放出代币活跃市场。但是许愿并不是没有代价的。如果没有代价就会有人无限制的点许愿了不是。许愿需要本地计算机提供工作量证明（LOVE_POW），方式大概是和现在的区块链一样。目前网站要求的工作量证明使用的算法是SHA512。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/stock.png\" title=\"动漫人物界面\">\n<p>​    这时候坏想法就出来了，网页上的许愿次数只有一次和十次的选项。作为一名合格的计算机学生这种重复性的工作肯定不能接受啊。于是想着怎么用脚本来刷”许愿”</p>\n<p>​    首先通过CHROME元素查看许愿给服务器发送了些什么数据，通过Network栏看到点击许愿后的这段时间里有5个请求。其中一个名为wishs的POST请求发送的数据是许愿的请求。其他的都是一些股票数据的更新。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/Network.png\" title=\"Network\">\n<p>​    其中数据部分发送了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cheer_word:&quot;TEST&quot;</span><br><span class=\"line\">code: &quot;ERIRI&quot;</span><br><span class=\"line\">love_power:63895713284</span><br></pre></td></tr></table></figure>\n<p>​    其中cheer_word应该是是许愿时候那段可以自定义的文字，默认是“我永远喜欢泽村·斯宾塞·英梨梨”。code应该是动漫任务的代码，关联你对那个人物许愿。其中love_power应该就是我们关键的工作量证明。这个love_power是本地JavaScript计算出来的。通过这几个关键的字段发送到服务器验证是否通过然后给账户添加代币或者是股票。这时候得弄清楚其中的ove_power是怎么被计算出来的。</p>\n<p>​    好消息是JavaScript这种脚本语言是保留在计算机本地直接可以查看的。坏消息是为了便与传输JavaScript一般会在发布的时候加混淆。</p>\n<p>​    通过Chrome的Sources栏查看网站附带的几个JS，发现其中一个名为app的最长。于是试着搜索了一下（虽然这里说说很简单，实际上这里看了好久找了好久才找到的。可能也是我菜吧）</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/Sources.png\" title=\"Sources\">\n<p>​    发现了其中工作量证明的部分代码。其实我不是很懂这里的部分是在做什么，但是里面的部分差不多可以猜到。</p>\n<p>o是取unix时间，精确到分钟。（毕竟网络这部分有延迟，本地和服务器不一致计算出来的就不对了）</p>\n<p>I是去股票的代码，估计就是ERIRI</p>\n<p>r是那段可以自定义的祈祷词。</p>\n<p>s是一个随机的数，范围是0-99999999999</p>\n<p>c是r + s + o + i</p>\n<p>然后对c进行sha512运算，正则判断是否有连续的四个0.</p>\n<p>​    在尝试理解love_power的由来以后尝试在Python里吧这个过程实现一遍</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unixtime = int(time.mktime(time.strptime(time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:00\"</span>, time.localtime()), <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class=\"line\">stockcode = <span class=\"string\">'ERIRI'</span></span><br><span class=\"line\">cheerWord = <span class=\"string\">'TEST'</span></span><br><span class=\"line\">s = random.randint(<span class=\"number\">0</span>,<span class=\"number\">99999999999</span>)</span><br><span class=\"line\">c = <span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(cheerWord, s, unixtime, stockcode).encode()</span><br><span class=\"line\">res = hashlib.sha512(c).hexdigest()</span><br><span class=\"line\"><span class=\"keyword\">while</span> re.search(<span class=\"string\">r'0&#123;4&#125;$'</span>, res) <span class=\"keyword\">is</span>  <span class=\"keyword\">None</span>:</span><br><span class=\"line\">    unixtime = int(</span><br><span class=\"line\">        time.mktime(time.strptime(time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:00\"</span>, \t\t        time.localtime()), <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class=\"line\">    s = random.randint(<span class=\"number\">0</span>, <span class=\"number\">99999999999</span>)</span><br><span class=\"line\">    c = <span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(cheerWord, s, unixtime, stockcode).encode()</span><br><span class=\"line\">    res = hashlib.sha512(c).hexdigest()</span><br></pre></td></tr></table></figure>\n<p>在发送到服务器后返回的response也验证了我的猜想，证明我这工作量证明猜想是正确的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"success\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"coin\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">608</span>&#125;</span><br><span class=\"line\">&lt;_sre.SRE_Match object; span=(124, 128), match='0000'&gt; 92230011940 b'TEST922300119401527526500ERIRI'</span><br><span class=\"line\"><span class=\"number\">1527526500</span></span><br></pre></td></tr></table></figure>\n<p>有没有优化的空间呢？</p>\n<p>可能有的。因为unix时间取值进度是分钟，所以我们在计算完一个love_power后是可以在该分钟内重复发送的。</p>\n<p>但是如果今后服务器添加了已经验证过的love_power不能再验证就失效了。不过今后再说吧。</p>\n<p>事后发现今天下午就已经有大佬用脚本刷了百万代币，果然我还是太菜了。</p>\n<img src=\"/2018/05/29/援力满满交易所的自动许愿/死熊猫.gif\" title=\"死熊猫\">"},{"title":"给网站添加https","date":"2018-05-02T09:25:23.000Z","_content":"\n​\t在服务器上跑起 Flask 后访问登录或注册页面 Chrome 总是会在地址栏提示当前页面不安全，的确http 是明文传输，而且会有中间人攻击的风险。总之不管怎么样地址栏有个绿色的小锁总感觉会爽很多啦。\n\n​\t在谷歌搜索了一些文章，发现还有用 openssl 自签署证书的。但是这相当于你自己证明你是你自己，使用自签署的证书只是保证传输过程加密了，但是你加密的信息发送给了谁你并不知道。这里得有一个第三方出现，一个传输双方都信任的对象来作担保。于是CA机构就出现了。\n\n​\t不过好像 12306 就是在首页挂上自己的证书要求你安装。。。感觉这简直违背了 https 的意义。好像 12306 这么做是想推广它自己家的CA服务。。。真是生财有道啊。 \n\n​\t看了一下现在腾讯云和阿里云都有个人CA证书的申请服务了，当然用的是[Let's encrypt](https://easy.zhetao.com/ztcam.oms?omsv=wiki&_verip_csrf_token_name=null)之类的个人免费证书。申请之后会要求你验证你所申请的域名控制权，会要求你添加一条TXT记录或者使域名指向一个文件之类的。在CA机构扫描完成后阿里云或者腾讯云会给你发邮件。在控制台你可以下载你的证书。认证过程大概十几分钟就可以完成。\n\n​\t下载证书后 nginx 配置里添加\n\n```nginx\n\tlisten 443;\n\tssl on;\n\tssl_certificate /etc/nginx/ssl/1_www.malu.moe_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/2_www.malu.moe.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 使用的协议\n```\n\n重启你的 nginx 服务就可以看到 https 生效了。要注意证书所签署的域名必须和当前域名匹配。\n\n比如 malu.moe 这单个域名的证书只能在 malu.moe 域名下使用，如果在 stock.malu.moe 下就会提示证书不匹配。 Chrome 大概会提示你有风险，还会拦截下来。 \n\n​\t个人只能申请单个域名的证书，如果申请泛域名证书会很贵。大概上千块一年的样子。申请更高级别的认真就越麻烦。最高级别还会有人到公司审核的样子。不过一个域名能申请20个单域名证书的样子，大概也够用了。\n\n​\t现在访问 [Stock.malu.moe](https://stock.malu.moe) 看看吧\n\n","source":"_posts/给网站添加https.md","raw":"---\ntitle: 给网站添加https\ndate: 2018-05-02 17:25:23\ntags: \"https\"\n---\n\n​\t在服务器上跑起 Flask 后访问登录或注册页面 Chrome 总是会在地址栏提示当前页面不安全，的确http 是明文传输，而且会有中间人攻击的风险。总之不管怎么样地址栏有个绿色的小锁总感觉会爽很多啦。\n\n​\t在谷歌搜索了一些文章，发现还有用 openssl 自签署证书的。但是这相当于你自己证明你是你自己，使用自签署的证书只是保证传输过程加密了，但是你加密的信息发送给了谁你并不知道。这里得有一个第三方出现，一个传输双方都信任的对象来作担保。于是CA机构就出现了。\n\n​\t不过好像 12306 就是在首页挂上自己的证书要求你安装。。。感觉这简直违背了 https 的意义。好像 12306 这么做是想推广它自己家的CA服务。。。真是生财有道啊。 \n\n​\t看了一下现在腾讯云和阿里云都有个人CA证书的申请服务了，当然用的是[Let's encrypt](https://easy.zhetao.com/ztcam.oms?omsv=wiki&_verip_csrf_token_name=null)之类的个人免费证书。申请之后会要求你验证你所申请的域名控制权，会要求你添加一条TXT记录或者使域名指向一个文件之类的。在CA机构扫描完成后阿里云或者腾讯云会给你发邮件。在控制台你可以下载你的证书。认证过程大概十几分钟就可以完成。\n\n​\t下载证书后 nginx 配置里添加\n\n```nginx\n\tlisten 443;\n\tssl on;\n\tssl_certificate /etc/nginx/ssl/1_www.malu.moe_bundle.crt;\n    ssl_certificate_key /etc/nginx/ssl/2_www.malu.moe.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 使用的协议\n```\n\n重启你的 nginx 服务就可以看到 https 生效了。要注意证书所签署的域名必须和当前域名匹配。\n\n比如 malu.moe 这单个域名的证书只能在 malu.moe 域名下使用，如果在 stock.malu.moe 下就会提示证书不匹配。 Chrome 大概会提示你有风险，还会拦截下来。 \n\n​\t个人只能申请单个域名的证书，如果申请泛域名证书会很贵。大概上千块一年的样子。申请更高级别的认真就越麻烦。最高级别还会有人到公司审核的样子。不过一个域名能申请20个单域名证书的样子，大概也够用了。\n\n​\t现在访问 [Stock.malu.moe](https://stock.malu.moe) 看看吧\n\n","slug":"给网站添加https","published":1,"updated":"2018-07-25T13:30:08.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknr1000jgvd9n8qyeu1u","content":"<p>​    在服务器上跑起 Flask 后访问登录或注册页面 Chrome 总是会在地址栏提示当前页面不安全，的确http 是明文传输，而且会有中间人攻击的风险。总之不管怎么样地址栏有个绿色的小锁总感觉会爽很多啦。</p>\n<p>​    在谷歌搜索了一些文章，发现还有用 openssl 自签署证书的。但是这相当于你自己证明你是你自己，使用自签署的证书只是保证传输过程加密了，但是你加密的信息发送给了谁你并不知道。这里得有一个第三方出现，一个传输双方都信任的对象来作担保。于是CA机构就出现了。</p>\n<p>​    不过好像 12306 就是在首页挂上自己的证书要求你安装。。。感觉这简直违背了 https 的意义。好像 12306 这么做是想推广它自己家的CA服务。。。真是生财有道啊。 </p>\n<p>​    看了一下现在腾讯云和阿里云都有个人CA证书的申请服务了，当然用的是<a href=\"https://easy.zhetao.com/ztcam.oms?omsv=wiki&amp;_verip_csrf_token_name=null\" target=\"_blank\" rel=\"noopener\">Let’s encrypt</a>之类的个人免费证书。申请之后会要求你验证你所申请的域名控制权，会要求你添加一条TXT记录或者使域名指向一个文件之类的。在CA机构扫描完成后阿里云或者腾讯云会给你发邮件。在控制台你可以下载你的证书。认证过程大概十几分钟就可以完成。</p>\n<p>​    下载证书后 nginx 配置里添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">443</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/1_www.malu.moe_bundle.crt;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/2_www.malu.moe.key;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>; <span class=\"comment\"># 使用的协议</span></span><br></pre></td></tr></table></figure>\n<p>重启你的 nginx 服务就可以看到 https 生效了。要注意证书所签署的域名必须和当前域名匹配。</p>\n<p>比如 malu.moe 这单个域名的证书只能在 malu.moe 域名下使用，如果在 stock.malu.moe 下就会提示证书不匹配。 Chrome 大概会提示你有风险，还会拦截下来。 </p>\n<p>​    个人只能申请单个域名的证书，如果申请泛域名证书会很贵。大概上千块一年的样子。申请更高级别的认真就越麻烦。最高级别还会有人到公司审核的样子。不过一个域名能申请20个单域名证书的样子，大概也够用了。</p>\n<p>​    现在访问 <a href=\"https://stock.malu.moe\" target=\"_blank\" rel=\"noopener\">Stock.malu.moe</a> 看看吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在服务器上跑起 Flask 后访问登录或注册页面 Chrome 总是会在地址栏提示当前页面不安全，的确http 是明文传输，而且会有中间人攻击的风险。总之不管怎么样地址栏有个绿色的小锁总感觉会爽很多啦。</p>\n<p>​    在谷歌搜索了一些文章，发现还有用 openssl 自签署证书的。但是这相当于你自己证明你是你自己，使用自签署的证书只是保证传输过程加密了，但是你加密的信息发送给了谁你并不知道。这里得有一个第三方出现，一个传输双方都信任的对象来作担保。于是CA机构就出现了。</p>\n<p>​    不过好像 12306 就是在首页挂上自己的证书要求你安装。。。感觉这简直违背了 https 的意义。好像 12306 这么做是想推广它自己家的CA服务。。。真是生财有道啊。 </p>\n<p>​    看了一下现在腾讯云和阿里云都有个人CA证书的申请服务了，当然用的是<a href=\"https://easy.zhetao.com/ztcam.oms?omsv=wiki&amp;_verip_csrf_token_name=null\" target=\"_blank\" rel=\"noopener\">Let’s encrypt</a>之类的个人免费证书。申请之后会要求你验证你所申请的域名控制权，会要求你添加一条TXT记录或者使域名指向一个文件之类的。在CA机构扫描完成后阿里云或者腾讯云会给你发邮件。在控制台你可以下载你的证书。认证过程大概十几分钟就可以完成。</p>\n<p>​    下载证书后 nginx 配置里添加</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">443</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/1_www.malu.moe_bundle.crt;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/2_www.malu.moe.key;</span><br><span class=\"line\">   <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>; <span class=\"comment\"># 使用的协议</span></span><br></pre></td></tr></table></figure>\n<p>重启你的 nginx 服务就可以看到 https 生效了。要注意证书所签署的域名必须和当前域名匹配。</p>\n<p>比如 malu.moe 这单个域名的证书只能在 malu.moe 域名下使用，如果在 stock.malu.moe 下就会提示证书不匹配。 Chrome 大概会提示你有风险，还会拦截下来。 </p>\n<p>​    个人只能申请单个域名的证书，如果申请泛域名证书会很贵。大概上千块一年的样子。申请更高级别的认真就越麻烦。最高级别还会有人到公司审核的样子。不过一个域名能申请20个单域名证书的样子，大概也够用了。</p>\n<p>​    现在访问 <a href=\"https://stock.malu.moe\" target=\"_blank\" rel=\"noopener\">Stock.malu.moe</a> 看看吧</p>\n"},{"title":"第一次安装hexo","date":"2017-03-14T12:06:24.000Z","_content":"\n​\t话说我之前的vps到期了，苦于囊中羞涩，暂时不想购买新的 vps 。而且主要没什么需求(ss 有师傅的服务器，blog 我想尝试架在 github 上)。由于之前的 wordpress 并没有备份，所以这里算是新的开始，我努力做到日常能写些东西 po 上来把。\n​\t我 google 了以下在 github 上搭建博客的教程，在jekyll 和 hexo 之间选择了 hexo。安装过程并不顺利， 安装 hexo 时候下载速度非常慢就不提了，hexo 服务启动后（hexo server）端口占用既然不提醒？？？我又检查重新安装了好几遍，google 了以下发现可能是端口被占用的问题,换了个端口果然解决（hexo server -p 8000）。\n​\t安装完hexo后还得执行（npm iinstall），安装node。\n​\t暂时不明白为什么。之后还得 push 到 github 的仓库上，一直没弄清楚。现在是不明不白的可以跑了，但是问题还是存在。\nhexo 用的是 Markdown 写东西，暂时用的还不是很习惯，所以排版什么的可能有点问题（好像你用其他什么能写得好一样）。暂时还需要学习。\n​\t以上只是我的一些碎碎念，虽然想写一篇怎么安装 hexo 的教程，可是发现我在安装的时候并没有截图什么的。所以这里只是一些发泄的碎碎念罢了。如果有人完全看不明白也只是我的写作能力太差想到什么写什么完全没有结构所导致的结果。很多东西需要学习啊。\n更多碎碎念期待下一篇。。。","source":"_posts/第一次安装hexo.md","raw":"---\ntitle: 第一次安装hexo\ndate: 2017-03-14 20:06:24\ntags: \n---\n\n​\t话说我之前的vps到期了，苦于囊中羞涩，暂时不想购买新的 vps 。而且主要没什么需求(ss 有师傅的服务器，blog 我想尝试架在 github 上)。由于之前的 wordpress 并没有备份，所以这里算是新的开始，我努力做到日常能写些东西 po 上来把。\n​\t我 google 了以下在 github 上搭建博客的教程，在jekyll 和 hexo 之间选择了 hexo。安装过程并不顺利， 安装 hexo 时候下载速度非常慢就不提了，hexo 服务启动后（hexo server）端口占用既然不提醒？？？我又检查重新安装了好几遍，google 了以下发现可能是端口被占用的问题,换了个端口果然解决（hexo server -p 8000）。\n​\t安装完hexo后还得执行（npm iinstall），安装node。\n​\t暂时不明白为什么。之后还得 push 到 github 的仓库上，一直没弄清楚。现在是不明不白的可以跑了，但是问题还是存在。\nhexo 用的是 Markdown 写东西，暂时用的还不是很习惯，所以排版什么的可能有点问题（好像你用其他什么能写得好一样）。暂时还需要学习。\n​\t以上只是我的一些碎碎念，虽然想写一篇怎么安装 hexo 的教程，可是发现我在安装的时候并没有截图什么的。所以这里只是一些发泄的碎碎念罢了。如果有人完全看不明白也只是我的写作能力太差想到什么写什么完全没有结构所导致的结果。很多东西需要学习啊。\n更多碎碎念期待下一篇。。。","slug":"第一次安装hexo","published":1,"updated":"2018-07-25T13:30:08.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknr3000lgvd94mdwupxq","content":"<p>​    话说我之前的vps到期了，苦于囊中羞涩，暂时不想购买新的 vps 。而且主要没什么需求(ss 有师傅的服务器，blog 我想尝试架在 github 上)。由于之前的 wordpress 并没有备份，所以这里算是新的开始，我努力做到日常能写些东西 po 上来把。<br>​    我 google 了以下在 github 上搭建博客的教程，在jekyll 和 hexo 之间选择了 hexo。安装过程并不顺利， 安装 hexo 时候下载速度非常慢就不提了，hexo 服务启动后（hexo server）端口占用既然不提醒？？？我又检查重新安装了好几遍，google 了以下发现可能是端口被占用的问题,换了个端口果然解决（hexo server -p 8000）。<br>​    安装完hexo后还得执行（npm iinstall），安装node。<br>​    暂时不明白为什么。之后还得 push 到 github 的仓库上，一直没弄清楚。现在是不明不白的可以跑了，但是问题还是存在。<br>hexo 用的是 Markdown 写东西，暂时用的还不是很习惯，所以排版什么的可能有点问题（好像你用其他什么能写得好一样）。暂时还需要学习。<br>​    以上只是我的一些碎碎念，虽然想写一篇怎么安装 hexo 的教程，可是发现我在安装的时候并没有截图什么的。所以这里只是一些发泄的碎碎念罢了。如果有人完全看不明白也只是我的写作能力太差想到什么写什么完全没有结构所导致的结果。很多东西需要学习啊。<br>更多碎碎念期待下一篇。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    话说我之前的vps到期了，苦于囊中羞涩，暂时不想购买新的 vps 。而且主要没什么需求(ss 有师傅的服务器，blog 我想尝试架在 github 上)。由于之前的 wordpress 并没有备份，所以这里算是新的开始，我努力做到日常能写些东西 po 上来把。<br>​    我 google 了以下在 github 上搭建博客的教程，在jekyll 和 hexo 之间选择了 hexo。安装过程并不顺利， 安装 hexo 时候下载速度非常慢就不提了，hexo 服务启动后（hexo server）端口占用既然不提醒？？？我又检查重新安装了好几遍，google 了以下发现可能是端口被占用的问题,换了个端口果然解决（hexo server -p 8000）。<br>​    安装完hexo后还得执行（npm iinstall），安装node。<br>​    暂时不明白为什么。之后还得 push 到 github 的仓库上，一直没弄清楚。现在是不明不白的可以跑了，但是问题还是存在。<br>hexo 用的是 Markdown 写东西，暂时用的还不是很习惯，所以排版什么的可能有点问题（好像你用其他什么能写得好一样）。暂时还需要学习。<br>​    以上只是我的一些碎碎念，虽然想写一篇怎么安装 hexo 的教程，可是发现我在安装的时候并没有截图什么的。所以这里只是一些发泄的碎碎念罢了。如果有人完全看不明白也只是我的写作能力太差想到什么写什么完全没有结构所导致的结果。很多东西需要学习啊。<br>更多碎碎念期待下一篇。。。</p>\n"},{"title":"英才工程","date":"2017-06-04T09:30:40.000Z","_content":"\n​\t最近英才工程要验收了，好紧张啊。\n\n​\t话说我尝试过 wordpress 但是感觉那太麻烦了，而且很多人用我不想时不时的爆bug打我的vps。毕竟我平时也不怎么更新这玩意。\n\n​\t于是我转到了 github 上来，这是用 github 提供的一个服务你可以上传一个库而 github 提供一个二级域名访问你master下的主页文件。相当于把 github 的库当成一个网络空间，并且提供web服务就是了。\n\n​\t可是自己手动写html文件是很麻烦的，而且归类管理也不方便。于是便出现了许多提供生成静态网页的程序脚本啥的。本文就是用 hexo生成并管理的。\n\n​\t话说用静态网页就不能提供许多服务了，比如统计人数，平台什么的（话说当年用 wordpress 的时候不知道什么爬虫一天几千次访问，我都怀疑我的 vps 给人爆了拿去 ddos 去了）\n\n​\t不过换得了许多好处，访问速度的提升， vps 需求的降低…… （话说你这千年只有你自己一个人访问的反正根本不需要考虑这个问题吧，而且现在服务器都是 github 的啊！）也没啥需要备份维护什么的，毕竟什么都在本地有备份只是更新需要 push 到 github 上给你们访问而已。\n\n不过放在 github 不好的一点就是访问速度太蛋疼了，而且国内好像是属于薛定谔的屏蔽状态。\n\n以上，我再去摸一篇怎么在 github 上假设这个 blog 的文。","source":"_posts/英才工程.md","raw":"---\ntitle: 英才工程\ndate: 2017-06-04 17:30:40\ntags: 碎碎念\n---\n\n​\t最近英才工程要验收了，好紧张啊。\n\n​\t话说我尝试过 wordpress 但是感觉那太麻烦了，而且很多人用我不想时不时的爆bug打我的vps。毕竟我平时也不怎么更新这玩意。\n\n​\t于是我转到了 github 上来，这是用 github 提供的一个服务你可以上传一个库而 github 提供一个二级域名访问你master下的主页文件。相当于把 github 的库当成一个网络空间，并且提供web服务就是了。\n\n​\t可是自己手动写html文件是很麻烦的，而且归类管理也不方便。于是便出现了许多提供生成静态网页的程序脚本啥的。本文就是用 hexo生成并管理的。\n\n​\t话说用静态网页就不能提供许多服务了，比如统计人数，平台什么的（话说当年用 wordpress 的时候不知道什么爬虫一天几千次访问，我都怀疑我的 vps 给人爆了拿去 ddos 去了）\n\n​\t不过换得了许多好处，访问速度的提升， vps 需求的降低…… （话说你这千年只有你自己一个人访问的反正根本不需要考虑这个问题吧，而且现在服务器都是 github 的啊！）也没啥需要备份维护什么的，毕竟什么都在本地有备份只是更新需要 push 到 github 上给你们访问而已。\n\n不过放在 github 不好的一点就是访问速度太蛋疼了，而且国内好像是属于薛定谔的屏蔽状态。\n\n以上，我再去摸一篇怎么在 github 上假设这个 blog 的文。","slug":"英才工程","published":1,"updated":"2018-07-25T13:30:08.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknr5000ngvd9fdw4m2m6","content":"<p>​    最近英才工程要验收了，好紧张啊。</p>\n<p>​    话说我尝试过 wordpress 但是感觉那太麻烦了，而且很多人用我不想时不时的爆bug打我的vps。毕竟我平时也不怎么更新这玩意。</p>\n<p>​    于是我转到了 github 上来，这是用 github 提供的一个服务你可以上传一个库而 github 提供一个二级域名访问你master下的主页文件。相当于把 github 的库当成一个网络空间，并且提供web服务就是了。</p>\n<p>​    可是自己手动写html文件是很麻烦的，而且归类管理也不方便。于是便出现了许多提供生成静态网页的程序脚本啥的。本文就是用 hexo生成并管理的。</p>\n<p>​    话说用静态网页就不能提供许多服务了，比如统计人数，平台什么的（话说当年用 wordpress 的时候不知道什么爬虫一天几千次访问，我都怀疑我的 vps 给人爆了拿去 ddos 去了）</p>\n<p>​    不过换得了许多好处，访问速度的提升， vps 需求的降低…… （话说你这千年只有你自己一个人访问的反正根本不需要考虑这个问题吧，而且现在服务器都是 github 的啊！）也没啥需要备份维护什么的，毕竟什么都在本地有备份只是更新需要 push 到 github 上给你们访问而已。</p>\n<p>不过放在 github 不好的一点就是访问速度太蛋疼了，而且国内好像是属于薛定谔的屏蔽状态。</p>\n<p>以上，我再去摸一篇怎么在 github 上假设这个 blog 的文。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    最近英才工程要验收了，好紧张啊。</p>\n<p>​    话说我尝试过 wordpress 但是感觉那太麻烦了，而且很多人用我不想时不时的爆bug打我的vps。毕竟我平时也不怎么更新这玩意。</p>\n<p>​    于是我转到了 github 上来，这是用 github 提供的一个服务你可以上传一个库而 github 提供一个二级域名访问你master下的主页文件。相当于把 github 的库当成一个网络空间，并且提供web服务就是了。</p>\n<p>​    可是自己手动写html文件是很麻烦的，而且归类管理也不方便。于是便出现了许多提供生成静态网页的程序脚本啥的。本文就是用 hexo生成并管理的。</p>\n<p>​    话说用静态网页就不能提供许多服务了，比如统计人数，平台什么的（话说当年用 wordpress 的时候不知道什么爬虫一天几千次访问，我都怀疑我的 vps 给人爆了拿去 ddos 去了）</p>\n<p>​    不过换得了许多好处，访问速度的提升， vps 需求的降低…… （话说你这千年只有你自己一个人访问的反正根本不需要考虑这个问题吧，而且现在服务器都是 github 的啊！）也没啥需要备份维护什么的，毕竟什么都在本地有备份只是更新需要 push 到 github 上给你们访问而已。</p>\n<p>不过放在 github 不好的一点就是访问速度太蛋疼了，而且国内好像是属于薛定谔的屏蔽状态。</p>\n<p>以上，我再去摸一篇怎么在 github 上假设这个 blog 的文。</p>\n"},{"title":"最近的一些想法","date":"2017-03-14T12:09:29.000Z","_content":"\n​        最近沉迷小说《临高启明》，真的是非常好看。起初看到知乎有人问有没有人去临高圣地巡礼。点进去看后发现是一本叫《临高启明》的小说。因为临高是海南的一个地方，顿时兴趣就来了。看到有关故乡的小说非常不容易啊，还有圣地巡礼（感觉一群神经病，笑死了）。\n\n​\t{% asset_img 百仞滩.jpg 百仞滩 %}\n\n​        后来知道《临高启明》是sc论坛坛友的讨论之作。之后主力转移到了[北朝论坛架空区]。小说具体细节还是满考究的。很多机械，工程的问题都有很详细的讨论（毕竟一群显得蛋疼的网友，什么身份的都有，小说里则是500元老院）。小说的视角也很明显是一群荷尔蒙迸发的男性们写出来的,因为伟业之一就是养小Loli。\n\n​        最近花了很多时间在\t看《临高启明》，几天下来追了十分之一不到。现在大概是100w字。所以大概看了有10w字，然而穿越者还没在广州站稳脚跟，还没完成初步的工业化（怎么可能啊！）。\n\n​        突发奇想如果有个穿越游戏应该很好玩，带着现代人和物质穿越到过去。启动工业化。可是过头想想玩法也不过是模拟城市那样子。但是还是觉得会很有意思。用着现在的地图和资料（游戏使用这个世界真实的资料，甚至地形都可以用谷歌地图上的等高线建模）去开发资源，靠掌握的历史事件获利等等。可是感觉作为单机一个人的操作量太大了（即使现在的模拟城市操作量也很大，各种交通问题，感觉大部分是AI太智障了没能好好利用道路）。在我看来这非常有意思，如果给P社做的话。\n\n\n\n","source":"_posts/最近的一些想法.md","raw":"---\ntitle: 最近的一些想法\ndate: 2017-03-14 20:09:29\ntags: 碎碎念\n---\n\n​        最近沉迷小说《临高启明》，真的是非常好看。起初看到知乎有人问有没有人去临高圣地巡礼。点进去看后发现是一本叫《临高启明》的小说。因为临高是海南的一个地方，顿时兴趣就来了。看到有关故乡的小说非常不容易啊，还有圣地巡礼（感觉一群神经病，笑死了）。\n\n​\t{% asset_img 百仞滩.jpg 百仞滩 %}\n\n​        后来知道《临高启明》是sc论坛坛友的讨论之作。之后主力转移到了[北朝论坛架空区]。小说具体细节还是满考究的。很多机械，工程的问题都有很详细的讨论（毕竟一群显得蛋疼的网友，什么身份的都有，小说里则是500元老院）。小说的视角也很明显是一群荷尔蒙迸发的男性们写出来的,因为伟业之一就是养小Loli。\n\n​        最近花了很多时间在\t看《临高启明》，几天下来追了十分之一不到。现在大概是100w字。所以大概看了有10w字，然而穿越者还没在广州站稳脚跟，还没完成初步的工业化（怎么可能啊！）。\n\n​        突发奇想如果有个穿越游戏应该很好玩，带着现代人和物质穿越到过去。启动工业化。可是过头想想玩法也不过是模拟城市那样子。但是还是觉得会很有意思。用着现在的地图和资料（游戏使用这个世界真实的资料，甚至地形都可以用谷歌地图上的等高线建模）去开发资源，靠掌握的历史事件获利等等。可是感觉作为单机一个人的操作量太大了（即使现在的模拟城市操作量也很大，各种交通问题，感觉大部分是AI太智障了没能好好利用道路）。在我看来这非常有意思，如果给P社做的话。\n\n\n\n","slug":"最近的一些想法","published":1,"updated":"2018-07-25T13:30:08.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknr6000ogvd930v8li0k","content":"<p>​        最近沉迷小说《临高启明》，真的是非常好看。起初看到知乎有人问有没有人去临高圣地巡礼。点进去看后发现是一本叫《临高启明》的小说。因为临高是海南的一个地方，顿时兴趣就来了。看到有关故乡的小说非常不容易啊，还有圣地巡礼（感觉一群神经病，笑死了）。</p>\n<p>​    <img src=\"/2017/03/14/最近的一些想法/百仞滩.jpg\" title=\"百仞滩\"></p>\n<p>​        后来知道《临高启明》是sc论坛坛友的讨论之作。之后主力转移到了[北朝论坛架空区]。小说具体细节还是满考究的。很多机械，工程的问题都有很详细的讨论（毕竟一群显得蛋疼的网友，什么身份的都有，小说里则是500元老院）。小说的视角也很明显是一群荷尔蒙迸发的男性们写出来的,因为伟业之一就是养小Loli。</p>\n<p>​        最近花了很多时间在    看《临高启明》，几天下来追了十分之一不到。现在大概是100w字。所以大概看了有10w字，然而穿越者还没在广州站稳脚跟，还没完成初步的工业化（怎么可能啊！）。</p>\n<p>​        突发奇想如果有个穿越游戏应该很好玩，带着现代人和物质穿越到过去。启动工业化。可是过头想想玩法也不过是模拟城市那样子。但是还是觉得会很有意思。用着现在的地图和资料（游戏使用这个世界真实的资料，甚至地形都可以用谷歌地图上的等高线建模）去开发资源，靠掌握的历史事件获利等等。可是感觉作为单机一个人的操作量太大了（即使现在的模拟城市操作量也很大，各种交通问题，感觉大部分是AI太智障了没能好好利用道路）。在我看来这非常有意思，如果给P社做的话。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        最近沉迷小说《临高启明》，真的是非常好看。起初看到知乎有人问有没有人去临高圣地巡礼。点进去看后发现是一本叫《临高启明》的小说。因为临高是海南的一个地方，顿时兴趣就来了。看到有关故乡的小说非常不容易啊，还有圣地巡礼（感觉一群神经病，笑死了）。</p>\n<p>​    <img src=\"/2017/03/14/最近的一些想法/百仞滩.jpg\" title=\"百仞滩\"></p>\n<p>​        后来知道《临高启明》是sc论坛坛友的讨论之作。之后主力转移到了[北朝论坛架空区]。小说具体细节还是满考究的。很多机械，工程的问题都有很详细的讨论（毕竟一群显得蛋疼的网友，什么身份的都有，小说里则是500元老院）。小说的视角也很明显是一群荷尔蒙迸发的男性们写出来的,因为伟业之一就是养小Loli。</p>\n<p>​        最近花了很多时间在    看《临高启明》，几天下来追了十分之一不到。现在大概是100w字。所以大概看了有10w字，然而穿越者还没在广州站稳脚跟，还没完成初步的工业化（怎么可能啊！）。</p>\n<p>​        突发奇想如果有个穿越游戏应该很好玩，带着现代人和物质穿越到过去。启动工业化。可是过头想想玩法也不过是模拟城市那样子。但是还是觉得会很有意思。用着现在的地图和资料（游戏使用这个世界真实的资料，甚至地形都可以用谷歌地图上的等高线建模）去开发资源，靠掌握的历史事件获利等等。可是感觉作为单机一个人的操作量太大了（即使现在的模拟城市操作量也很大，各种交通问题，感觉大部分是AI太智障了没能好好利用道路）。在我看来这非常有意思，如果给P社做的话。</p>\n"},{"title":"给后端添加redis缓存","date":"2018-04-28T16:01:47.000Z","_content":"\n​\t在 VPS 上架设好 Flask 后，我测试并发是经常发现 ORM 框架会发生错误，查询之后是 连接时设置的 pool_size 太小， 使用 SQLCHEMY 时默认的 pool_size = 5， 我改为100后就可以了。\n\n​\t但是如果大并发的时候一些热点数据应该还是会频繁的查询数据库，但是这些数据是不会经常更新的。所以我就想着这么用 redis 缓存那些经常被查询但是不会更新的数据， 比如公告， STOCK 的基本信息.\n\n​\t 我试了测试没有使用redis进行缓存时候打开首页查询公告时候的web服务器性能，使用 webbench 进行 500 线程 60 秒的测试。\n\n```\nBenchmarking: GET http://127.0.0.1:5000/\n500 clients, running 60 sec.\n\nSpeed=1924 pages/min, 54160 bytes/sec.\nRequests: 1924 susceed, 0 failed.\n\n```\n\n在添加 Reids 缓存后再以同样的参数进行测试\n\n```\nBenchmarking: GET http://127.0.0.1:5000/\n500 clients, running 60 sec.\n\nSpeed=16735 pages/min, 468472 bytes/sec.\nRequests: 16642 susceed, 93 failed.\n```\n\n发送速率直接上了一个数量级，舒服。\n\n直接测试一下在 VPS 上跑的后端并发数，在没有添加 Redis 的后端测试的时候本地打开网页是不是回500\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=3990 pages/min, 106517 bytes/sec.\nRequests: 3990 susceed, 0 failed.\n```\n\n添加后\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=3810 pages/min, 108984 bytes/sec.\nRequests: 3810 susceed, 0 failed.\n```\n\n没想到却是一样的，为啥啊?","source":"_posts/给后端添加redis缓存.md","raw":"---\ntitle: 给后端添加redis缓存\ndate: 2018-04-29 00:01:47\ntags: 后端 redis\n---\n\n​\t在 VPS 上架设好 Flask 后，我测试并发是经常发现 ORM 框架会发生错误，查询之后是 连接时设置的 pool_size 太小， 使用 SQLCHEMY 时默认的 pool_size = 5， 我改为100后就可以了。\n\n​\t但是如果大并发的时候一些热点数据应该还是会频繁的查询数据库，但是这些数据是不会经常更新的。所以我就想着这么用 redis 缓存那些经常被查询但是不会更新的数据， 比如公告， STOCK 的基本信息.\n\n​\t 我试了测试没有使用redis进行缓存时候打开首页查询公告时候的web服务器性能，使用 webbench 进行 500 线程 60 秒的测试。\n\n```\nBenchmarking: GET http://127.0.0.1:5000/\n500 clients, running 60 sec.\n\nSpeed=1924 pages/min, 54160 bytes/sec.\nRequests: 1924 susceed, 0 failed.\n\n```\n\n在添加 Reids 缓存后再以同样的参数进行测试\n\n```\nBenchmarking: GET http://127.0.0.1:5000/\n500 clients, running 60 sec.\n\nSpeed=16735 pages/min, 468472 bytes/sec.\nRequests: 16642 susceed, 93 failed.\n```\n\n发送速率直接上了一个数量级，舒服。\n\n直接测试一下在 VPS 上跑的后端并发数，在没有添加 Redis 的后端测试的时候本地打开网页是不是回500\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=3990 pages/min, 106517 bytes/sec.\nRequests: 3990 susceed, 0 failed.\n```\n\n添加后\n\n```\nBenchmarking: GET http://106.15.205.43/index\n500 clients, running 60 sec.\n\nSpeed=3810 pages/min, 108984 bytes/sec.\nRequests: 3810 susceed, 0 failed.\n```\n\n没想到却是一样的，为啥啊?","slug":"给后端添加redis缓存","published":1,"updated":"2018-07-25T13:30:08.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknra000rgvd9ppjysm8o","content":"<p>​    在 VPS 上架设好 Flask 后，我测试并发是经常发现 ORM 框架会发生错误，查询之后是 连接时设置的 pool_size 太小， 使用 SQLCHEMY 时默认的 pool_size = 5， 我改为100后就可以了。</p>\n<p>​    但是如果大并发的时候一些热点数据应该还是会频繁的查询数据库，但是这些数据是不会经常更新的。所以我就想着这么用 redis 缓存那些经常被查询但是不会更新的数据， 比如公告， STOCK 的基本信息.</p>\n<p>​     我试了测试没有使用redis进行缓存时候打开首页查询公告时候的web服务器性能，使用 webbench 进行 500 线程 60 秒的测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1:5000/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=1924 pages/min, 54160 bytes/sec.</span><br><span class=\"line\">Requests: 1924 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>在添加 Reids 缓存后再以同样的参数进行测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1:5000/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=16735 pages/min, 468472 bytes/sec.</span><br><span class=\"line\">Requests: 16642 susceed, 93 failed.</span><br></pre></td></tr></table></figure>\n<p>发送速率直接上了一个数量级，舒服。</p>\n<p>直接测试一下在 VPS 上跑的后端并发数，在没有添加 Redis 的后端测试的时候本地打开网页是不是回500</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=3990 pages/min, 106517 bytes/sec.</span><br><span class=\"line\">Requests: 3990 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>添加后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=3810 pages/min, 108984 bytes/sec.</span><br><span class=\"line\">Requests: 3810 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>没想到却是一样的，为啥啊?</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在 VPS 上架设好 Flask 后，我测试并发是经常发现 ORM 框架会发生错误，查询之后是 连接时设置的 pool_size 太小， 使用 SQLCHEMY 时默认的 pool_size = 5， 我改为100后就可以了。</p>\n<p>​    但是如果大并发的时候一些热点数据应该还是会频繁的查询数据库，但是这些数据是不会经常更新的。所以我就想着这么用 redis 缓存那些经常被查询但是不会更新的数据， 比如公告， STOCK 的基本信息.</p>\n<p>​     我试了测试没有使用redis进行缓存时候打开首页查询公告时候的web服务器性能，使用 webbench 进行 500 线程 60 秒的测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1:5000/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=1924 pages/min, 54160 bytes/sec.</span><br><span class=\"line\">Requests: 1924 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>在添加 Reids 缓存后再以同样的参数进行测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://127.0.0.1:5000/</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=16735 pages/min, 468472 bytes/sec.</span><br><span class=\"line\">Requests: 16642 susceed, 93 failed.</span><br></pre></td></tr></table></figure>\n<p>发送速率直接上了一个数量级，舒服。</p>\n<p>直接测试一下在 VPS 上跑的后端并发数，在没有添加 Redis 的后端测试的时候本地打开网页是不是回500</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=3990 pages/min, 106517 bytes/sec.</span><br><span class=\"line\">Requests: 3990 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>添加后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmarking: GET http://106.15.205.43/index</span><br><span class=\"line\">500 clients, running 60 sec.</span><br><span class=\"line\"></span><br><span class=\"line\">Speed=3810 pages/min, 108984 bytes/sec.</span><br><span class=\"line\">Requests: 3810 susceed, 0 failed.</span><br></pre></td></tr></table></figure>\n<p>没想到却是一样的，为啥啊?</p>\n"},{"title":"记录新发现的事物，高会中转站","date":"2018-03-01T02:25:40.000Z","_content":"\n话说记一下今天发现很有趣的利益链条。\n都说色情是互联网上最大的流量聚集地，在一些色情行业合法的国家会有一些专门的色情网站，比如pornhub 和xvideos。它们上面大部分视频是免费的，所以它们产生了互联网上大概百分之30的流量。这些视频网站当然还提供会员服务，会员可以不看烦人的广告，还可以看质量更高的自制剧。这也是网站的生存之道。\n\n在观看体验上pornhub之流一点也不输youtube，它们会贴心的给每段视频的进度打上标签，方便你直接进入正题。它们还根据用户在视频位置停留的时间标注“热度图”。\n{% asset_img porn.png 热度图 %}\n其中“热度图”高的地方便是人民群众比较喜欢的片段，方便你随时进入影片高潮。\n\n但是地球上还是有一些国家色情行业是不合法的，但是人民群众的需求你又不能消灭，所以一些利益链条就在地下蔓延开来。\n在中文互联网上草榴算是中文色情信息的其中一个聚集地，在草榴论坛上会有专门的板块发布av视频的种子供人下载，其中论坛依据av视频种子发布地聚集了大量吃瓜群众，有了人就可以打广告。广告便是支撑论坛维护和背后运营人员的资本来源。广告的价格根据显示位置的不同而不同，首页头条一栏价格可在6w一个月，而一般这种网站首页的条幅广告可以占满满一屏。\n{% asset_img ad.png 广告 %}\n(广告后面的菠菜网站的利益链条又是不同的一批人在做，不同的是菠菜网站是一波又一波的跑路，而论坛总是能接到不同的菠菜网站发布的广告）\n\n在论坛的利益链条下是发布种子的各种发布人员，有的发布人员是论坛自己用户自愿担任的，当然论坛会每个月象征性的给予论坛代币或者一些纪念勋章。这些发布人员获得的是论坛边缘的一些管理权限和一些“荣誉感”。\n而另一些由真实利益驱动的发布人员可能在其版面发布自己的广告，可以在发布的种子里添加自己的广告文件。或者通过返利性质的网盘发布种子，在这个利益链条下，发布人员不过拾些论坛的残羹冷炙罢了。但是如果你掌握了大部分片源的发布，成为了一名有知名度的发布人，你甚至可以有一个自己的分区。之后你可以自己接广告，甚至可以在片源里添加水印，即使这样劣质的片还是会有一堆疯狂的流量。谁叫你是最大的发片组呢。\n{% asset_img promulgator.png 第六天大魔王 %}\n\n互联网上如果有了流量那么在每个链条都会有利可图，其中一环是在下载方面花尽心思。在论坛的早期，会有一些发布人员吧种子上传到一些返利的网盘，网盘根据你上传的文件下载次数给你代币，你可以把代币换为现金。代价就是下载文件的人需要看一些广告或者网站种种限制并引诱用户开网盘的高级会员。当用户通过你的页面开通会员时你会获得一部份分成。\n{% asset_img netdisc.png 网盘宣传 %}\n这部分的收入是十分可观的，相比在论坛上发布，自己在网盘上发布限制要小得多。以至于会有一些WordPress的站点专门发布番号信息再放上这些网盘的链接。例如在[jav.h-era.org](https://jav.h-era.org/storage-policy.html)网站的储存策略里就介绍了它们在网盘上储存了17TB的数据。并且它们会同时上传三个不同的网盘以防止个别分卷失效。\njavlibrary网站也有人会在留言区发布各种网盘链接。\n{% asset_img promulgator-1.png 网盘从业者 %}\n\n但是市面上此类的网盘很多，不同的发布者可能会使用不同的网盘，个人不可能每个网盘都开个会员(此类网盘的会员可是非常非常贵）。于是这个利益链条上又产生了一个利益链条。高会中转站。\n\n高会中转站是一个由你提交网盘文件地址，之后网站使用高级会员账号高速下载后分享文件给你的网站服务，此类网站的原理大概是网站购买了大部分此类网盘网站的高级会员，用户购买高会中转站的流量，网站后台使用高级会员账号下载完成后提供给用户一个自己服务器上的地址给用户高速下载。这类相当于共享高级会员的网站当然是返利类网盘网站声明禁止的。不过怎么盈利就靠网站怎么逃避网盘网站的监管和营销了。\n\n国外的高会中转站[offcloud](https://offcloud.com/?=5caf95ec)据它们主页的数据它们至今储存了1.36PB的数据。它们的站点可以下载大部分收费网盘的资源，甚至还支持国内的百度网盘。还可以根据需求下载后由它们上传到google drive、onedrive等同步盘上去。至于收费大致就是按月10美元，按年5美元一个月。也大致就是一个vps的价格。\n{% asset_img offcloud.png 网盘价格 %}\n国内也有很多高会中转站，不过大多数都是二手贩子，网站做得也很简陋，但是国内这东西也刚刚传进来。之前大多数都是上某宝租个账号直接就开始下载，现在某宝严厉打击这类商品，以至于苹果礼品卡都不让出售了（说是有些礼品卡是用国外的黑卡刷出开的）。一切都才刚刚开始，\n\n\n","source":"_posts/记录新发现的事物，高会中转站.md","raw":"---\ntitle: 记录新发现的事物，高会中转站\ndate: 2018-03-01 10:25:40\ntags: 记录\n---\n\n话说记一下今天发现很有趣的利益链条。\n都说色情是互联网上最大的流量聚集地，在一些色情行业合法的国家会有一些专门的色情网站，比如pornhub 和xvideos。它们上面大部分视频是免费的，所以它们产生了互联网上大概百分之30的流量。这些视频网站当然还提供会员服务，会员可以不看烦人的广告，还可以看质量更高的自制剧。这也是网站的生存之道。\n\n在观看体验上pornhub之流一点也不输youtube，它们会贴心的给每段视频的进度打上标签，方便你直接进入正题。它们还根据用户在视频位置停留的时间标注“热度图”。\n{% asset_img porn.png 热度图 %}\n其中“热度图”高的地方便是人民群众比较喜欢的片段，方便你随时进入影片高潮。\n\n但是地球上还是有一些国家色情行业是不合法的，但是人民群众的需求你又不能消灭，所以一些利益链条就在地下蔓延开来。\n在中文互联网上草榴算是中文色情信息的其中一个聚集地，在草榴论坛上会有专门的板块发布av视频的种子供人下载，其中论坛依据av视频种子发布地聚集了大量吃瓜群众，有了人就可以打广告。广告便是支撑论坛维护和背后运营人员的资本来源。广告的价格根据显示位置的不同而不同，首页头条一栏价格可在6w一个月，而一般这种网站首页的条幅广告可以占满满一屏。\n{% asset_img ad.png 广告 %}\n(广告后面的菠菜网站的利益链条又是不同的一批人在做，不同的是菠菜网站是一波又一波的跑路，而论坛总是能接到不同的菠菜网站发布的广告）\n\n在论坛的利益链条下是发布种子的各种发布人员，有的发布人员是论坛自己用户自愿担任的，当然论坛会每个月象征性的给予论坛代币或者一些纪念勋章。这些发布人员获得的是论坛边缘的一些管理权限和一些“荣誉感”。\n而另一些由真实利益驱动的发布人员可能在其版面发布自己的广告，可以在发布的种子里添加自己的广告文件。或者通过返利性质的网盘发布种子，在这个利益链条下，发布人员不过拾些论坛的残羹冷炙罢了。但是如果你掌握了大部分片源的发布，成为了一名有知名度的发布人，你甚至可以有一个自己的分区。之后你可以自己接广告，甚至可以在片源里添加水印，即使这样劣质的片还是会有一堆疯狂的流量。谁叫你是最大的发片组呢。\n{% asset_img promulgator.png 第六天大魔王 %}\n\n互联网上如果有了流量那么在每个链条都会有利可图，其中一环是在下载方面花尽心思。在论坛的早期，会有一些发布人员吧种子上传到一些返利的网盘，网盘根据你上传的文件下载次数给你代币，你可以把代币换为现金。代价就是下载文件的人需要看一些广告或者网站种种限制并引诱用户开网盘的高级会员。当用户通过你的页面开通会员时你会获得一部份分成。\n{% asset_img netdisc.png 网盘宣传 %}\n这部分的收入是十分可观的，相比在论坛上发布，自己在网盘上发布限制要小得多。以至于会有一些WordPress的站点专门发布番号信息再放上这些网盘的链接。例如在[jav.h-era.org](https://jav.h-era.org/storage-policy.html)网站的储存策略里就介绍了它们在网盘上储存了17TB的数据。并且它们会同时上传三个不同的网盘以防止个别分卷失效。\njavlibrary网站也有人会在留言区发布各种网盘链接。\n{% asset_img promulgator-1.png 网盘从业者 %}\n\n但是市面上此类的网盘很多，不同的发布者可能会使用不同的网盘，个人不可能每个网盘都开个会员(此类网盘的会员可是非常非常贵）。于是这个利益链条上又产生了一个利益链条。高会中转站。\n\n高会中转站是一个由你提交网盘文件地址，之后网站使用高级会员账号高速下载后分享文件给你的网站服务，此类网站的原理大概是网站购买了大部分此类网盘网站的高级会员，用户购买高会中转站的流量，网站后台使用高级会员账号下载完成后提供给用户一个自己服务器上的地址给用户高速下载。这类相当于共享高级会员的网站当然是返利类网盘网站声明禁止的。不过怎么盈利就靠网站怎么逃避网盘网站的监管和营销了。\n\n国外的高会中转站[offcloud](https://offcloud.com/?=5caf95ec)据它们主页的数据它们至今储存了1.36PB的数据。它们的站点可以下载大部分收费网盘的资源，甚至还支持国内的百度网盘。还可以根据需求下载后由它们上传到google drive、onedrive等同步盘上去。至于收费大致就是按月10美元，按年5美元一个月。也大致就是一个vps的价格。\n{% asset_img offcloud.png 网盘价格 %}\n国内也有很多高会中转站，不过大多数都是二手贩子，网站做得也很简陋，但是国内这东西也刚刚传进来。之前大多数都是上某宝租个账号直接就开始下载，现在某宝严厉打击这类商品，以至于苹果礼品卡都不让出售了（说是有些礼品卡是用国外的黑卡刷出开的）。一切都才刚刚开始，\n\n\n","slug":"记录新发现的事物，高会中转站","published":1,"updated":"2018-07-25T13:30:08.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknrb000tgvd9hrff9mc0","content":"<p>话说记一下今天发现很有趣的利益链条。<br>都说色情是互联网上最大的流量聚集地，在一些色情行业合法的国家会有一些专门的色情网站，比如pornhub 和xvideos。它们上面大部分视频是免费的，所以它们产生了互联网上大概百分之30的流量。这些视频网站当然还提供会员服务，会员可以不看烦人的广告，还可以看质量更高的自制剧。这也是网站的生存之道。</p>\n<p>在观看体验上pornhub之流一点也不输youtube，它们会贴心的给每段视频的进度打上标签，方便你直接进入正题。它们还根据用户在视频位置停留的时间标注“热度图”。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/porn.png\" title=\"热度图\"><br>其中“热度图”高的地方便是人民群众比较喜欢的片段，方便你随时进入影片高潮。</p>\n<p>但是地球上还是有一些国家色情行业是不合法的，但是人民群众的需求你又不能消灭，所以一些利益链条就在地下蔓延开来。<br>在中文互联网上草榴算是中文色情信息的其中一个聚集地，在草榴论坛上会有专门的板块发布av视频的种子供人下载，其中论坛依据av视频种子发布地聚集了大量吃瓜群众，有了人就可以打广告。广告便是支撑论坛维护和背后运营人员的资本来源。广告的价格根据显示位置的不同而不同，首页头条一栏价格可在6w一个月，而一般这种网站首页的条幅广告可以占满满一屏。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/ad.png\" title=\"广告\"><br>(广告后面的菠菜网站的利益链条又是不同的一批人在做，不同的是菠菜网站是一波又一波的跑路，而论坛总是能接到不同的菠菜网站发布的广告）</p>\n<p>在论坛的利益链条下是发布种子的各种发布人员，有的发布人员是论坛自己用户自愿担任的，当然论坛会每个月象征性的给予论坛代币或者一些纪念勋章。这些发布人员获得的是论坛边缘的一些管理权限和一些“荣誉感”。<br>而另一些由真实利益驱动的发布人员可能在其版面发布自己的广告，可以在发布的种子里添加自己的广告文件。或者通过返利性质的网盘发布种子，在这个利益链条下，发布人员不过拾些论坛的残羹冷炙罢了。但是如果你掌握了大部分片源的发布，成为了一名有知名度的发布人，你甚至可以有一个自己的分区。之后你可以自己接广告，甚至可以在片源里添加水印，即使这样劣质的片还是会有一堆疯狂的流量。谁叫你是最大的发片组呢。<br></p>\n<p>互联网上如果有了流量那么在每个链条都会有利可图，其中一环是在下载方面花尽心思。在论坛的早期，会有一些发布人员吧种子上传到一些返利的网盘，网盘根据你上传的文件下载次数给你代币，你可以把代币换为现金。代价就是下载文件的人需要看一些广告或者网站种种限制并引诱用户开网盘的高级会员。当用户通过你的页面开通会员时你会获得一部份分成。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/netdisc.png\" title=\"网盘宣传\"><br>这部分的收入是十分可观的，相比在论坛上发布，自己在网盘上发布限制要小得多。以至于会有一些WordPress的站点专门发布番号信息再放上这些网盘的链接。例如在<a href=\"https://jav.h-era.org/storage-policy.html\" target=\"_blank\" rel=\"noopener\">jav.h-era.org</a>网站的储存策略里就介绍了它们在网盘上储存了17TB的数据。并且它们会同时上传三个不同的网盘以防止个别分卷失效。<br>javlibrary网站也有人会在留言区发布各种网盘链接。<br></p>\n<p>但是市面上此类的网盘很多，不同的发布者可能会使用不同的网盘，个人不可能每个网盘都开个会员(此类网盘的会员可是非常非常贵）。于是这个利益链条上又产生了一个利益链条。高会中转站。</p>\n<p>高会中转站是一个由你提交网盘文件地址，之后网站使用高级会员账号高速下载后分享文件给你的网站服务，此类网站的原理大概是网站购买了大部分此类网盘网站的高级会员，用户购买高会中转站的流量，网站后台使用高级会员账号下载完成后提供给用户一个自己服务器上的地址给用户高速下载。这类相当于共享高级会员的网站当然是返利类网盘网站声明禁止的。不过怎么盈利就靠网站怎么逃避网盘网站的监管和营销了。</p>\n<p>国外的高会中转站<a href=\"https://offcloud.com/?=5caf95ec\" target=\"_blank\" rel=\"noopener\">offcloud</a>据它们主页的数据它们至今储存了1.36PB的数据。它们的站点可以下载大部分收费网盘的资源，甚至还支持国内的百度网盘。还可以根据需求下载后由它们上传到google drive、onedrive等同步盘上去。至于收费大致就是按月10美元，按年5美元一个月。也大致就是一个vps的价格。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/offcloud.png\" title=\"网盘价格\"><br>国内也有很多高会中转站，不过大多数都是二手贩子，网站做得也很简陋，但是国内这东西也刚刚传进来。之前大多数都是上某宝租个账号直接就开始下载，现在某宝严厉打击这类商品，以至于苹果礼品卡都不让出售了（说是有些礼品卡是用国外的黑卡刷出开的）。一切都才刚刚开始，</p>\n","site":{"data":{}},"excerpt":"","more":"<p>话说记一下今天发现很有趣的利益链条。<br>都说色情是互联网上最大的流量聚集地，在一些色情行业合法的国家会有一些专门的色情网站，比如pornhub 和xvideos。它们上面大部分视频是免费的，所以它们产生了互联网上大概百分之30的流量。这些视频网站当然还提供会员服务，会员可以不看烦人的广告，还可以看质量更高的自制剧。这也是网站的生存之道。</p>\n<p>在观看体验上pornhub之流一点也不输youtube，它们会贴心的给每段视频的进度打上标签，方便你直接进入正题。它们还根据用户在视频位置停留的时间标注“热度图”。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/porn.png\" title=\"热度图\"><br>其中“热度图”高的地方便是人民群众比较喜欢的片段，方便你随时进入影片高潮。</p>\n<p>但是地球上还是有一些国家色情行业是不合法的，但是人民群众的需求你又不能消灭，所以一些利益链条就在地下蔓延开来。<br>在中文互联网上草榴算是中文色情信息的其中一个聚集地，在草榴论坛上会有专门的板块发布av视频的种子供人下载，其中论坛依据av视频种子发布地聚集了大量吃瓜群众，有了人就可以打广告。广告便是支撑论坛维护和背后运营人员的资本来源。广告的价格根据显示位置的不同而不同，首页头条一栏价格可在6w一个月，而一般这种网站首页的条幅广告可以占满满一屏。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/ad.png\" title=\"广告\"><br>(广告后面的菠菜网站的利益链条又是不同的一批人在做，不同的是菠菜网站是一波又一波的跑路，而论坛总是能接到不同的菠菜网站发布的广告）</p>\n<p>在论坛的利益链条下是发布种子的各种发布人员，有的发布人员是论坛自己用户自愿担任的，当然论坛会每个月象征性的给予论坛代币或者一些纪念勋章。这些发布人员获得的是论坛边缘的一些管理权限和一些“荣誉感”。<br>而另一些由真实利益驱动的发布人员可能在其版面发布自己的广告，可以在发布的种子里添加自己的广告文件。或者通过返利性质的网盘发布种子，在这个利益链条下，发布人员不过拾些论坛的残羹冷炙罢了。但是如果你掌握了大部分片源的发布，成为了一名有知名度的发布人，你甚至可以有一个自己的分区。之后你可以自己接广告，甚至可以在片源里添加水印，即使这样劣质的片还是会有一堆疯狂的流量。谁叫你是最大的发片组呢。<br></p>\n<p>互联网上如果有了流量那么在每个链条都会有利可图，其中一环是在下载方面花尽心思。在论坛的早期，会有一些发布人员吧种子上传到一些返利的网盘，网盘根据你上传的文件下载次数给你代币，你可以把代币换为现金。代价就是下载文件的人需要看一些广告或者网站种种限制并引诱用户开网盘的高级会员。当用户通过你的页面开通会员时你会获得一部份分成。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/netdisc.png\" title=\"网盘宣传\"><br>这部分的收入是十分可观的，相比在论坛上发布，自己在网盘上发布限制要小得多。以至于会有一些WordPress的站点专门发布番号信息再放上这些网盘的链接。例如在<a href=\"https://jav.h-era.org/storage-policy.html\" target=\"_blank\" rel=\"noopener\">jav.h-era.org</a>网站的储存策略里就介绍了它们在网盘上储存了17TB的数据。并且它们会同时上传三个不同的网盘以防止个别分卷失效。<br>javlibrary网站也有人会在留言区发布各种网盘链接。<br></p>\n<p>但是市面上此类的网盘很多，不同的发布者可能会使用不同的网盘，个人不可能每个网盘都开个会员(此类网盘的会员可是非常非常贵）。于是这个利益链条上又产生了一个利益链条。高会中转站。</p>\n<p>高会中转站是一个由你提交网盘文件地址，之后网站使用高级会员账号高速下载后分享文件给你的网站服务，此类网站的原理大概是网站购买了大部分此类网盘网站的高级会员，用户购买高会中转站的流量，网站后台使用高级会员账号下载完成后提供给用户一个自己服务器上的地址给用户高速下载。这类相当于共享高级会员的网站当然是返利类网盘网站声明禁止的。不过怎么盈利就靠网站怎么逃避网盘网站的监管和营销了。</p>\n<p>国外的高会中转站<a href=\"https://offcloud.com/?=5caf95ec\" target=\"_blank\" rel=\"noopener\">offcloud</a>据它们主页的数据它们至今储存了1.36PB的数据。它们的站点可以下载大部分收费网盘的资源，甚至还支持国内的百度网盘。还可以根据需求下载后由它们上传到google drive、onedrive等同步盘上去。至于收费大致就是按月10美元，按年5美元一个月。也大致就是一个vps的价格。<br><img src=\"/2018/03/01/记录新发现的事物，高会中转站/offcloud.png\" title=\"网盘价格\"><br>国内也有很多高会中转站，不过大多数都是二手贩子，网站做得也很简陋，但是国内这东西也刚刚传进来。之前大多数都是上某宝租个账号直接就开始下载，现在某宝严厉打击这类商品，以至于苹果礼品卡都不让出售了（说是有些礼品卡是用国外的黑卡刷出开的）。一切都才刚刚开始，</p>\n"},{"title":"配置 VPS 运行 Flask ","date":"2018-04-23T15:22:54.000Z","_content":"\n​\t话说之前因为自己很喜欢 [ACGN_STOCK](https://acgn-stock.com/) 这个网站，但是因为不喜欢上面 ”金管会“ 的一些规定，加上 自己非常喜欢类似 EVE 里面那个自由市场，很喜欢这种万物都可以自由交易的游戏。所以打算自己实现一个类似的网站。\n\n​\t因为自己之前的一个项目是 Falsk 框架的原因，所以打算用 Flask 框架和 Postgresql 数据库来实现这个网站。在看着教程一步一步架起一个后端后，就直接按照想法添加数据库中的表和字段了。由于这是自己第一个从头撸到尾的工程，所以踩了很多坑，类似数据库字段因为自己之前设计的不周到没考虑到，所以很多时候是写着写着数据库就又多了一个字段。但是摸爬滚打也实现了基本的样子，用户的注册登录，在市场浏览股票，股票页面的买卖交易。其中后端逻辑肯定有很多不完善的地方。但似乎感觉自己撸后端还是非常有成就感的。\n\n​\t在项目初步跑起来后就面临另一个问题，网站得跑在远程的服务器上，毕竟自己在本地写代码用的是 Falsk 自己的 server 。之前还完全没有尝试过在 VPS 上搭建跑起来过，于是在这里记录一下架设过程。\n\n​\t在 VPS 上通过 Gihub clone 整个项目，就得到了后端的所有代码，之后的安装 Python 所需要的库，Python 的插件可以通过\n\n```\npip install -r  requirements.txt \n```\n\n安装 requirements.txt 文件中项目说需要的所有库，非常方便。\n\n不过我们这个项目需要 Python3 ，Debian 上会自带 Python2 和 Python3 两个版本的 Python，但是默认的 pip 是 Python2 的，于是打算安装 pyenv 来实现多版本 Python 的管理。\n\n通过下面这个脚本实现 pyenv 的安装。\n\n```bash\ncurl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\n\n安装完 pyenv 后，shell 并不能识别 pyenv，因为系统的根目录里没有包含 pyenv 的目录。我们需要将pyenv 的目录添加进当前所使用的 bash 配置里。这里以 bash 为例子，zsh的配置配置文件为～/.zshrc\n\n```bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc‘’‘\n```\n\n之后用 source 命令使用新配置重启 base\n\n```bash\nsource ~/.bashrc\n```\n\n之后使用 pyenv 安装 3.5.4 的 Python，并将其设置为全局 Python 版本。\n\n- `pyenv install version` 安装，version 为对应的 Python 版本号，如 2.7.9；\n- `pyenv virtualenv 3.5.2 webapp-3.5.2` 以 3.5.2 版本创建虚拟环境；\n- `pyenv uninstall version` 删除 version 版本的 Python；\n- `pyenv commands` 列出所有命令；\n- `pyenv versions` 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；\n- `pyenv local 2.7.9` 设置局部版本\n- `pyenv which python` 查看当前 python 命令的路径；\n- `pyenv which pip` 查看当前 pip 命令的路径；\n\n 执行 pyenv install 3.5.4 后，安装失败 。提示没有 openssl， zlib。执行\n\n```bash\napt install openssl zlib*\n```\n\n安装完毕～ 撒花❀❀❀❀\n\n升级 pip 不然有些库安装不了\n\n```\npip install --upgrade pip\n```\n\n安装所需要的所有库\n\n```\npip install -r requirements.txt\n```\n\n在使用 gunicorn 部署 Falsk 应用前，得先安装 postgresql 和 redis。分别是关系式数据库和 nosql 数据库。用来储存网站所需要的信息和做爬虫缓存。\n\npostgresql 的安装就不多言了，安装完成后需要创建一个用户和数据库。这里可以用写好的 sql 文件直接执行创建数据库\n\n`psql stock -c \"\\i sql/schema.sql\"`\n\n确定创建的用户拥有数据库的所有权限。\n\n安装 redis-server。之后就可以用 gunicorn 部署 Flask 应用了。\n\n```\ngunicorn -b 0.0.0.0:80 run:app\n```\n\n run.py\n\n```python\n#!flask/bin/python\nfrom app import app\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n\n\n\n运行后很多字符错误。。。才发现每个文件开头的那句声明使用utf8的重要性。。。\n\n```\n# -*- coding: utf-8 -*\n```\n\n至此一个运行Python 后端的服务器就好了。访问 http://106.15.205.43/ 就可以看到。","source":"_posts/配置-VPS-运行-Flask.md","raw":"---\ntitle: '配置 VPS 运行 Flask '\ndate: 2018-04-23 23:22:54\ntags: Falsk VPS\n---\n\n​\t话说之前因为自己很喜欢 [ACGN_STOCK](https://acgn-stock.com/) 这个网站，但是因为不喜欢上面 ”金管会“ 的一些规定，加上 自己非常喜欢类似 EVE 里面那个自由市场，很喜欢这种万物都可以自由交易的游戏。所以打算自己实现一个类似的网站。\n\n​\t因为自己之前的一个项目是 Falsk 框架的原因，所以打算用 Flask 框架和 Postgresql 数据库来实现这个网站。在看着教程一步一步架起一个后端后，就直接按照想法添加数据库中的表和字段了。由于这是自己第一个从头撸到尾的工程，所以踩了很多坑，类似数据库字段因为自己之前设计的不周到没考虑到，所以很多时候是写着写着数据库就又多了一个字段。但是摸爬滚打也实现了基本的样子，用户的注册登录，在市场浏览股票，股票页面的买卖交易。其中后端逻辑肯定有很多不完善的地方。但似乎感觉自己撸后端还是非常有成就感的。\n\n​\t在项目初步跑起来后就面临另一个问题，网站得跑在远程的服务器上，毕竟自己在本地写代码用的是 Falsk 自己的 server 。之前还完全没有尝试过在 VPS 上搭建跑起来过，于是在这里记录一下架设过程。\n\n​\t在 VPS 上通过 Gihub clone 整个项目，就得到了后端的所有代码，之后的安装 Python 所需要的库，Python 的插件可以通过\n\n```\npip install -r  requirements.txt \n```\n\n安装 requirements.txt 文件中项目说需要的所有库，非常方便。\n\n不过我们这个项目需要 Python3 ，Debian 上会自带 Python2 和 Python3 两个版本的 Python，但是默认的 pip 是 Python2 的，于是打算安装 pyenv 来实现多版本 Python 的管理。\n\n通过下面这个脚本实现 pyenv 的安装。\n\n```bash\ncurl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\n\n安装完 pyenv 后，shell 并不能识别 pyenv，因为系统的根目录里没有包含 pyenv 的目录。我们需要将pyenv 的目录添加进当前所使用的 bash 配置里。这里以 bash 为例子，zsh的配置配置文件为～/.zshrc\n\n```bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc‘’‘\n```\n\n之后用 source 命令使用新配置重启 base\n\n```bash\nsource ~/.bashrc\n```\n\n之后使用 pyenv 安装 3.5.4 的 Python，并将其设置为全局 Python 版本。\n\n- `pyenv install version` 安装，version 为对应的 Python 版本号，如 2.7.9；\n- `pyenv virtualenv 3.5.2 webapp-3.5.2` 以 3.5.2 版本创建虚拟环境；\n- `pyenv uninstall version` 删除 version 版本的 Python；\n- `pyenv commands` 列出所有命令；\n- `pyenv versions` 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；\n- `pyenv local 2.7.9` 设置局部版本\n- `pyenv which python` 查看当前 python 命令的路径；\n- `pyenv which pip` 查看当前 pip 命令的路径；\n\n 执行 pyenv install 3.5.4 后，安装失败 。提示没有 openssl， zlib。执行\n\n```bash\napt install openssl zlib*\n```\n\n安装完毕～ 撒花❀❀❀❀\n\n升级 pip 不然有些库安装不了\n\n```\npip install --upgrade pip\n```\n\n安装所需要的所有库\n\n```\npip install -r requirements.txt\n```\n\n在使用 gunicorn 部署 Falsk 应用前，得先安装 postgresql 和 redis。分别是关系式数据库和 nosql 数据库。用来储存网站所需要的信息和做爬虫缓存。\n\npostgresql 的安装就不多言了，安装完成后需要创建一个用户和数据库。这里可以用写好的 sql 文件直接执行创建数据库\n\n`psql stock -c \"\\i sql/schema.sql\"`\n\n确定创建的用户拥有数据库的所有权限。\n\n安装 redis-server。之后就可以用 gunicorn 部署 Flask 应用了。\n\n```\ngunicorn -b 0.0.0.0:80 run:app\n```\n\n run.py\n\n```python\n#!flask/bin/python\nfrom app import app\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n\n\n\n运行后很多字符错误。。。才发现每个文件开头的那句声明使用utf8的重要性。。。\n\n```\n# -*- coding: utf-8 -*\n```\n\n至此一个运行Python 后端的服务器就好了。访问 http://106.15.205.43/ 就可以看到。","slug":"配置-VPS-运行-Flask","published":1,"updated":"2018-07-25T13:30:08.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknrd000wgvd9d24zj737","content":"<p>​    话说之前因为自己很喜欢 <a href=\"https://acgn-stock.com/\" target=\"_blank\" rel=\"noopener\">ACGN_STOCK</a> 这个网站，但是因为不喜欢上面 ”金管会“ 的一些规定，加上 自己非常喜欢类似 EVE 里面那个自由市场，很喜欢这种万物都可以自由交易的游戏。所以打算自己实现一个类似的网站。</p>\n<p>​    因为自己之前的一个项目是 Falsk 框架的原因，所以打算用 Flask 框架和 Postgresql 数据库来实现这个网站。在看着教程一步一步架起一个后端后，就直接按照想法添加数据库中的表和字段了。由于这是自己第一个从头撸到尾的工程，所以踩了很多坑，类似数据库字段因为自己之前设计的不周到没考虑到，所以很多时候是写着写着数据库就又多了一个字段。但是摸爬滚打也实现了基本的样子，用户的注册登录，在市场浏览股票，股票页面的买卖交易。其中后端逻辑肯定有很多不完善的地方。但似乎感觉自己撸后端还是非常有成就感的。</p>\n<p>​    在项目初步跑起来后就面临另一个问题，网站得跑在远程的服务器上，毕竟自己在本地写代码用的是 Falsk 自己的 server 。之前还完全没有尝试过在 VPS 上搭建跑起来过，于是在这里记录一下架设过程。</p>\n<p>​    在 VPS 上通过 Gihub clone 整个项目，就得到了后端的所有代码，之后的安装 Python 所需要的库，Python 的插件可以通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r  requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装 requirements.txt 文件中项目说需要的所有库，非常方便。</p>\n<p>不过我们这个项目需要 Python3 ，Debian 上会自带 Python2 和 Python3 两个版本的 Python，但是默认的 pip 是 Python2 的，于是打算安装 pyenv 来实现多版本 Python 的管理。</p>\n<p>通过下面这个脚本实现 pyenv 的安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>\n<p>安装完 pyenv 后，shell 并不能识别 pyenv，因为系统的根目录里没有包含 pyenv 的目录。我们需要将pyenv 的目录添加进当前所使用的 bash 配置里。这里以 bash 为例子，zsh的配置配置文件为～/.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc‘’‘</span><br></pre></td></tr></table></figure>\n<p>之后用 source 命令使用新配置重启 base</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>之后使用 pyenv 安装 3.5.4 的 Python，并将其设置为全局 Python 版本。</p>\n<ul>\n<li><code>pyenv install version</code> 安装，version 为对应的 Python 版本号，如 2.7.9；</li>\n<li><code>pyenv virtualenv 3.5.2 webapp-3.5.2</code> 以 3.5.2 版本创建虚拟环境；</li>\n<li><code>pyenv uninstall version</code> 删除 version 版本的 Python；</li>\n<li><code>pyenv commands</code> 列出所有命令；</li>\n<li><code>pyenv versions</code> 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；</li>\n<li><code>pyenv local 2.7.9</code> 设置局部版本</li>\n<li><code>pyenv which python</code> 查看当前 python 命令的路径；</li>\n<li><p><code>pyenv which pip</code> 查看当前 pip 命令的路径；</p>\n<p>执行 pyenv install 3.5.4 后，安装失败 。提示没有 openssl， zlib。执行</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install openssl zlib*</span><br></pre></td></tr></table></figure>\n<p>安装完毕～ 撒花❀❀❀❀</p>\n<p>升级 pip 不然有些库安装不了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n<p>安装所需要的所有库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>在使用 gunicorn 部署 Falsk 应用前，得先安装 postgresql 和 redis。分别是关系式数据库和 nosql 数据库。用来储存网站所需要的信息和做爬虫缓存。</p>\n<p>postgresql 的安装就不多言了，安装完成后需要创建一个用户和数据库。这里可以用写好的 sql 文件直接执行创建数据库</p>\n<p><code>psql stock -c &quot;\\i sql/schema.sql&quot;</code></p>\n<p>确定创建的用户拥有数据库的所有权限。</p>\n<p>安装 redis-server。之后就可以用 gunicorn 部署 Flask 应用了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn -b 0.0.0.0:80 run:app</span><br></pre></td></tr></table></figure>\n<p> run.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!flask/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>运行后很多字符错误。。。才发现每个文件开头的那句声明使用utf8的重要性。。。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*</span><br></pre></td></tr></table></figure>\n<p>至此一个运行Python 后端的服务器就好了。访问 <a href=\"http://106.15.205.43/\" target=\"_blank\" rel=\"noopener\">http://106.15.205.43/</a> 就可以看到。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    话说之前因为自己很喜欢 <a href=\"https://acgn-stock.com/\" target=\"_blank\" rel=\"noopener\">ACGN_STOCK</a> 这个网站，但是因为不喜欢上面 ”金管会“ 的一些规定，加上 自己非常喜欢类似 EVE 里面那个自由市场，很喜欢这种万物都可以自由交易的游戏。所以打算自己实现一个类似的网站。</p>\n<p>​    因为自己之前的一个项目是 Falsk 框架的原因，所以打算用 Flask 框架和 Postgresql 数据库来实现这个网站。在看着教程一步一步架起一个后端后，就直接按照想法添加数据库中的表和字段了。由于这是自己第一个从头撸到尾的工程，所以踩了很多坑，类似数据库字段因为自己之前设计的不周到没考虑到，所以很多时候是写着写着数据库就又多了一个字段。但是摸爬滚打也实现了基本的样子，用户的注册登录，在市场浏览股票，股票页面的买卖交易。其中后端逻辑肯定有很多不完善的地方。但似乎感觉自己撸后端还是非常有成就感的。</p>\n<p>​    在项目初步跑起来后就面临另一个问题，网站得跑在远程的服务器上，毕竟自己在本地写代码用的是 Falsk 自己的 server 。之前还完全没有尝试过在 VPS 上搭建跑起来过，于是在这里记录一下架设过程。</p>\n<p>​    在 VPS 上通过 Gihub clone 整个项目，就得到了后端的所有代码，之后的安装 Python 所需要的库，Python 的插件可以通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r  requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装 requirements.txt 文件中项目说需要的所有库，非常方便。</p>\n<p>不过我们这个项目需要 Python3 ，Debian 上会自带 Python2 和 Python3 两个版本的 Python，但是默认的 pip 是 Python2 的，于是打算安装 pyenv 来实现多版本 Python 的管理。</p>\n<p>通过下面这个脚本实现 pyenv 的安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>\n<p>安装完 pyenv 后，shell 并不能识别 pyenv，因为系统的根目录里没有包含 pyenv 的目录。我们需要将pyenv 的目录添加进当前所使用的 bash 配置里。这里以 bash 为例子，zsh的配置配置文件为～/.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc‘’‘</span><br></pre></td></tr></table></figure>\n<p>之后用 source 命令使用新配置重启 base</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>之后使用 pyenv 安装 3.5.4 的 Python，并将其设置为全局 Python 版本。</p>\n<ul>\n<li><code>pyenv install version</code> 安装，version 为对应的 Python 版本号，如 2.7.9；</li>\n<li><code>pyenv virtualenv 3.5.2 webapp-3.5.2</code> 以 3.5.2 版本创建虚拟环境；</li>\n<li><code>pyenv uninstall version</code> 删除 version 版本的 Python；</li>\n<li><code>pyenv commands</code> 列出所有命令；</li>\n<li><code>pyenv versions</code> 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；</li>\n<li><code>pyenv local 2.7.9</code> 设置局部版本</li>\n<li><code>pyenv which python</code> 查看当前 python 命令的路径；</li>\n<li><p><code>pyenv which pip</code> 查看当前 pip 命令的路径；</p>\n<p>执行 pyenv install 3.5.4 后，安装失败 。提示没有 openssl， zlib。执行</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install openssl zlib*</span><br></pre></td></tr></table></figure>\n<p>安装完毕～ 撒花❀❀❀❀</p>\n<p>升级 pip 不然有些库安装不了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n<p>安装所需要的所有库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>在使用 gunicorn 部署 Falsk 应用前，得先安装 postgresql 和 redis。分别是关系式数据库和 nosql 数据库。用来储存网站所需要的信息和做爬虫缓存。</p>\n<p>postgresql 的安装就不多言了，安装完成后需要创建一个用户和数据库。这里可以用写好的 sql 文件直接执行创建数据库</p>\n<p><code>psql stock -c &quot;\\i sql/schema.sql&quot;</code></p>\n<p>确定创建的用户拥有数据库的所有权限。</p>\n<p>安装 redis-server。之后就可以用 gunicorn 部署 Flask 应用了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn -b 0.0.0.0:80 run:app</span><br></pre></td></tr></table></figure>\n<p> run.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!flask/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>运行后很多字符错误。。。才发现每个文件开头的那句声明使用utf8的重要性。。。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*</span><br></pre></td></tr></table></figure>\n<p>至此一个运行Python 后端的服务器就好了。访问 <a href=\"http://106.15.205.43/\" target=\"_blank\" rel=\"noopener\">http://106.15.205.43/</a> 就可以看到。</p>\n"},{"title":"轻文面试经历","date":"2018-03-14T05:15:13.000Z","_content":"二月份寒假在家的时候看到V2EX上面有轻文的招聘贴，自己感觉十分心水。就抱着试一试的心态尝试满足他的职位描述去学习。我在三月初的时候在BOSS招聘平台上向它们投递了一份简历，之后就沉寂了一段时间。直到我以为我的简历直接被筛选掉心灰意冷后3月12号的中午它们BOSS直聘的人事专员给我发消息问我什么时候能来面试。我第一反应是能不能给一段时间刷一下题，于是考虑周六，但是周六人家不上班啊，于是周五，感觉周五下午去面试不太好，于是就发消息问周四下午行不行，那时候我还是思想斗争了很久。没想到人家第二天直接问我今天有空吗。我回答了有，于是在中午看了一下TCP的三次握手和四次挥手就匆匆从学校出发了。由于是第一次面试对面试总有一种恐惧感，总怕我不能很好的表达清楚意思，大脑一片空白，事实证明我比我想象的还要差。\n经过一次公交车中转后我到达了光谷软件园，那个地方比想象中的还要偏僻。路上随处都在修高架，到处都是工程车。公交车直接在马路上到站，下车就是和车辆在一条马路上相错行走，因为周围都是围起来的工地。在腾讯地图的指引下找到了轻文公司所在的大楼，稍微在下面等待了一下就上去了，上去后发现它们公司还是很明显的，就是大门需要刷工牌，于是我和他们外面打电话准备进去的员工说了一下我是来应聘的一起进去了。\n进公司后发现它们公司也不是很大，大概十几二十个人在一起办公，让我等待了一下由一个人要了一份简历之后就带我进了一个办公室。之后就开始面试了。\n面试开始考官还问我怎么那么早就开始找实习。。。我说现在不都开始春招了么，而且我也确定不考研究生了，可不就出来找实习了。之后问了我一些问题，感觉都还是很基础的，但是我答得不是很好。感觉都没打出来，也看得出啦他甚不得满意，之后就是叫我回去等消息了，我感觉是GG了。出来一看才十几分钟。彻底凉凉了。。作为学习这里还是吧记忆中问到的问题彻底搞明白，在这里记录一下吧。\n##### 快排实现原理。\n从数列中挑出一个元素，使得它左边的元素都比它小，右边的元素都比他大。\n之后在这个元素的左边和右边的分区递归执行上述操作，直至左右区间相等。\n##### 链表插入操作的实现\n单向链表只需要使得要插入的节点的next指针指向插入位置的下一个节点，插入位置的前节点的next指针指向插入的节点。\n双向链表需要使得插入位置的下一个节点的pre指针指向要插入的节点，要插入节点的next指针指向插入位置的下一个节点，插入位置的上一个节点的next指针指向要插入的节点，要插入节点的pre指针指向插入位置的上一个节点。（我觉得这种问题我觉得交流起来很麻烦，远不如在纸上写得方便清楚，但是也凸显了自己平时很少尝试用说出来的方式描述自己的思路）\n##### 反向迭代一个列表\n我的第一思路是列表的reverse方法，但是后面是说道切片感觉考官应该想要的是\\[::-1]\n三个参数，左区间，右区间，步长。区间是左闭右开。\n(自己确实没这么用过，这里还迷糊了一阵，还以为是spilt方法。。。)\n##### 知道浅拷贝和深拷贝吗？\n这里下意识的说知道，但是却不能很好的表达出来，大抵也是自己理解不深吧。\n浅拷贝只拷贝父对象，不会拷贝对象内部的元素\n浅拷贝产生的新对象中的可变对象的值发生改变会对原对象的值产生副作用，因为仅仅是拷贝了引用。\n深拷贝会拷贝对象及其子元素。\n##### 知道可变对象和不可变对象吗？\n这里我回答了知道，事实是我只是知道在函数使用传参的时候如果函数里修改了参数和的值可变对象的是在外部也会改变。(感觉很像作用域，那时候满脑子是set啥的。。。感觉左边变量右边一个值啥的都是对象，用久了都忘记还有int， string之类的类型了。)\n可变对象有列表(list)和字典(dict)\n不可变对象有数值类，字符串，元组（tuple)，集合(set)\n##### 迭代的几种方法\n这问题问得我一脸懵逼，我不知道问的是什么\n开始我回答说不是for in么，还有个items方法。\n后面考官解释了一下还是迷迷糊糊的，\n类似for key, value in dict.items(): 这样？\n但是还想问的是yield？\n##### 你了解元类吗？\n直说了我不了解，接下来也没问了。\ntype,Python里类都是动态创建的，type()函数可以返回一个对象的类型，也可以创建一个新的类型。传入类名，继承的父类和方法名称和函数绑定\n##### 数据库底层是怎么实现的\nB树或B+树\n二次提问知道B树或B+树是怎么样的吗就蔫了。\nB树是一颗节点内可以拥有n个数据而拥有n+1个子女的树，其中子树下的元素会比父节点左边的元素大比右边的元素小。B树中所有叶节点都在同一层\nB+树是B树的一个变种，其数据只存在叶节点中，\t其他节点只是在搜索中用来指引到正确节点，相邻叶节点顺序链接\n##### 红黑树了解吗？\n在我回答不了解后考官说了红黑树是一颗自平衡的二叉查找树。\n事后了解了一下，红黑树并不追求完全的平衡，但是在删除操作AVL需要旋转的量级为O(logN)，而红黑树至多需要三次操作就可以。所以统计性能要比AVL树要好。\n##### 说一下二叉树的遍历和三种遍历的优点\n但是只知道前序遍历，中序遍历，后序遍历。完全没想过他们之间有什么优点。\n前序遍历在第一次遍历到节点时就执行操作，一般是想执行操作可选用。\n中序遍历对与二分搜索树来说操作顺序符合从小到大（或从大到小）的顺序，遍历输出排序好的结果需要使用中序遍历。\n后续遍历特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点。\n\n##### 了解RESTful吗？谈一下你的看法\n我说了用URL表示资源的地址，用HTTP方法表示对资源的操作，返回的状态表示操作的结果。\n##### 谈下你对单元测试的理解和看法\n我也就只说了单元测试对开发的方便，如果今后会修改一些代码也只需要跑一下测试。\n##### 知道设计模式吗？\n坦白不怎么了解，虽然知道职务描述上写要知道设计模式，自己也看了一些，可是也没实际用过。不了解工程上的细节。。。\n\n\n最后才发现我即使是在一些开放性的问题上，谈的也很少，很多时候都是说到一般突然停下来，想很久。一般这个时候我都是在考虑用什么词描述比较好，可是这在对方看来就会很尴尬。。。今后或许在写代码的时候也应该使用小黄鸭调试法。尽量让自己的思路能够说出来。\n后面考官了说了自己对面对对象那方面了解太少了，毕竟Python是门面对对象的语言。自己确实平常在码代码的时候不会特别注重这方面的东西。不管怎么说再接再厉吧。要不毕业后再试一下？","source":"_posts/轻文面试经历.md","raw":"---\ntitle: 轻文面试经历\ndate: 2018-03-14 13:15:13\ntags: 面试\n---\n二月份寒假在家的时候看到V2EX上面有轻文的招聘贴，自己感觉十分心水。就抱着试一试的心态尝试满足他的职位描述去学习。我在三月初的时候在BOSS招聘平台上向它们投递了一份简历，之后就沉寂了一段时间。直到我以为我的简历直接被筛选掉心灰意冷后3月12号的中午它们BOSS直聘的人事专员给我发消息问我什么时候能来面试。我第一反应是能不能给一段时间刷一下题，于是考虑周六，但是周六人家不上班啊，于是周五，感觉周五下午去面试不太好，于是就发消息问周四下午行不行，那时候我还是思想斗争了很久。没想到人家第二天直接问我今天有空吗。我回答了有，于是在中午看了一下TCP的三次握手和四次挥手就匆匆从学校出发了。由于是第一次面试对面试总有一种恐惧感，总怕我不能很好的表达清楚意思，大脑一片空白，事实证明我比我想象的还要差。\n经过一次公交车中转后我到达了光谷软件园，那个地方比想象中的还要偏僻。路上随处都在修高架，到处都是工程车。公交车直接在马路上到站，下车就是和车辆在一条马路上相错行走，因为周围都是围起来的工地。在腾讯地图的指引下找到了轻文公司所在的大楼，稍微在下面等待了一下就上去了，上去后发现它们公司还是很明显的，就是大门需要刷工牌，于是我和他们外面打电话准备进去的员工说了一下我是来应聘的一起进去了。\n进公司后发现它们公司也不是很大，大概十几二十个人在一起办公，让我等待了一下由一个人要了一份简历之后就带我进了一个办公室。之后就开始面试了。\n面试开始考官还问我怎么那么早就开始找实习。。。我说现在不都开始春招了么，而且我也确定不考研究生了，可不就出来找实习了。之后问了我一些问题，感觉都还是很基础的，但是我答得不是很好。感觉都没打出来，也看得出啦他甚不得满意，之后就是叫我回去等消息了，我感觉是GG了。出来一看才十几分钟。彻底凉凉了。。作为学习这里还是吧记忆中问到的问题彻底搞明白，在这里记录一下吧。\n##### 快排实现原理。\n从数列中挑出一个元素，使得它左边的元素都比它小，右边的元素都比他大。\n之后在这个元素的左边和右边的分区递归执行上述操作，直至左右区间相等。\n##### 链表插入操作的实现\n单向链表只需要使得要插入的节点的next指针指向插入位置的下一个节点，插入位置的前节点的next指针指向插入的节点。\n双向链表需要使得插入位置的下一个节点的pre指针指向要插入的节点，要插入节点的next指针指向插入位置的下一个节点，插入位置的上一个节点的next指针指向要插入的节点，要插入节点的pre指针指向插入位置的上一个节点。（我觉得这种问题我觉得交流起来很麻烦，远不如在纸上写得方便清楚，但是也凸显了自己平时很少尝试用说出来的方式描述自己的思路）\n##### 反向迭代一个列表\n我的第一思路是列表的reverse方法，但是后面是说道切片感觉考官应该想要的是\\[::-1]\n三个参数，左区间，右区间，步长。区间是左闭右开。\n(自己确实没这么用过，这里还迷糊了一阵，还以为是spilt方法。。。)\n##### 知道浅拷贝和深拷贝吗？\n这里下意识的说知道，但是却不能很好的表达出来，大抵也是自己理解不深吧。\n浅拷贝只拷贝父对象，不会拷贝对象内部的元素\n浅拷贝产生的新对象中的可变对象的值发生改变会对原对象的值产生副作用，因为仅仅是拷贝了引用。\n深拷贝会拷贝对象及其子元素。\n##### 知道可变对象和不可变对象吗？\n这里我回答了知道，事实是我只是知道在函数使用传参的时候如果函数里修改了参数和的值可变对象的是在外部也会改变。(感觉很像作用域，那时候满脑子是set啥的。。。感觉左边变量右边一个值啥的都是对象，用久了都忘记还有int， string之类的类型了。)\n可变对象有列表(list)和字典(dict)\n不可变对象有数值类，字符串，元组（tuple)，集合(set)\n##### 迭代的几种方法\n这问题问得我一脸懵逼，我不知道问的是什么\n开始我回答说不是for in么，还有个items方法。\n后面考官解释了一下还是迷迷糊糊的，\n类似for key, value in dict.items(): 这样？\n但是还想问的是yield？\n##### 你了解元类吗？\n直说了我不了解，接下来也没问了。\ntype,Python里类都是动态创建的，type()函数可以返回一个对象的类型，也可以创建一个新的类型。传入类名，继承的父类和方法名称和函数绑定\n##### 数据库底层是怎么实现的\nB树或B+树\n二次提问知道B树或B+树是怎么样的吗就蔫了。\nB树是一颗节点内可以拥有n个数据而拥有n+1个子女的树，其中子树下的元素会比父节点左边的元素大比右边的元素小。B树中所有叶节点都在同一层\nB+树是B树的一个变种，其数据只存在叶节点中，\t其他节点只是在搜索中用来指引到正确节点，相邻叶节点顺序链接\n##### 红黑树了解吗？\n在我回答不了解后考官说了红黑树是一颗自平衡的二叉查找树。\n事后了解了一下，红黑树并不追求完全的平衡，但是在删除操作AVL需要旋转的量级为O(logN)，而红黑树至多需要三次操作就可以。所以统计性能要比AVL树要好。\n##### 说一下二叉树的遍历和三种遍历的优点\n但是只知道前序遍历，中序遍历，后序遍历。完全没想过他们之间有什么优点。\n前序遍历在第一次遍历到节点时就执行操作，一般是想执行操作可选用。\n中序遍历对与二分搜索树来说操作顺序符合从小到大（或从大到小）的顺序，遍历输出排序好的结果需要使用中序遍历。\n后续遍历特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点。\n\n##### 了解RESTful吗？谈一下你的看法\n我说了用URL表示资源的地址，用HTTP方法表示对资源的操作，返回的状态表示操作的结果。\n##### 谈下你对单元测试的理解和看法\n我也就只说了单元测试对开发的方便，如果今后会修改一些代码也只需要跑一下测试。\n##### 知道设计模式吗？\n坦白不怎么了解，虽然知道职务描述上写要知道设计模式，自己也看了一些，可是也没实际用过。不了解工程上的细节。。。\n\n\n最后才发现我即使是在一些开放性的问题上，谈的也很少，很多时候都是说到一般突然停下来，想很久。一般这个时候我都是在考虑用什么词描述比较好，可是这在对方看来就会很尴尬。。。今后或许在写代码的时候也应该使用小黄鸭调试法。尽量让自己的思路能够说出来。\n后面考官了说了自己对面对对象那方面了解太少了，毕竟Python是门面对对象的语言。自己确实平常在码代码的时候不会特别注重这方面的东西。不管怎么说再接再厉吧。要不毕业后再试一下？","slug":"轻文面试经历","published":1,"updated":"2018-07-25T13:30:08.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknre000ygvd9gog5atgf","content":"<p>二月份寒假在家的时候看到V2EX上面有轻文的招聘贴，自己感觉十分心水。就抱着试一试的心态尝试满足他的职位描述去学习。我在三月初的时候在BOSS招聘平台上向它们投递了一份简历，之后就沉寂了一段时间。直到我以为我的简历直接被筛选掉心灰意冷后3月12号的中午它们BOSS直聘的人事专员给我发消息问我什么时候能来面试。我第一反应是能不能给一段时间刷一下题，于是考虑周六，但是周六人家不上班啊，于是周五，感觉周五下午去面试不太好，于是就发消息问周四下午行不行，那时候我还是思想斗争了很久。没想到人家第二天直接问我今天有空吗。我回答了有，于是在中午看了一下TCP的三次握手和四次挥手就匆匆从学校出发了。由于是第一次面试对面试总有一种恐惧感，总怕我不能很好的表达清楚意思，大脑一片空白，事实证明我比我想象的还要差。<br>经过一次公交车中转后我到达了光谷软件园，那个地方比想象中的还要偏僻。路上随处都在修高架，到处都是工程车。公交车直接在马路上到站，下车就是和车辆在一条马路上相错行走，因为周围都是围起来的工地。在腾讯地图的指引下找到了轻文公司所在的大楼，稍微在下面等待了一下就上去了，上去后发现它们公司还是很明显的，就是大门需要刷工牌，于是我和他们外面打电话准备进去的员工说了一下我是来应聘的一起进去了。<br>进公司后发现它们公司也不是很大，大概十几二十个人在一起办公，让我等待了一下由一个人要了一份简历之后就带我进了一个办公室。之后就开始面试了。<br>面试开始考官还问我怎么那么早就开始找实习。。。我说现在不都开始春招了么，而且我也确定不考研究生了，可不就出来找实习了。之后问了我一些问题，感觉都还是很基础的，但是我答得不是很好。感觉都没打出来，也看得出啦他甚不得满意，之后就是叫我回去等消息了，我感觉是GG了。出来一看才十几分钟。彻底凉凉了。。作为学习这里还是吧记忆中问到的问题彻底搞明白，在这里记录一下吧。</p>\n<h5 id=\"快排实现原理。\"><a href=\"#快排实现原理。\" class=\"headerlink\" title=\"快排实现原理。\"></a>快排实现原理。</h5><p>从数列中挑出一个元素，使得它左边的元素都比它小，右边的元素都比他大。<br>之后在这个元素的左边和右边的分区递归执行上述操作，直至左右区间相等。</p>\n<h5 id=\"链表插入操作的实现\"><a href=\"#链表插入操作的实现\" class=\"headerlink\" title=\"链表插入操作的实现\"></a>链表插入操作的实现</h5><p>单向链表只需要使得要插入的节点的next指针指向插入位置的下一个节点，插入位置的前节点的next指针指向插入的节点。<br>双向链表需要使得插入位置的下一个节点的pre指针指向要插入的节点，要插入节点的next指针指向插入位置的下一个节点，插入位置的上一个节点的next指针指向要插入的节点，要插入节点的pre指针指向插入位置的上一个节点。（我觉得这种问题我觉得交流起来很麻烦，远不如在纸上写得方便清楚，但是也凸显了自己平时很少尝试用说出来的方式描述自己的思路）</p>\n<h5 id=\"反向迭代一个列表\"><a href=\"#反向迭代一个列表\" class=\"headerlink\" title=\"反向迭代一个列表\"></a>反向迭代一个列表</h5><p>我的第一思路是列表的reverse方法，但是后面是说道切片感觉考官应该想要的是[::-1]<br>三个参数，左区间，右区间，步长。区间是左闭右开。<br>(自己确实没这么用过，这里还迷糊了一阵，还以为是spilt方法。。。)</p>\n<h5 id=\"知道浅拷贝和深拷贝吗？\"><a href=\"#知道浅拷贝和深拷贝吗？\" class=\"headerlink\" title=\"知道浅拷贝和深拷贝吗？\"></a>知道浅拷贝和深拷贝吗？</h5><p>这里下意识的说知道，但是却不能很好的表达出来，大抵也是自己理解不深吧。<br>浅拷贝只拷贝父对象，不会拷贝对象内部的元素<br>浅拷贝产生的新对象中的可变对象的值发生改变会对原对象的值产生副作用，因为仅仅是拷贝了引用。<br>深拷贝会拷贝对象及其子元素。</p>\n<h5 id=\"知道可变对象和不可变对象吗？\"><a href=\"#知道可变对象和不可变对象吗？\" class=\"headerlink\" title=\"知道可变对象和不可变对象吗？\"></a>知道可变对象和不可变对象吗？</h5><p>这里我回答了知道，事实是我只是知道在函数使用传参的时候如果函数里修改了参数和的值可变对象的是在外部也会改变。(感觉很像作用域，那时候满脑子是set啥的。。。感觉左边变量右边一个值啥的都是对象，用久了都忘记还有int， string之类的类型了。)<br>可变对象有列表(list)和字典(dict)<br>不可变对象有数值类，字符串，元组（tuple)，集合(set)</p>\n<h5 id=\"迭代的几种方法\"><a href=\"#迭代的几种方法\" class=\"headerlink\" title=\"迭代的几种方法\"></a>迭代的几种方法</h5><p>这问题问得我一脸懵逼，我不知道问的是什么<br>开始我回答说不是for in么，还有个items方法。<br>后面考官解释了一下还是迷迷糊糊的，<br>类似for key, value in dict.items(): 这样？<br>但是还想问的是yield？</p>\n<h5 id=\"你了解元类吗？\"><a href=\"#你了解元类吗？\" class=\"headerlink\" title=\"你了解元类吗？\"></a>你了解元类吗？</h5><p>直说了我不了解，接下来也没问了。<br>type,Python里类都是动态创建的，type()函数可以返回一个对象的类型，也可以创建一个新的类型。传入类名，继承的父类和方法名称和函数绑定</p>\n<h5 id=\"数据库底层是怎么实现的\"><a href=\"#数据库底层是怎么实现的\" class=\"headerlink\" title=\"数据库底层是怎么实现的\"></a>数据库底层是怎么实现的</h5><p>B树或B+树<br>二次提问知道B树或B+树是怎么样的吗就蔫了。<br>B树是一颗节点内可以拥有n个数据而拥有n+1个子女的树，其中子树下的元素会比父节点左边的元素大比右边的元素小。B树中所有叶节点都在同一层<br>B+树是B树的一个变种，其数据只存在叶节点中，    其他节点只是在搜索中用来指引到正确节点，相邻叶节点顺序链接</p>\n<h5 id=\"红黑树了解吗？\"><a href=\"#红黑树了解吗？\" class=\"headerlink\" title=\"红黑树了解吗？\"></a>红黑树了解吗？</h5><p>在我回答不了解后考官说了红黑树是一颗自平衡的二叉查找树。<br>事后了解了一下，红黑树并不追求完全的平衡，但是在删除操作AVL需要旋转的量级为O(logN)，而红黑树至多需要三次操作就可以。所以统计性能要比AVL树要好。</p>\n<h5 id=\"说一下二叉树的遍历和三种遍历的优点\"><a href=\"#说一下二叉树的遍历和三种遍历的优点\" class=\"headerlink\" title=\"说一下二叉树的遍历和三种遍历的优点\"></a>说一下二叉树的遍历和三种遍历的优点</h5><p>但是只知道前序遍历，中序遍历，后序遍历。完全没想过他们之间有什么优点。<br>前序遍历在第一次遍历到节点时就执行操作，一般是想执行操作可选用。<br>中序遍历对与二分搜索树来说操作顺序符合从小到大（或从大到小）的顺序，遍历输出排序好的结果需要使用中序遍历。<br>后续遍历特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点。</p>\n<h5 id=\"了解RESTful吗？谈一下你的看法\"><a href=\"#了解RESTful吗？谈一下你的看法\" class=\"headerlink\" title=\"了解RESTful吗？谈一下你的看法\"></a>了解RESTful吗？谈一下你的看法</h5><p>我说了用URL表示资源的地址，用HTTP方法表示对资源的操作，返回的状态表示操作的结果。</p>\n<h5 id=\"谈下你对单元测试的理解和看法\"><a href=\"#谈下你对单元测试的理解和看法\" class=\"headerlink\" title=\"谈下你对单元测试的理解和看法\"></a>谈下你对单元测试的理解和看法</h5><p>我也就只说了单元测试对开发的方便，如果今后会修改一些代码也只需要跑一下测试。</p>\n<h5 id=\"知道设计模式吗？\"><a href=\"#知道设计模式吗？\" class=\"headerlink\" title=\"知道设计模式吗？\"></a>知道设计模式吗？</h5><p>坦白不怎么了解，虽然知道职务描述上写要知道设计模式，自己也看了一些，可是也没实际用过。不了解工程上的细节。。。</p>\n<p>最后才发现我即使是在一些开放性的问题上，谈的也很少，很多时候都是说到一般突然停下来，想很久。一般这个时候我都是在考虑用什么词描述比较好，可是这在对方看来就会很尴尬。。。今后或许在写代码的时候也应该使用小黄鸭调试法。尽量让自己的思路能够说出来。<br>后面考官了说了自己对面对对象那方面了解太少了，毕竟Python是门面对对象的语言。自己确实平常在码代码的时候不会特别注重这方面的东西。不管怎么说再接再厉吧。要不毕业后再试一下？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>二月份寒假在家的时候看到V2EX上面有轻文的招聘贴，自己感觉十分心水。就抱着试一试的心态尝试满足他的职位描述去学习。我在三月初的时候在BOSS招聘平台上向它们投递了一份简历，之后就沉寂了一段时间。直到我以为我的简历直接被筛选掉心灰意冷后3月12号的中午它们BOSS直聘的人事专员给我发消息问我什么时候能来面试。我第一反应是能不能给一段时间刷一下题，于是考虑周六，但是周六人家不上班啊，于是周五，感觉周五下午去面试不太好，于是就发消息问周四下午行不行，那时候我还是思想斗争了很久。没想到人家第二天直接问我今天有空吗。我回答了有，于是在中午看了一下TCP的三次握手和四次挥手就匆匆从学校出发了。由于是第一次面试对面试总有一种恐惧感，总怕我不能很好的表达清楚意思，大脑一片空白，事实证明我比我想象的还要差。<br>经过一次公交车中转后我到达了光谷软件园，那个地方比想象中的还要偏僻。路上随处都在修高架，到处都是工程车。公交车直接在马路上到站，下车就是和车辆在一条马路上相错行走，因为周围都是围起来的工地。在腾讯地图的指引下找到了轻文公司所在的大楼，稍微在下面等待了一下就上去了，上去后发现它们公司还是很明显的，就是大门需要刷工牌，于是我和他们外面打电话准备进去的员工说了一下我是来应聘的一起进去了。<br>进公司后发现它们公司也不是很大，大概十几二十个人在一起办公，让我等待了一下由一个人要了一份简历之后就带我进了一个办公室。之后就开始面试了。<br>面试开始考官还问我怎么那么早就开始找实习。。。我说现在不都开始春招了么，而且我也确定不考研究生了，可不就出来找实习了。之后问了我一些问题，感觉都还是很基础的，但是我答得不是很好。感觉都没打出来，也看得出啦他甚不得满意，之后就是叫我回去等消息了，我感觉是GG了。出来一看才十几分钟。彻底凉凉了。。作为学习这里还是吧记忆中问到的问题彻底搞明白，在这里记录一下吧。</p>\n<h5 id=\"快排实现原理。\"><a href=\"#快排实现原理。\" class=\"headerlink\" title=\"快排实现原理。\"></a>快排实现原理。</h5><p>从数列中挑出一个元素，使得它左边的元素都比它小，右边的元素都比他大。<br>之后在这个元素的左边和右边的分区递归执行上述操作，直至左右区间相等。</p>\n<h5 id=\"链表插入操作的实现\"><a href=\"#链表插入操作的实现\" class=\"headerlink\" title=\"链表插入操作的实现\"></a>链表插入操作的实现</h5><p>单向链表只需要使得要插入的节点的next指针指向插入位置的下一个节点，插入位置的前节点的next指针指向插入的节点。<br>双向链表需要使得插入位置的下一个节点的pre指针指向要插入的节点，要插入节点的next指针指向插入位置的下一个节点，插入位置的上一个节点的next指针指向要插入的节点，要插入节点的pre指针指向插入位置的上一个节点。（我觉得这种问题我觉得交流起来很麻烦，远不如在纸上写得方便清楚，但是也凸显了自己平时很少尝试用说出来的方式描述自己的思路）</p>\n<h5 id=\"反向迭代一个列表\"><a href=\"#反向迭代一个列表\" class=\"headerlink\" title=\"反向迭代一个列表\"></a>反向迭代一个列表</h5><p>我的第一思路是列表的reverse方法，但是后面是说道切片感觉考官应该想要的是[::-1]<br>三个参数，左区间，右区间，步长。区间是左闭右开。<br>(自己确实没这么用过，这里还迷糊了一阵，还以为是spilt方法。。。)</p>\n<h5 id=\"知道浅拷贝和深拷贝吗？\"><a href=\"#知道浅拷贝和深拷贝吗？\" class=\"headerlink\" title=\"知道浅拷贝和深拷贝吗？\"></a>知道浅拷贝和深拷贝吗？</h5><p>这里下意识的说知道，但是却不能很好的表达出来，大抵也是自己理解不深吧。<br>浅拷贝只拷贝父对象，不会拷贝对象内部的元素<br>浅拷贝产生的新对象中的可变对象的值发生改变会对原对象的值产生副作用，因为仅仅是拷贝了引用。<br>深拷贝会拷贝对象及其子元素。</p>\n<h5 id=\"知道可变对象和不可变对象吗？\"><a href=\"#知道可变对象和不可变对象吗？\" class=\"headerlink\" title=\"知道可变对象和不可变对象吗？\"></a>知道可变对象和不可变对象吗？</h5><p>这里我回答了知道，事实是我只是知道在函数使用传参的时候如果函数里修改了参数和的值可变对象的是在外部也会改变。(感觉很像作用域，那时候满脑子是set啥的。。。感觉左边变量右边一个值啥的都是对象，用久了都忘记还有int， string之类的类型了。)<br>可变对象有列表(list)和字典(dict)<br>不可变对象有数值类，字符串，元组（tuple)，集合(set)</p>\n<h5 id=\"迭代的几种方法\"><a href=\"#迭代的几种方法\" class=\"headerlink\" title=\"迭代的几种方法\"></a>迭代的几种方法</h5><p>这问题问得我一脸懵逼，我不知道问的是什么<br>开始我回答说不是for in么，还有个items方法。<br>后面考官解释了一下还是迷迷糊糊的，<br>类似for key, value in dict.items(): 这样？<br>但是还想问的是yield？</p>\n<h5 id=\"你了解元类吗？\"><a href=\"#你了解元类吗？\" class=\"headerlink\" title=\"你了解元类吗？\"></a>你了解元类吗？</h5><p>直说了我不了解，接下来也没问了。<br>type,Python里类都是动态创建的，type()函数可以返回一个对象的类型，也可以创建一个新的类型。传入类名，继承的父类和方法名称和函数绑定</p>\n<h5 id=\"数据库底层是怎么实现的\"><a href=\"#数据库底层是怎么实现的\" class=\"headerlink\" title=\"数据库底层是怎么实现的\"></a>数据库底层是怎么实现的</h5><p>B树或B+树<br>二次提问知道B树或B+树是怎么样的吗就蔫了。<br>B树是一颗节点内可以拥有n个数据而拥有n+1个子女的树，其中子树下的元素会比父节点左边的元素大比右边的元素小。B树中所有叶节点都在同一层<br>B+树是B树的一个变种，其数据只存在叶节点中，    其他节点只是在搜索中用来指引到正确节点，相邻叶节点顺序链接</p>\n<h5 id=\"红黑树了解吗？\"><a href=\"#红黑树了解吗？\" class=\"headerlink\" title=\"红黑树了解吗？\"></a>红黑树了解吗？</h5><p>在我回答不了解后考官说了红黑树是一颗自平衡的二叉查找树。<br>事后了解了一下，红黑树并不追求完全的平衡，但是在删除操作AVL需要旋转的量级为O(logN)，而红黑树至多需要三次操作就可以。所以统计性能要比AVL树要好。</p>\n<h5 id=\"说一下二叉树的遍历和三种遍历的优点\"><a href=\"#说一下二叉树的遍历和三种遍历的优点\" class=\"headerlink\" title=\"说一下二叉树的遍历和三种遍历的优点\"></a>说一下二叉树的遍历和三种遍历的优点</h5><p>但是只知道前序遍历，中序遍历，后序遍历。完全没想过他们之间有什么优点。<br>前序遍历在第一次遍历到节点时就执行操作，一般是想执行操作可选用。<br>中序遍历对与二分搜索树来说操作顺序符合从小到大（或从大到小）的顺序，遍历输出排序好的结果需要使用中序遍历。<br>后续遍历特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点。</p>\n<h5 id=\"了解RESTful吗？谈一下你的看法\"><a href=\"#了解RESTful吗？谈一下你的看法\" class=\"headerlink\" title=\"了解RESTful吗？谈一下你的看法\"></a>了解RESTful吗？谈一下你的看法</h5><p>我说了用URL表示资源的地址，用HTTP方法表示对资源的操作，返回的状态表示操作的结果。</p>\n<h5 id=\"谈下你对单元测试的理解和看法\"><a href=\"#谈下你对单元测试的理解和看法\" class=\"headerlink\" title=\"谈下你对单元测试的理解和看法\"></a>谈下你对单元测试的理解和看法</h5><p>我也就只说了单元测试对开发的方便，如果今后会修改一些代码也只需要跑一下测试。</p>\n<h5 id=\"知道设计模式吗？\"><a href=\"#知道设计模式吗？\" class=\"headerlink\" title=\"知道设计模式吗？\"></a>知道设计模式吗？</h5><p>坦白不怎么了解，虽然知道职务描述上写要知道设计模式，自己也看了一些，可是也没实际用过。不了解工程上的细节。。。</p>\n<p>最后才发现我即使是在一些开放性的问题上，谈的也很少，很多时候都是说到一般突然停下来，想很久。一般这个时候我都是在考虑用什么词描述比较好，可是这在对方看来就会很尴尬。。。今后或许在写代码的时候也应该使用小黄鸭调试法。尽量让自己的思路能够说出来。<br>后面考官了说了自己对面对对象那方面了解太少了，毕竟Python是门面对对象的语言。自己确实平常在码代码的时候不会特别注重这方面的东西。不管怎么说再接再厉吧。要不毕业后再试一下？</p>\n"},{"title":"RSA加密","date":"2017-10-17T10:18:55.000Z","_content":"2017年五月13日早些时候群里就流传了一些学校机房里的机器中了一种蠕虫病毒的图，那时候都是怀着一种调侃的心情看这些图，因为机房没法使用我们学生们就不用上一些实习了233。\n{% asset_img 界面.jpg WannaCry界面 %}\n比这的更早些时候也有一些勒索程序，windows平台下的，也有[Android](https://www.android.com/)平台下的。不过他们更像是一些脚本小子是使用出售的模版改些东西就传播的东西，因为当时确实也因为各种勒索软件爆发论坛上有一些抱怨，互联网更深的地方还有人出售易语言勒索程序的模版。但是五月13日后画风就越来越不一样了。先是群里这种机房被感染的图片越来越多，它不是单独的一个勒索软件，他还是一个蠕虫病毒，他会自我复制传播感染其他机器，更要命的是他还利用了一个windows平台下的0DAY（[永恒之蓝](https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D)）漏洞。。。\n\n五月12日晚微博上[山东大学](https://zh.wikipedia.org/wiki/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6)、[南昌大学](https://zh.wikipedia.org/wiki/%E5%8D%97%E6%98%8C%E5%A4%A7%E5%AD%A6)、[广西师范大学](https://zh.wikipedia.org/wiki/%E5%B9%BF%E8%A5%BF%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6)、[桂林电子科技大学](https://zh.wikipedia.org/wiki/%E6%A1%82%E6%9E%97%E9%9B%BB%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%B8)、[大连海事大学](https://zh.wikipedia.org/wiki/%E5%A4%A7%E8%BF%9E%E6%B5%B7%E4%BA%8B%E5%A4%A7%E5%AD%A6)、[东北财经大学](https://zh.wikipedia.org/wiki/%E4%B8%9C%E5%8C%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6)等十几家高校发布通知，提醒师生注意防范。这个时候就能看出WannaCry这个蠕虫病毒开始搞大新闻了。除了教育网、校园网以外，[新浪微博](https://zh.wikipedia.org/wiki/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A)上不少用户反馈，北京、上海、江苏、天津等多地的出入境、派出所等公安网和政企专网也遭遇了病毒袭击，许多公安机关和政府部门由于勒索软件的影响被迫停止工作。[中国国家互联网应急中心](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E6%80%A5%E4%B8%AD%E5%BF%83)发布关于防范WannaCry的情况通报，称全球约101.1万个IP地址遭受“永恒之蓝”SMB漏洞攻击工具的攻击尝试，发起攻击尝试的IP地址数量9300余个。重要的是，英国的医院还被感染了。这下感觉彻底没救了，作者公布解密方案都没法挽回了。\n\nWannaCry会加密硬盘上的所有文件，它还会提示你，如果你想解密，需要给一个比特币地址支付比特币。那么它怎么确认是谁交了比特币呢？它得确保每个被感染的机器都有唯一的标识，不能用一个统一的比特币钱包地址，因为这样没法确认是谁交了比特币。WannaCry确实会通过tor网络给每一个感染机器分配一个比特币地址，这样作者只需要给检测单独比特币钱包是否有足够的比特币就可以给那些机器解密密钥。但是在中国的GFW是屏蔽了tor网络的。所以在中国地区感染的机器只会显示三个固定的比特币地址\n\n115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn\n\n12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw\n\n13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94\n\n所以中国地区被感染的机器想要解密是没门的，但是确实有不少人给上面那三个比特币地址支付比特币。不知道那些受害者在支付后石沉大海会是什么感觉。\n\n这时候我想到了那些交了钱的人拿到解密密钥后把密钥公布那样岂不是其他人就不用交钱了么？\n\n那如果交了比特币，作者会以什么样的方式给受害者解密呢我想。\n\n感染加密的时候使用对称加密，加密完上传加密密钥和机器号到作者服务器\n\n那么这样得确保被感染的机器能联网，而且windows默认是不给联网权限的，pass\n\n感染的时候使用随机的对称加密密钥，这样不会解密一个其他人都知道了密钥。\n\n但是这样你怎么知道随机生成的密钥是啥呢？发送给作者？不可能，默认是没联网权限的。pass\n\n使用不对称加密的其中一个密钥 加密 对称加密的 密钥！\n\n这样子就变成了加密的时候随机生成一个对称加密的密钥，加密本地的数据，加密完成后使用硬编码的不对称加密的其中一个密钥（这样子就成为公钥）加密对称加密的密钥。\n\n解密的时候就把被加密过后的密钥发送给作者，作者用自己的私钥解密后发给你。\n\n这里用到了不对称加密的一个特性，**用其中一个密钥加密的消息只能被另一个密钥解密**。\n\n实际上WannaCry的加密过程会复杂点，WannaCry会本地生成一对RSA的一对密钥（我一直不明白这是为什么）。WannaCry 会给每个文件都单独生成一个AES的密钥加密后用本地生成的公钥加密，私钥由硬编码在程序里的另一对RSA密钥中的公钥加密（作者在他本地生成的RSA密钥对）实际上WannaCry是硬编码了主公钥，还有一对RSA密钥对，用作演示解密使用。。。（作者真贴心啊）\n{% asset_img 流程.jpg WannaCry加密流程 %}\n\n暑假闲着没事，就尝试用java实现RSA密钥对的生成。\n\n按照wiki说明，得先选择两个大的质数p和q，生成N = pq。\n\n这里使用了java的BigInteger对象，BigInteger有probablePrime的方法可以直接生成指定的素数（java就是好，库各种齐全）\n\n```java\n\t  BigInteger q = BigInteger.probablePrime(100, new Random()); // 取 2^100-1 范围内的随机素数\n\t  BigInteger p = BigInteger.probablePrime(100, new Random());\n\t  BigInteger N = q.multiply(p);  // q * p \n```\n接着求一个r，r = (p-1)(q-1)\n\n```java\nBigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); \n//(q - 1)*(p - 1)\n```\n\n选择一个小于r的整数e，使e与r互质。\n\n这里理论上e是任何小于r且与r互质的整数，但是通常基于性能考虑会选择65537.\n\n> openssl的低级版本一般会将e=3作为默认的RSA公钥指数。选取小公钥指数主要是为了提高加密或签名验证的性能，比如选e=3只需要2次模乘(ModMul)，而随机选择的e(假设n是1024-bit)则大概需要1000次模乘。NIST SP800-78 Rev 1 (2007) 曾强调“不允许使用比65537更低的公钥指数e”，但PKCS#1却从未有过类似的建议。e=65537=(2^16+1)，其签名/加密运算只需要17次模乘，性能也算不错。但我认为选这个值的目的只是一个介于小指数攻击和运算效率之间的一个折中考虑，即以防万一将来有一天\"e=3\"被攻破而侥幸\"e=65537\"可能还是安全的。\n>\n> （http://blog.csdn.net/hherima/article/details/52461759）\n\n求得e关于r的模反元素，命名为d。\n\n使用扩展欧几里德算法可以求的d\n\njava里定义了静态变量用于exgcd使用，这里写得很不好看。。。或许还有更优雅的写法。\n\n```java\nstatic BigInteger x,y,o = BigInteger.valueOf(0),o1 = BigInteger.valueOf(1);\t\npublic static BigInteger exgcd(BigInteger a,BigInteger b){  \n\tif(b.compareTo(o)==0){\n        x = o1; y = o; return a;\n    }else{\n    \tBigInteger d = exgcd(b,a.mod(b));\n        BigInteger temp = x;\n        x = y;\n        y = temp.subtract(a.divide(b).multiply(y))  ;\n        return d;\n    }\n    \n}\n```\n这样，我们就完成了生成一对RSA密钥对的所有步骤，（N，e）是公钥，(N，d)是你的私钥。\n\n>如果你使用随机生成的e，那么任意一个密钥都可以是公钥或私钥，但是工业界e是默认的65537，故(N,e)只能是公钥。\n\n```java\nBigInteger n = new BigInteger(\"65535\");\n```\n\n使用公钥加密消息是，使用双方约定好的方式将消息转换成一段段小于N的且与N互质的整数n,则加密后的消息为![{\\displaystyle c\\equiv n^{e}{\\pmod {N}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/5c7221f755ee1dc5c37a0d3843763d300a47fd55)。\n\n这里因为e是65537，本身就是一个素数。所以消息只需要切片成小于65537且不为1就可以了。\n\n```java\n\t  BigInteger n = new BigInteger(\"65535\");\n\t  System.out.println(\"n= \" + n);\n\t  BigInteger c = n.modPow(e, N);\n```\n解密消息可以用私钥d来解码，将接收的c通过以下公式转换为n：![ c^d \\equiv n\\ (\\mathrm{mod}\\ N) ](https://wikimedia.org/api/rest_v1/media/math/render/svg/39e4d41353bed8f138cc9f567741051c544b7720)\n\n```java\n\t  System.out.println(\"c= \" + c);\n\t  BigInteger nc = c.modPow(d, N);\n\t  System.out.println(\"nc= \" + nc);\n```\n\n\n解码的原理是\n\n\n已知\n\n![{\\displaystyle ed\\equiv 1{\\pmod {r}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/615bfc80513abf2a32d6c105b6b150c05773029b)，即 ![{\\displaystyle ed=1+h\\varphi (N)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/64e2c5e70f23fe9595cf64923d3d190f7470fc08)。 由[欧拉定理](https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA))得：![{\\displaystyle n^{ed}=n^{1+h\\varphi (N)}=n\\left(n^{\\varphi (N)}\\right)^{h}\\equiv n(1)^{h}{\\pmod {N}}\\equiv n{\\pmod {N}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/79569d77cd17c2c265be3b2980878a3a59aa1a7e)\n\nRSA同样可以用来签名消息，只要拥有私钥的一方在消息后添加消息的散列值的加密信息，拥有公钥的一方接收到消息后可以用公钥解密散列值并于消息对比，如果消息的散列值与解密后的一致，则这个消息在传播路径上没有被篡改过。\n\n至此，RSA密钥的生成实验已经做完了，RSA的加密和签名的安全性是基于目前没有合适的算法，其复杂度增长超过目前计算机算力的增长。所以RSA的加密只要随着计算机升级增加密钥长度就可以了。可是当今计算机是怎么分发公钥的呢？说着说着感觉我知道我的下一篇应该写什么了。\n\n\n\n源代码：\n\n\n```java\npackage math;\nimport java.math.*;\nimport java.util.Random;\npublic class Encode {\nstatic BigInteger x,y,o = BigInteger.valueOf(0),o1 = BigInteger.valueOf(1);\npublic static void main(String[] args) {\n\t// TODO 自动生成的方法存根\n\t\n\t  BigInteger q = BigInteger.probablePrime(100, new Random()); // 取 2^100-1 范围内的随机素数\n\t  BigInteger p = BigInteger.probablePrime(100, new Random());\n\t  BigInteger N = q.multiply(p);  // q * p \n\t  BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); //(q - 1)*(p - 1)\n\t  System.out.println(\"q= \" + q);  \n\t  System.out.println(\"p= \" + p);  \n\t  System.out.println(\"N= \" + N);  \n\t  System.out.println(\"r= \" + r);  \n\t  BigInteger e = new BigInteger(\"65537\" );//new BigInteger(10,new Random()); \n\t  //while(r.gcd(e).equals(BigInteger.ONE)){\n\t\t  //System.out.println(e);  \n\t\t  //e =new BigInteger(10,new Random());\n\t // }\n\t  System.out.println(\"e= \" + e);\n\t  exgcd(e, r);\n\t  BigInteger d = x;//new BigInteger(\"2753\" );\n\t  System.out.println(\"d= \" + d);\n\t  //BigInteger n = BigInteger.probablePrime(11, new Random());\n\t  BigInteger n = new BigInteger(\"65535\");\n\t  System.out.println(\"n= \" + n);\n\t  BigInteger c = n.modPow(e, N);\n\t  System.out.println(\"c= \" + c);\n\t  BigInteger nc = c.modPow(d, N);\n\t  System.out.println(\"nc= \" + nc);\n\n}\n\npublic static BigInteger exgcd(BigInteger a,BigInteger b){  \n\tif(b.compareTo(o)==0){\n        x = o1; y = o; return a;\n    }else{\n    \tBigInteger d = exgcd(b,a.mod(b));\n        BigInteger temp = x;\n        x = y;\n        y = temp.subtract(a.divide(b).multiply(y))  ;\n        return d;\n    }\n    \n}\n}\n```\n\n\n\n\n","source":"_posts/RSA加密.md","raw":"---\ntitle: RSA加密\ndate: 2017-10-17 18:18:55\ntags: java RSA\n---\n2017年五月13日早些时候群里就流传了一些学校机房里的机器中了一种蠕虫病毒的图，那时候都是怀着一种调侃的心情看这些图，因为机房没法使用我们学生们就不用上一些实习了233。\n{% asset_img 界面.jpg WannaCry界面 %}\n比这的更早些时候也有一些勒索程序，windows平台下的，也有[Android](https://www.android.com/)平台下的。不过他们更像是一些脚本小子是使用出售的模版改些东西就传播的东西，因为当时确实也因为各种勒索软件爆发论坛上有一些抱怨，互联网更深的地方还有人出售易语言勒索程序的模版。但是五月13日后画风就越来越不一样了。先是群里这种机房被感染的图片越来越多，它不是单独的一个勒索软件，他还是一个蠕虫病毒，他会自我复制传播感染其他机器，更要命的是他还利用了一个windows平台下的0DAY（[永恒之蓝](https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D)）漏洞。。。\n\n五月12日晚微博上[山东大学](https://zh.wikipedia.org/wiki/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6)、[南昌大学](https://zh.wikipedia.org/wiki/%E5%8D%97%E6%98%8C%E5%A4%A7%E5%AD%A6)、[广西师范大学](https://zh.wikipedia.org/wiki/%E5%B9%BF%E8%A5%BF%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6)、[桂林电子科技大学](https://zh.wikipedia.org/wiki/%E6%A1%82%E6%9E%97%E9%9B%BB%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%B8)、[大连海事大学](https://zh.wikipedia.org/wiki/%E5%A4%A7%E8%BF%9E%E6%B5%B7%E4%BA%8B%E5%A4%A7%E5%AD%A6)、[东北财经大学](https://zh.wikipedia.org/wiki/%E4%B8%9C%E5%8C%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6)等十几家高校发布通知，提醒师生注意防范。这个时候就能看出WannaCry这个蠕虫病毒开始搞大新闻了。除了教育网、校园网以外，[新浪微博](https://zh.wikipedia.org/wiki/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A)上不少用户反馈，北京、上海、江苏、天津等多地的出入境、派出所等公安网和政企专网也遭遇了病毒袭击，许多公安机关和政府部门由于勒索软件的影响被迫停止工作。[中国国家互联网应急中心](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E6%80%A5%E4%B8%AD%E5%BF%83)发布关于防范WannaCry的情况通报，称全球约101.1万个IP地址遭受“永恒之蓝”SMB漏洞攻击工具的攻击尝试，发起攻击尝试的IP地址数量9300余个。重要的是，英国的医院还被感染了。这下感觉彻底没救了，作者公布解密方案都没法挽回了。\n\nWannaCry会加密硬盘上的所有文件，它还会提示你，如果你想解密，需要给一个比特币地址支付比特币。那么它怎么确认是谁交了比特币呢？它得确保每个被感染的机器都有唯一的标识，不能用一个统一的比特币钱包地址，因为这样没法确认是谁交了比特币。WannaCry确实会通过tor网络给每一个感染机器分配一个比特币地址，这样作者只需要给检测单独比特币钱包是否有足够的比特币就可以给那些机器解密密钥。但是在中国的GFW是屏蔽了tor网络的。所以在中国地区感染的机器只会显示三个固定的比特币地址\n\n115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn\n\n12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw\n\n13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94\n\n所以中国地区被感染的机器想要解密是没门的，但是确实有不少人给上面那三个比特币地址支付比特币。不知道那些受害者在支付后石沉大海会是什么感觉。\n\n这时候我想到了那些交了钱的人拿到解密密钥后把密钥公布那样岂不是其他人就不用交钱了么？\n\n那如果交了比特币，作者会以什么样的方式给受害者解密呢我想。\n\n感染加密的时候使用对称加密，加密完上传加密密钥和机器号到作者服务器\n\n那么这样得确保被感染的机器能联网，而且windows默认是不给联网权限的，pass\n\n感染的时候使用随机的对称加密密钥，这样不会解密一个其他人都知道了密钥。\n\n但是这样你怎么知道随机生成的密钥是啥呢？发送给作者？不可能，默认是没联网权限的。pass\n\n使用不对称加密的其中一个密钥 加密 对称加密的 密钥！\n\n这样子就变成了加密的时候随机生成一个对称加密的密钥，加密本地的数据，加密完成后使用硬编码的不对称加密的其中一个密钥（这样子就成为公钥）加密对称加密的密钥。\n\n解密的时候就把被加密过后的密钥发送给作者，作者用自己的私钥解密后发给你。\n\n这里用到了不对称加密的一个特性，**用其中一个密钥加密的消息只能被另一个密钥解密**。\n\n实际上WannaCry的加密过程会复杂点，WannaCry会本地生成一对RSA的一对密钥（我一直不明白这是为什么）。WannaCry 会给每个文件都单独生成一个AES的密钥加密后用本地生成的公钥加密，私钥由硬编码在程序里的另一对RSA密钥中的公钥加密（作者在他本地生成的RSA密钥对）实际上WannaCry是硬编码了主公钥，还有一对RSA密钥对，用作演示解密使用。。。（作者真贴心啊）\n{% asset_img 流程.jpg WannaCry加密流程 %}\n\n暑假闲着没事，就尝试用java实现RSA密钥对的生成。\n\n按照wiki说明，得先选择两个大的质数p和q，生成N = pq。\n\n这里使用了java的BigInteger对象，BigInteger有probablePrime的方法可以直接生成指定的素数（java就是好，库各种齐全）\n\n```java\n\t  BigInteger q = BigInteger.probablePrime(100, new Random()); // 取 2^100-1 范围内的随机素数\n\t  BigInteger p = BigInteger.probablePrime(100, new Random());\n\t  BigInteger N = q.multiply(p);  // q * p \n```\n接着求一个r，r = (p-1)(q-1)\n\n```java\nBigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); \n//(q - 1)*(p - 1)\n```\n\n选择一个小于r的整数e，使e与r互质。\n\n这里理论上e是任何小于r且与r互质的整数，但是通常基于性能考虑会选择65537.\n\n> openssl的低级版本一般会将e=3作为默认的RSA公钥指数。选取小公钥指数主要是为了提高加密或签名验证的性能，比如选e=3只需要2次模乘(ModMul)，而随机选择的e(假设n是1024-bit)则大概需要1000次模乘。NIST SP800-78 Rev 1 (2007) 曾强调“不允许使用比65537更低的公钥指数e”，但PKCS#1却从未有过类似的建议。e=65537=(2^16+1)，其签名/加密运算只需要17次模乘，性能也算不错。但我认为选这个值的目的只是一个介于小指数攻击和运算效率之间的一个折中考虑，即以防万一将来有一天\"e=3\"被攻破而侥幸\"e=65537\"可能还是安全的。\n>\n> （http://blog.csdn.net/hherima/article/details/52461759）\n\n求得e关于r的模反元素，命名为d。\n\n使用扩展欧几里德算法可以求的d\n\njava里定义了静态变量用于exgcd使用，这里写得很不好看。。。或许还有更优雅的写法。\n\n```java\nstatic BigInteger x,y,o = BigInteger.valueOf(0),o1 = BigInteger.valueOf(1);\t\npublic static BigInteger exgcd(BigInteger a,BigInteger b){  \n\tif(b.compareTo(o)==0){\n        x = o1; y = o; return a;\n    }else{\n    \tBigInteger d = exgcd(b,a.mod(b));\n        BigInteger temp = x;\n        x = y;\n        y = temp.subtract(a.divide(b).multiply(y))  ;\n        return d;\n    }\n    \n}\n```\n这样，我们就完成了生成一对RSA密钥对的所有步骤，（N，e）是公钥，(N，d)是你的私钥。\n\n>如果你使用随机生成的e，那么任意一个密钥都可以是公钥或私钥，但是工业界e是默认的65537，故(N,e)只能是公钥。\n\n```java\nBigInteger n = new BigInteger(\"65535\");\n```\n\n使用公钥加密消息是，使用双方约定好的方式将消息转换成一段段小于N的且与N互质的整数n,则加密后的消息为![{\\displaystyle c\\equiv n^{e}{\\pmod {N}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/5c7221f755ee1dc5c37a0d3843763d300a47fd55)。\n\n这里因为e是65537，本身就是一个素数。所以消息只需要切片成小于65537且不为1就可以了。\n\n```java\n\t  BigInteger n = new BigInteger(\"65535\");\n\t  System.out.println(\"n= \" + n);\n\t  BigInteger c = n.modPow(e, N);\n```\n解密消息可以用私钥d来解码，将接收的c通过以下公式转换为n：![ c^d \\equiv n\\ (\\mathrm{mod}\\ N) ](https://wikimedia.org/api/rest_v1/media/math/render/svg/39e4d41353bed8f138cc9f567741051c544b7720)\n\n```java\n\t  System.out.println(\"c= \" + c);\n\t  BigInteger nc = c.modPow(d, N);\n\t  System.out.println(\"nc= \" + nc);\n```\n\n\n解码的原理是\n\n\n已知\n\n![{\\displaystyle ed\\equiv 1{\\pmod {r}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/615bfc80513abf2a32d6c105b6b150c05773029b)，即 ![{\\displaystyle ed=1+h\\varphi (N)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/64e2c5e70f23fe9595cf64923d3d190f7470fc08)。 由[欧拉定理](https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA))得：![{\\displaystyle n^{ed}=n^{1+h\\varphi (N)}=n\\left(n^{\\varphi (N)}\\right)^{h}\\equiv n(1)^{h}{\\pmod {N}}\\equiv n{\\pmod {N}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/79569d77cd17c2c265be3b2980878a3a59aa1a7e)\n\nRSA同样可以用来签名消息，只要拥有私钥的一方在消息后添加消息的散列值的加密信息，拥有公钥的一方接收到消息后可以用公钥解密散列值并于消息对比，如果消息的散列值与解密后的一致，则这个消息在传播路径上没有被篡改过。\n\n至此，RSA密钥的生成实验已经做完了，RSA的加密和签名的安全性是基于目前没有合适的算法，其复杂度增长超过目前计算机算力的增长。所以RSA的加密只要随着计算机升级增加密钥长度就可以了。可是当今计算机是怎么分发公钥的呢？说着说着感觉我知道我的下一篇应该写什么了。\n\n\n\n源代码：\n\n\n```java\npackage math;\nimport java.math.*;\nimport java.util.Random;\npublic class Encode {\nstatic BigInteger x,y,o = BigInteger.valueOf(0),o1 = BigInteger.valueOf(1);\npublic static void main(String[] args) {\n\t// TODO 自动生成的方法存根\n\t\n\t  BigInteger q = BigInteger.probablePrime(100, new Random()); // 取 2^100-1 范围内的随机素数\n\t  BigInteger p = BigInteger.probablePrime(100, new Random());\n\t  BigInteger N = q.multiply(p);  // q * p \n\t  BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); //(q - 1)*(p - 1)\n\t  System.out.println(\"q= \" + q);  \n\t  System.out.println(\"p= \" + p);  \n\t  System.out.println(\"N= \" + N);  \n\t  System.out.println(\"r= \" + r);  \n\t  BigInteger e = new BigInteger(\"65537\" );//new BigInteger(10,new Random()); \n\t  //while(r.gcd(e).equals(BigInteger.ONE)){\n\t\t  //System.out.println(e);  \n\t\t  //e =new BigInteger(10,new Random());\n\t // }\n\t  System.out.println(\"e= \" + e);\n\t  exgcd(e, r);\n\t  BigInteger d = x;//new BigInteger(\"2753\" );\n\t  System.out.println(\"d= \" + d);\n\t  //BigInteger n = BigInteger.probablePrime(11, new Random());\n\t  BigInteger n = new BigInteger(\"65535\");\n\t  System.out.println(\"n= \" + n);\n\t  BigInteger c = n.modPow(e, N);\n\t  System.out.println(\"c= \" + c);\n\t  BigInteger nc = c.modPow(d, N);\n\t  System.out.println(\"nc= \" + nc);\n\n}\n\npublic static BigInteger exgcd(BigInteger a,BigInteger b){  \n\tif(b.compareTo(o)==0){\n        x = o1; y = o; return a;\n    }else{\n    \tBigInteger d = exgcd(b,a.mod(b));\n        BigInteger temp = x;\n        x = y;\n        y = temp.subtract(a.divide(b).multiply(y))  ;\n        return d;\n    }\n    \n}\n}\n```\n\n\n\n\n","slug":"RSA加密","published":1,"updated":"2018-07-25T13:30:08.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknry001igvd97ppl0gn4","content":"<p>2017年五月13日早些时候群里就流传了一些学校机房里的机器中了一种蠕虫病毒的图，那时候都是怀着一种调侃的心情看这些图，因为机房没法使用我们学生们就不用上一些实习了233。<br><img src=\"/2017/10/17/RSA加密/界面.jpg\" title=\"WannaCry界面\"><br>比这的更早些时候也有一些勒索程序，windows平台下的，也有<a href=\"https://www.android.com/\" target=\"_blank\" rel=\"noopener\">Android</a>平台下的。不过他们更像是一些脚本小子是使用出售的模版改些东西就传播的东西，因为当时确实也因为各种勒索软件爆发论坛上有一些抱怨，互联网更深的地方还有人出售易语言勒索程序的模版。但是五月13日后画风就越来越不一样了。先是群里这种机房被感染的图片越来越多，它不是单独的一个勒索软件，他还是一个蠕虫病毒，他会自我复制传播感染其他机器，更要命的是他还利用了一个windows平台下的0DAY（<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D\" target=\"_blank\" rel=\"noopener\">永恒之蓝</a>）漏洞。。。</p>\n<p>五月12日晚微博上<a href=\"https://zh.wikipedia.org/wiki/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">山东大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%97%E6%98%8C%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">南昌大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E8%A5%BF%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">广西师范大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E6%A1%82%E6%9E%97%E9%9B%BB%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">桂林电子科技大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%E8%BF%9E%E6%B5%B7%E4%BA%8B%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">大连海事大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%9C%E5%8C%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">东北财经大学</a>等十几家高校发布通知，提醒师生注意防范。这个时候就能看出WannaCry这个蠕虫病毒开始搞大新闻了。除了教育网、校园网以外，<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A\" target=\"_blank\" rel=\"noopener\">新浪微博</a>上不少用户反馈，北京、上海、江苏、天津等多地的出入境、派出所等公安网和政企专网也遭遇了病毒袭击，许多公安机关和政府部门由于勒索软件的影响被迫停止工作。<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E6%80%A5%E4%B8%AD%E5%BF%83\" target=\"_blank\" rel=\"noopener\">中国国家互联网应急中心</a>发布关于防范WannaCry的情况通报，称全球约101.1万个IP地址遭受“永恒之蓝”SMB漏洞攻击工具的攻击尝试，发起攻击尝试的IP地址数量9300余个。重要的是，英国的医院还被感染了。这下感觉彻底没救了，作者公布解密方案都没法挽回了。</p>\n<p>WannaCry会加密硬盘上的所有文件，它还会提示你，如果你想解密，需要给一个比特币地址支付比特币。那么它怎么确认是谁交了比特币呢？它得确保每个被感染的机器都有唯一的标识，不能用一个统一的比特币钱包地址，因为这样没法确认是谁交了比特币。WannaCry确实会通过tor网络给每一个感染机器分配一个比特币地址，这样作者只需要给检测单独比特币钱包是否有足够的比特币就可以给那些机器解密密钥。但是在中国的GFW是屏蔽了tor网络的。所以在中国地区感染的机器只会显示三个固定的比特币地址</p>\n<p>115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn</p>\n<p>12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw</p>\n<p>13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94</p>\n<p>所以中国地区被感染的机器想要解密是没门的，但是确实有不少人给上面那三个比特币地址支付比特币。不知道那些受害者在支付后石沉大海会是什么感觉。</p>\n<p>这时候我想到了那些交了钱的人拿到解密密钥后把密钥公布那样岂不是其他人就不用交钱了么？</p>\n<p>那如果交了比特币，作者会以什么样的方式给受害者解密呢我想。</p>\n<p>感染加密的时候使用对称加密，加密完上传加密密钥和机器号到作者服务器</p>\n<p>那么这样得确保被感染的机器能联网，而且windows默认是不给联网权限的，pass</p>\n<p>感染的时候使用随机的对称加密密钥，这样不会解密一个其他人都知道了密钥。</p>\n<p>但是这样你怎么知道随机生成的密钥是啥呢？发送给作者？不可能，默认是没联网权限的。pass</p>\n<p>使用不对称加密的其中一个密钥 加密 对称加密的 密钥！</p>\n<p>这样子就变成了加密的时候随机生成一个对称加密的密钥，加密本地的数据，加密完成后使用硬编码的不对称加密的其中一个密钥（这样子就成为公钥）加密对称加密的密钥。</p>\n<p>解密的时候就把被加密过后的密钥发送给作者，作者用自己的私钥解密后发给你。</p>\n<p>这里用到了不对称加密的一个特性，<strong>用其中一个密钥加密的消息只能被另一个密钥解密</strong>。</p>\n<p>实际上WannaCry的加密过程会复杂点，WannaCry会本地生成一对RSA的一对密钥（我一直不明白这是为什么）。WannaCry 会给每个文件都单独生成一个AES的密钥加密后用本地生成的公钥加密，私钥由硬编码在程序里的另一对RSA密钥中的公钥加密（作者在他本地生成的RSA密钥对）实际上WannaCry是硬编码了主公钥，还有一对RSA密钥对，用作演示解密使用。。。（作者真贴心啊）<br><img src=\"/2017/10/17/RSA加密/流程.jpg\" title=\"WannaCry加密流程\"></p>\n<p>暑假闲着没事，就尝试用java实现RSA密钥对的生成。</p>\n<p>按照wiki说明，得先选择两个大的质数p和q，生成N = pq。</p>\n<p>这里使用了java的BigInteger对象，BigInteger有probablePrime的方法可以直接生成指定的素数（java就是好，库各种齐全）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger q = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random()); <span class=\"comment\">// 取 2^100-1 范围内的随机素数</span></span><br><span class=\"line\">BigInteger p = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random());</span><br><span class=\"line\">BigInteger N = q.multiply(p);  <span class=\"comment\">// q * p</span></span><br></pre></td></tr></table></figure>\n<p>接着求一个r，r = (p-1)(q-1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); </span><br><span class=\"line\"><span class=\"comment\">//(q - 1)*(p - 1)</span></span><br></pre></td></tr></table></figure>\n<p>选择一个小于r的整数e，使e与r互质。</p>\n<p>这里理论上e是任何小于r且与r互质的整数，但是通常基于性能考虑会选择65537.</p>\n<blockquote>\n<p>openssl的低级版本一般会将e=3作为默认的RSA公钥指数。选取小公钥指数主要是为了提高加密或签名验证的性能，比如选e=3只需要2次模乘(ModMul)，而随机选择的e(假设n是1024-bit)则大概需要1000次模乘。NIST SP800-78 Rev 1 (2007) 曾强调“不允许使用比65537更低的公钥指数e”，但PKCS#1却从未有过类似的建议。e=65537=(2^16+1)，其签名/加密运算只需要17次模乘，性能也算不错。但我认为选这个值的目的只是一个介于小指数攻击和运算效率之间的一个折中考虑，即以防万一将来有一天”e=3”被攻破而侥幸”e=65537”可能还是安全的。</p>\n<p>（<a href=\"http://blog.csdn.net/hherima/article/details/52461759）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hherima/article/details/52461759）</a></p>\n</blockquote>\n<p>求得e关于r的模反元素，命名为d。</p>\n<p>使用扩展欧几里德算法可以求的d</p>\n<p>java里定义了静态变量用于exgcd使用，这里写得很不好看。。。或许还有更优雅的写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> BigInteger x,y,o = BigInteger.valueOf(<span class=\"number\">0</span>),o1 = BigInteger.valueOf(<span class=\"number\">1</span>);\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">exgcd</span><span class=\"params\">(BigInteger a,BigInteger b)</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b.compareTo(o)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x = o1; y = o; <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \tBigInteger d = exgcd(b,a.mod(b));</span><br><span class=\"line\">        BigInteger temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp.subtract(a.divide(b).multiply(y))  ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就完成了生成一对RSA密钥对的所有步骤，（N，e）是公钥，(N，d)是你的私钥。</p>\n<blockquote>\n<p>如果你使用随机生成的e，那么任意一个密钥都可以是公钥或私钥，但是工业界e是默认的65537，故(N,e)只能是公钥。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br></pre></td></tr></table></figure>\n<p>使用公钥加密消息是，使用双方约定好的方式将消息转换成一段段小于N的且与N互质的整数n,则加密后的消息为<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/5c7221f755ee1dc5c37a0d3843763d300a47fd55\" alt=\"{\\displaystyle c\\equiv n^{e}{\\pmod {N}}}\">。</p>\n<p>这里因为e是65537，本身就是一个素数。所以消息只需要切片成小于65537且不为1就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"n= \"</span> + n);</span><br><span class=\"line\">BigInteger c = n.modPow(e, N);</span><br></pre></td></tr></table></figure>\n<p>解密消息可以用私钥d来解码，将接收的c通过以下公式转换为n：<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/39e4d41353bed8f138cc9f567741051c544b7720\" alt=\" c^d \\equiv n\\ (\\mathrm{mod}\\ N) \"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"c= \"</span> + c);</span><br><span class=\"line\">BigInteger nc = c.modPow(d, N);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"nc= \"</span> + nc);</span><br></pre></td></tr></table></figure>\n<p>解码的原理是</p>\n<p>已知</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/615bfc80513abf2a32d6c105b6b150c05773029b\" alt=\"{\\displaystyle ed\\equiv 1{\\pmod {r}}}\">，即 <img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/64e2c5e70f23fe9595cf64923d3d190f7470fc08\" alt=\"{\\displaystyle ed=1+h\\varphi (N)}\">。 由<a href=\"https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">欧拉定理</a>)得：<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/79569d77cd17c2c265be3b2980878a3a59aa1a7e\" alt=\"{\\displaystyle n^{ed}=n^{1+h\\varphi (N)}=n\\left(n^{\\varphi (N)}\\right)^{h}\\equiv n(1)^{h}{\\pmod {N}}\\equiv n{\\pmod {N}}}\"></p>\n<p>RSA同样可以用来签名消息，只要拥有私钥的一方在消息后添加消息的散列值的加密信息，拥有公钥的一方接收到消息后可以用公钥解密散列值并于消息对比，如果消息的散列值与解密后的一致，则这个消息在传播路径上没有被篡改过。</p>\n<p>至此，RSA密钥的生成实验已经做完了，RSA的加密和签名的安全性是基于目前没有合适的算法，其复杂度增长超过目前计算机算力的增长。所以RSA的加密只要随着计算机升级增加密钥长度就可以了。可是当今计算机是怎么分发公钥的呢？说着说着感觉我知道我的下一篇应该写什么了。</p>\n<p>源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> math;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Encode</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> BigInteger x,y,o = BigInteger.valueOf(<span class=\"number\">0</span>),o1 = BigInteger.valueOf(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 自动生成的方法存根</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  BigInteger q = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random()); <span class=\"comment\">// 取 2^100-1 范围内的随机素数</span></span><br><span class=\"line\">\t  BigInteger p = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random());</span><br><span class=\"line\">\t  BigInteger N = q.multiply(p);  <span class=\"comment\">// q * p </span></span><br><span class=\"line\">\t  BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); <span class=\"comment\">//(q - 1)*(p - 1)</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"q= \"</span> + q);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"p= \"</span> + p);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"N= \"</span> + N);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"r= \"</span> + r);  </span><br><span class=\"line\">\t  BigInteger e = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65537\"</span> );<span class=\"comment\">//new BigInteger(10,new Random()); </span></span><br><span class=\"line\">\t  <span class=\"comment\">//while(r.gcd(e).equals(BigInteger.ONE))&#123;</span></span><br><span class=\"line\">\t\t  <span class=\"comment\">//System.out.println(e);  </span></span><br><span class=\"line\">\t\t  <span class=\"comment\">//e =new BigInteger(10,new Random());</span></span><br><span class=\"line\">\t <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"e= \"</span> + e);</span><br><span class=\"line\">\t  exgcd(e, r);</span><br><span class=\"line\">\t  BigInteger d = x;<span class=\"comment\">//new BigInteger(\"2753\" );</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"d= \"</span> + d);</span><br><span class=\"line\">\t  <span class=\"comment\">//BigInteger n = BigInteger.probablePrime(11, new Random());</span></span><br><span class=\"line\">\t  BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"n= \"</span> + n);</span><br><span class=\"line\">\t  BigInteger c = n.modPow(e, N);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"c= \"</span> + c);</span><br><span class=\"line\">\t  BigInteger nc = c.modPow(d, N);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"nc= \"</span> + nc);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">exgcd</span><span class=\"params\">(BigInteger a,BigInteger b)</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b.compareTo(o)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x = o1; y = o; <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \tBigInteger d = exgcd(b,a.mod(b));</span><br><span class=\"line\">        BigInteger temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp.subtract(a.divide(b).multiply(y))  ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>2017年五月13日早些时候群里就流传了一些学校机房里的机器中了一种蠕虫病毒的图，那时候都是怀着一种调侃的心情看这些图，因为机房没法使用我们学生们就不用上一些实习了233。<br><img src=\"/2017/10/17/RSA加密/界面.jpg\" title=\"WannaCry界面\"><br>比这的更早些时候也有一些勒索程序，windows平台下的，也有<a href=\"https://www.android.com/\" target=\"_blank\" rel=\"noopener\">Android</a>平台下的。不过他们更像是一些脚本小子是使用出售的模版改些东西就传播的东西，因为当时确实也因为各种勒索软件爆发论坛上有一些抱怨，互联网更深的地方还有人出售易语言勒索程序的模版。但是五月13日后画风就越来越不一样了。先是群里这种机房被感染的图片越来越多，它不是单独的一个勒索软件，他还是一个蠕虫病毒，他会自我复制传播感染其他机器，更要命的是他还利用了一个windows平台下的0DAY（<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D\" target=\"_blank\" rel=\"noopener\">永恒之蓝</a>）漏洞。。。</p>\n<p>五月12日晚微博上<a href=\"https://zh.wikipedia.org/wiki/%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">山东大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%97%E6%98%8C%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">南昌大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E8%A5%BF%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">广西师范大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E6%A1%82%E6%9E%97%E9%9B%BB%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">桂林电子科技大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%E8%BF%9E%E6%B5%B7%E4%BA%8B%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">大连海事大学</a>、<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%9C%E5%8C%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">东北财经大学</a>等十几家高校发布通知，提醒师生注意防范。这个时候就能看出WannaCry这个蠕虫病毒开始搞大新闻了。除了教育网、校园网以外，<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A\" target=\"_blank\" rel=\"noopener\">新浪微博</a>上不少用户反馈，北京、上海、江苏、天津等多地的出入境、派出所等公安网和政企专网也遭遇了病毒袭击，许多公安机关和政府部门由于勒索软件的影响被迫停止工作。<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E6%80%A5%E4%B8%AD%E5%BF%83\" target=\"_blank\" rel=\"noopener\">中国国家互联网应急中心</a>发布关于防范WannaCry的情况通报，称全球约101.1万个IP地址遭受“永恒之蓝”SMB漏洞攻击工具的攻击尝试，发起攻击尝试的IP地址数量9300余个。重要的是，英国的医院还被感染了。这下感觉彻底没救了，作者公布解密方案都没法挽回了。</p>\n<p>WannaCry会加密硬盘上的所有文件，它还会提示你，如果你想解密，需要给一个比特币地址支付比特币。那么它怎么确认是谁交了比特币呢？它得确保每个被感染的机器都有唯一的标识，不能用一个统一的比特币钱包地址，因为这样没法确认是谁交了比特币。WannaCry确实会通过tor网络给每一个感染机器分配一个比特币地址，这样作者只需要给检测单独比特币钱包是否有足够的比特币就可以给那些机器解密密钥。但是在中国的GFW是屏蔽了tor网络的。所以在中国地区感染的机器只会显示三个固定的比特币地址</p>\n<p>115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn</p>\n<p>12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw</p>\n<p>13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94</p>\n<p>所以中国地区被感染的机器想要解密是没门的，但是确实有不少人给上面那三个比特币地址支付比特币。不知道那些受害者在支付后石沉大海会是什么感觉。</p>\n<p>这时候我想到了那些交了钱的人拿到解密密钥后把密钥公布那样岂不是其他人就不用交钱了么？</p>\n<p>那如果交了比特币，作者会以什么样的方式给受害者解密呢我想。</p>\n<p>感染加密的时候使用对称加密，加密完上传加密密钥和机器号到作者服务器</p>\n<p>那么这样得确保被感染的机器能联网，而且windows默认是不给联网权限的，pass</p>\n<p>感染的时候使用随机的对称加密密钥，这样不会解密一个其他人都知道了密钥。</p>\n<p>但是这样你怎么知道随机生成的密钥是啥呢？发送给作者？不可能，默认是没联网权限的。pass</p>\n<p>使用不对称加密的其中一个密钥 加密 对称加密的 密钥！</p>\n<p>这样子就变成了加密的时候随机生成一个对称加密的密钥，加密本地的数据，加密完成后使用硬编码的不对称加密的其中一个密钥（这样子就成为公钥）加密对称加密的密钥。</p>\n<p>解密的时候就把被加密过后的密钥发送给作者，作者用自己的私钥解密后发给你。</p>\n<p>这里用到了不对称加密的一个特性，<strong>用其中一个密钥加密的消息只能被另一个密钥解密</strong>。</p>\n<p>实际上WannaCry的加密过程会复杂点，WannaCry会本地生成一对RSA的一对密钥（我一直不明白这是为什么）。WannaCry 会给每个文件都单独生成一个AES的密钥加密后用本地生成的公钥加密，私钥由硬编码在程序里的另一对RSA密钥中的公钥加密（作者在他本地生成的RSA密钥对）实际上WannaCry是硬编码了主公钥，还有一对RSA密钥对，用作演示解密使用。。。（作者真贴心啊）<br><img src=\"/2017/10/17/RSA加密/流程.jpg\" title=\"WannaCry加密流程\"></p>\n<p>暑假闲着没事，就尝试用java实现RSA密钥对的生成。</p>\n<p>按照wiki说明，得先选择两个大的质数p和q，生成N = pq。</p>\n<p>这里使用了java的BigInteger对象，BigInteger有probablePrime的方法可以直接生成指定的素数（java就是好，库各种齐全）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger q = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random()); <span class=\"comment\">// 取 2^100-1 范围内的随机素数</span></span><br><span class=\"line\">BigInteger p = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random());</span><br><span class=\"line\">BigInteger N = q.multiply(p);  <span class=\"comment\">// q * p</span></span><br></pre></td></tr></table></figure>\n<p>接着求一个r，r = (p-1)(q-1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); </span><br><span class=\"line\"><span class=\"comment\">//(q - 1)*(p - 1)</span></span><br></pre></td></tr></table></figure>\n<p>选择一个小于r的整数e，使e与r互质。</p>\n<p>这里理论上e是任何小于r且与r互质的整数，但是通常基于性能考虑会选择65537.</p>\n<blockquote>\n<p>openssl的低级版本一般会将e=3作为默认的RSA公钥指数。选取小公钥指数主要是为了提高加密或签名验证的性能，比如选e=3只需要2次模乘(ModMul)，而随机选择的e(假设n是1024-bit)则大概需要1000次模乘。NIST SP800-78 Rev 1 (2007) 曾强调“不允许使用比65537更低的公钥指数e”，但PKCS#1却从未有过类似的建议。e=65537=(2^16+1)，其签名/加密运算只需要17次模乘，性能也算不错。但我认为选这个值的目的只是一个介于小指数攻击和运算效率之间的一个折中考虑，即以防万一将来有一天”e=3”被攻破而侥幸”e=65537”可能还是安全的。</p>\n<p>（<a href=\"http://blog.csdn.net/hherima/article/details/52461759）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hherima/article/details/52461759）</a></p>\n</blockquote>\n<p>求得e关于r的模反元素，命名为d。</p>\n<p>使用扩展欧几里德算法可以求的d</p>\n<p>java里定义了静态变量用于exgcd使用，这里写得很不好看。。。或许还有更优雅的写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> BigInteger x,y,o = BigInteger.valueOf(<span class=\"number\">0</span>),o1 = BigInteger.valueOf(<span class=\"number\">1</span>);\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">exgcd</span><span class=\"params\">(BigInteger a,BigInteger b)</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b.compareTo(o)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x = o1; y = o; <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \tBigInteger d = exgcd(b,a.mod(b));</span><br><span class=\"line\">        BigInteger temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp.subtract(a.divide(b).multiply(y))  ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就完成了生成一对RSA密钥对的所有步骤，（N，e）是公钥，(N，d)是你的私钥。</p>\n<blockquote>\n<p>如果你使用随机生成的e，那么任意一个密钥都可以是公钥或私钥，但是工业界e是默认的65537，故(N,e)只能是公钥。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br></pre></td></tr></table></figure>\n<p>使用公钥加密消息是，使用双方约定好的方式将消息转换成一段段小于N的且与N互质的整数n,则加密后的消息为<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/5c7221f755ee1dc5c37a0d3843763d300a47fd55\" alt=\"{\\displaystyle c\\equiv n^{e}{\\pmod {N}}}\">。</p>\n<p>这里因为e是65537，本身就是一个素数。所以消息只需要切片成小于65537且不为1就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"n= \"</span> + n);</span><br><span class=\"line\">BigInteger c = n.modPow(e, N);</span><br></pre></td></tr></table></figure>\n<p>解密消息可以用私钥d来解码，将接收的c通过以下公式转换为n：<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/39e4d41353bed8f138cc9f567741051c544b7720\" alt=\" c^d \\equiv n\\ (\\mathrm{mod}\\ N) \"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"c= \"</span> + c);</span><br><span class=\"line\">BigInteger nc = c.modPow(d, N);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"nc= \"</span> + nc);</span><br></pre></td></tr></table></figure>\n<p>解码的原理是</p>\n<p>已知</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/615bfc80513abf2a32d6c105b6b150c05773029b\" alt=\"{\\displaystyle ed\\equiv 1{\\pmod {r}}}\">，即 <img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/64e2c5e70f23fe9595cf64923d3d190f7470fc08\" alt=\"{\\displaystyle ed=1+h\\varphi (N)}\">。 由<a href=\"https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">欧拉定理</a>)得：<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/79569d77cd17c2c265be3b2980878a3a59aa1a7e\" alt=\"{\\displaystyle n^{ed}=n^{1+h\\varphi (N)}=n\\left(n^{\\varphi (N)}\\right)^{h}\\equiv n(1)^{h}{\\pmod {N}}\\equiv n{\\pmod {N}}}\"></p>\n<p>RSA同样可以用来签名消息，只要拥有私钥的一方在消息后添加消息的散列值的加密信息，拥有公钥的一方接收到消息后可以用公钥解密散列值并于消息对比，如果消息的散列值与解密后的一致，则这个消息在传播路径上没有被篡改过。</p>\n<p>至此，RSA密钥的生成实验已经做完了，RSA的加密和签名的安全性是基于目前没有合适的算法，其复杂度增长超过目前计算机算力的增长。所以RSA的加密只要随着计算机升级增加密钥长度就可以了。可是当今计算机是怎么分发公钥的呢？说着说着感觉我知道我的下一篇应该写什么了。</p>\n<p>源代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> math;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Encode</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> BigInteger x,y,o = BigInteger.valueOf(<span class=\"number\">0</span>),o1 = BigInteger.valueOf(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 自动生成的方法存根</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  BigInteger q = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random()); <span class=\"comment\">// 取 2^100-1 范围内的随机素数</span></span><br><span class=\"line\">\t  BigInteger p = BigInteger.probablePrime(<span class=\"number\">100</span>, <span class=\"keyword\">new</span> Random());</span><br><span class=\"line\">\t  BigInteger N = q.multiply(p);  <span class=\"comment\">// q * p </span></span><br><span class=\"line\">\t  BigInteger r = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE)); <span class=\"comment\">//(q - 1)*(p - 1)</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"q= \"</span> + q);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"p= \"</span> + p);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"N= \"</span> + N);  </span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"r= \"</span> + r);  </span><br><span class=\"line\">\t  BigInteger e = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65537\"</span> );<span class=\"comment\">//new BigInteger(10,new Random()); </span></span><br><span class=\"line\">\t  <span class=\"comment\">//while(r.gcd(e).equals(BigInteger.ONE))&#123;</span></span><br><span class=\"line\">\t\t  <span class=\"comment\">//System.out.println(e);  </span></span><br><span class=\"line\">\t\t  <span class=\"comment\">//e =new BigInteger(10,new Random());</span></span><br><span class=\"line\">\t <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"e= \"</span> + e);</span><br><span class=\"line\">\t  exgcd(e, r);</span><br><span class=\"line\">\t  BigInteger d = x;<span class=\"comment\">//new BigInteger(\"2753\" );</span></span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"d= \"</span> + d);</span><br><span class=\"line\">\t  <span class=\"comment\">//BigInteger n = BigInteger.probablePrime(11, new Random());</span></span><br><span class=\"line\">\t  BigInteger n = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"65535\"</span>);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"n= \"</span> + n);</span><br><span class=\"line\">\t  BigInteger c = n.modPow(e, N);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"c= \"</span> + c);</span><br><span class=\"line\">\t  BigInteger nc = c.modPow(d, N);</span><br><span class=\"line\">\t  System.out.println(<span class=\"string\">\"nc= \"</span> + nc);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigInteger <span class=\"title\">exgcd</span><span class=\"params\">(BigInteger a,BigInteger b)</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b.compareTo(o)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x = o1; y = o; <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \tBigInteger d = exgcd(b,a.mod(b));</span><br><span class=\"line\">        BigInteger temp = x;</span><br><span class=\"line\">        x = y;</span><br><span class=\"line\">        y = temp.subtract(a.divide(b).multiply(y))  ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"为什么我不喜欢国内网游","date":"2018-05-29T15:09:15.000Z","_content":"\n​\t我为什么不喜欢中国的网游\n\n​\t在我玩过的所有网络游戏里我个人认为最耐玩的就是EVE了，我尤其喜欢EVE里面的经济系统，它的经济系统和我玩过的所有网游都不同。那就是它的经济系统完全是没有任何管制的。\n\n​\t对，不受管制的经济系统，没有各种元宝，绑定元宝，金币，绑定金币的设定。游戏里通用的货币叫做ISK（这也是游戏开发地冰岛的货币名称）。相比中国的网游，游戏是月卡制。这也就没有中国网游的RMB对游戏货币的官方转换。\n\n​\t在这之前不如看看中国网游经济系统和EVE的对比\n\n​\t在我玩过网游说起来最早的一款是巨人网络的[魔域](https://my.99.com/index/),游戏中的货币有两种，金币和魔石。金币的获得来源是在游戏中击杀怪物会掉落一定数量的金币（游戏中很常见的设定，击杀怪物给予玩家一定的奖励，但是值得吐槽的是你一个魔兽干嘛随身带着人类货币啦！）。这是游戏世界里大部分NPC售卖游戏消耗品接受的货币。还有一个价值较高的货币叫魔石，魔石通过在游戏中充值获得。魔石在游戏中通过NPC购买高价值的物品，这些高价值物品的价值就是能够即时的提高玩家的战斗力。通过魔石游戏玩家还可以购买一些金币玩家没有的便捷功能。比如远程购买，原地复活。\n\n​\t在这个游戏里是直接由一个货币是直接和现实中的货币相对应的。那么直接这个货币就是不可控的。你手里魔石货币的价值完全取决于土豪愿意对这个游戏氪金多少而不以游戏中物资的生产率决定。（当然，这个游戏NPC手里的物资都是无限的。。。什么经济学原理在这里都崩溃了），同时，金币和魔石之间的转换也有一个官方兜底价（官方的魔石商店里有金币出售），这也保证了金币上一定程度的也无限制供应了。\n\n​\t在这个游戏的经济世界里。你手里物资的价值完全取决与土豪往这个游戏氪金多少，如果土豪今天心情好，氪了一单。游戏里的货币就会嘭的一声多了出来。你手里的货币就能购买到的物资也会相应减少（当然，市场反映需要时间）。如果土豪把手里的货币通过官方换成物资，嘭的一声游戏里的物资就凭空产生出来，你手里物资对应的货币减少。所以不管怎么土豪通过氪金并把得到的东西流通进市场，你的物资或者货币总有一方会受到损害。可喜的是通常都会同时发生。\n\n​\t我第二款网游是DNF，游戏相比第一款游戏收敛了许多，游戏里与现实货币关联的货币叫做点券。点券在游戏商城里只能购买礼服，礼服能增强人物的各种属性。能通过游戏获得的货币并不与礼券相关联，同时礼券在游戏的商城里也不能购买游戏里的装备和物资(好像还是能买一些辅助性的药剂？)。这就保证了游戏里货币的独立性。游戏货币完全在游戏里通过玩家的参与产生。所以游戏里物资的价格也真实反映了它在游戏中的生产率。这时候游戏对于所有手动参与的玩家是相对公平的。至今DNF的经济系统还能保持在相对稳定的币值，让搬砖玩家每天日复一日的下地下城。当然，对于金币的消耗我们的凯丽小姐也功不可没。也只有她日复一日的吞噬玩家金币才让地下城的金融系统没被数字后面无数的0覆盖。\n\n​\t通常国内RPG网游都会是这种模式，通过氪金能让你的角色原地变强。虽然有的游戏会克制一点只会在商城里出售游戏的稀缺物资而不直接出售金币，但是物资也会间接的剥削那些没有氪金辛苦搬砖的游戏玩家啊。同时以上所有的游戏交易都是通过在官方的市场面对面即时交易（DNF新版本上线了交易行，好像DNF可也以用礼券交换金币了）。\n\n​\t在EVE里，游戏的货币是ISK，同时游戏也有点券，游戏点券可以购买游戏时长（游戏是包月制度的）。同时，同时！游戏里的任何物品都是可以卖的！。游戏的点卡在游戏商城里叫做飞行员执照，使用可以增加30天的游戏时间，甚至这玩意都可以挂在游戏的空间站市场里出售。诶，你刚才不是说用现实货币购买的物资会冲击游戏市场吗。没错，但是飞行员执照不是游戏物资啊，他能增加游戏人物的可游戏时间但是不能给你带来任何的增强。\n\n​\tEVE和其他游戏不同的一点在他的市场完全是挂单式的。游戏里每个空间站都有一个市场，你可以吧游戏里任何物品挂到市场出售，也可以挂一个买单！所以在市场里信息是公开的，你可以在市场里看到一个物品过去的成交价格，涨幅。你甚至可以在一个玩家自发搭建的网站上查询EVE里各个物品的实时价格\n\n{% asset_img EVE国服市场.png EVE国服市场%}\n\n​\t同时EVE里物流是有成本的，你在哪个空间站购买的物品购买后物品也只会静静的躺在那个空间站里。所以这就导致了不同物品在不同的空间站价格是不同的。且游戏里NPC不会出售任何游戏的物资（除了一些技能学习书之外）。游戏里一切战斗生产用的物资都有玩家自己挖掘制造。游戏彻底贯彻了任何物品不一定有价值但是可以有价格的理念。所以一些对游戏性没有任何帮助的收藏品在游戏的市场里也会有价格。\n\n​\t我觉得EVE完善的市场机制里更重要的一点游戏里所有用到的舰船制造都是玩家制造的，制造得使用一些基础的矿石也是玩家挖掘的。生产这一环节关联了所有物资，它使得所有物品的价格和基础的矿石息息相关。\n\n​\t在声讨中国网游没有一点玩家的心态做一款用心的网游而不是坑钱的网游之前不如来讨论一下为什么中国网游的经济系统那么糟糕。\n\n​\t我们在现实生活中每天都用到货币，但是货币背后代表着这什么随着金融制度发展也几经变革。从一般等价物到金本位，如今金本位废除用国家税收做担保发行货币。在原始社会人们使用一般等价物进行商品的交换，这里这个一般等价物就承担着货币的功能，在这条世界线的历史里大部分人类选择用贵金属金，银作为一般等价物用来交易。我想是因为在这个世界的进程里金银这种金属在那个科技水平下开采的速率与社会生产率相当。当然中国因为是贫银国，所以古代民间交易更多的是使用铜币。这是不是古装剧描述的不太一致。在当今，金银的生产率早就比不上工业化后人类生产物资的速率的，所以抛弃金本位也是理所当然。如今使用国家税收做担保，规定税收必须使用法定货币。在唯有死亡和税收不可避免的今天看似理所当然。\n\n​\t所以在游戏里要怎么推行官方指定的货币呢？大部分游戏里是没有税收的。游戏使用的是把货币与一些NPC关联起来，如果你想要购买一些消耗品就必须使用游戏指定的货币。而这些消耗品或者NPC提供的服务是游戏不可避免的一环，这样相当于对每个玩家变现收了一把人头税。而EVE则是在一些空间站的服务中收取ISK。\n\n​\t在成为货币之后就是其货币的价值问题了。货币的价值是由GDP和货币流通量共同决定的。游戏里的GDP最好统计不过了。游戏的GDP则是各种物资的产出。实时，准确，无误差。\n\n​\t货币流通量由发行量和回收量决定。发行在游戏里大多通过刷怪获得，而通过NPC的各种服务回收。在提供RMB兑换游戏流通货币的游戏里货币量完全是不可决定的。在游戏的初始物资不丰富的阶段无限制的货币对游戏的经济系统打击是巨大的。\n\n​\t在EVE里可以通过调控物资和ISK的产出来调整游戏里的经济系统，EVE雇了经济学家每个月都会出EVE的[月度经济报告\t](https://www.eveonline.com/article/p8f6o4/monthly-economic-report-april-2018)，上面有每个星域的产出，ISK的发放，总量。在年度是会出一份经济学家的报告告诉玩家EVE做了什么。\n\n{% asset_img EVE经济图表.png EVE经济图表%}\n\n​\t或许希望国内的网游能有这一份意识，提供一个更真实，更有趣的游戏环境。","source":"_posts/为什么我不喜欢国内网游.md","raw":"---\ntitle: 为什么我不喜欢国内网游\ndate: 2018-05-29 23:09:15\ntags: [EVE,网游,经济]\n---\n\n​\t我为什么不喜欢中国的网游\n\n​\t在我玩过的所有网络游戏里我个人认为最耐玩的就是EVE了，我尤其喜欢EVE里面的经济系统，它的经济系统和我玩过的所有网游都不同。那就是它的经济系统完全是没有任何管制的。\n\n​\t对，不受管制的经济系统，没有各种元宝，绑定元宝，金币，绑定金币的设定。游戏里通用的货币叫做ISK（这也是游戏开发地冰岛的货币名称）。相比中国的网游，游戏是月卡制。这也就没有中国网游的RMB对游戏货币的官方转换。\n\n​\t在这之前不如看看中国网游经济系统和EVE的对比\n\n​\t在我玩过网游说起来最早的一款是巨人网络的[魔域](https://my.99.com/index/),游戏中的货币有两种，金币和魔石。金币的获得来源是在游戏中击杀怪物会掉落一定数量的金币（游戏中很常见的设定，击杀怪物给予玩家一定的奖励，但是值得吐槽的是你一个魔兽干嘛随身带着人类货币啦！）。这是游戏世界里大部分NPC售卖游戏消耗品接受的货币。还有一个价值较高的货币叫魔石，魔石通过在游戏中充值获得。魔石在游戏中通过NPC购买高价值的物品，这些高价值物品的价值就是能够即时的提高玩家的战斗力。通过魔石游戏玩家还可以购买一些金币玩家没有的便捷功能。比如远程购买，原地复活。\n\n​\t在这个游戏里是直接由一个货币是直接和现实中的货币相对应的。那么直接这个货币就是不可控的。你手里魔石货币的价值完全取决于土豪愿意对这个游戏氪金多少而不以游戏中物资的生产率决定。（当然，这个游戏NPC手里的物资都是无限的。。。什么经济学原理在这里都崩溃了），同时，金币和魔石之间的转换也有一个官方兜底价（官方的魔石商店里有金币出售），这也保证了金币上一定程度的也无限制供应了。\n\n​\t在这个游戏的经济世界里。你手里物资的价值完全取决与土豪往这个游戏氪金多少，如果土豪今天心情好，氪了一单。游戏里的货币就会嘭的一声多了出来。你手里的货币就能购买到的物资也会相应减少（当然，市场反映需要时间）。如果土豪把手里的货币通过官方换成物资，嘭的一声游戏里的物资就凭空产生出来，你手里物资对应的货币减少。所以不管怎么土豪通过氪金并把得到的东西流通进市场，你的物资或者货币总有一方会受到损害。可喜的是通常都会同时发生。\n\n​\t我第二款网游是DNF，游戏相比第一款游戏收敛了许多，游戏里与现实货币关联的货币叫做点券。点券在游戏商城里只能购买礼服，礼服能增强人物的各种属性。能通过游戏获得的货币并不与礼券相关联，同时礼券在游戏的商城里也不能购买游戏里的装备和物资(好像还是能买一些辅助性的药剂？)。这就保证了游戏里货币的独立性。游戏货币完全在游戏里通过玩家的参与产生。所以游戏里物资的价格也真实反映了它在游戏中的生产率。这时候游戏对于所有手动参与的玩家是相对公平的。至今DNF的经济系统还能保持在相对稳定的币值，让搬砖玩家每天日复一日的下地下城。当然，对于金币的消耗我们的凯丽小姐也功不可没。也只有她日复一日的吞噬玩家金币才让地下城的金融系统没被数字后面无数的0覆盖。\n\n​\t通常国内RPG网游都会是这种模式，通过氪金能让你的角色原地变强。虽然有的游戏会克制一点只会在商城里出售游戏的稀缺物资而不直接出售金币，但是物资也会间接的剥削那些没有氪金辛苦搬砖的游戏玩家啊。同时以上所有的游戏交易都是通过在官方的市场面对面即时交易（DNF新版本上线了交易行，好像DNF可也以用礼券交换金币了）。\n\n​\t在EVE里，游戏的货币是ISK，同时游戏也有点券，游戏点券可以购买游戏时长（游戏是包月制度的）。同时，同时！游戏里的任何物品都是可以卖的！。游戏的点卡在游戏商城里叫做飞行员执照，使用可以增加30天的游戏时间，甚至这玩意都可以挂在游戏的空间站市场里出售。诶，你刚才不是说用现实货币购买的物资会冲击游戏市场吗。没错，但是飞行员执照不是游戏物资啊，他能增加游戏人物的可游戏时间但是不能给你带来任何的增强。\n\n​\tEVE和其他游戏不同的一点在他的市场完全是挂单式的。游戏里每个空间站都有一个市场，你可以吧游戏里任何物品挂到市场出售，也可以挂一个买单！所以在市场里信息是公开的，你可以在市场里看到一个物品过去的成交价格，涨幅。你甚至可以在一个玩家自发搭建的网站上查询EVE里各个物品的实时价格\n\n{% asset_img EVE国服市场.png EVE国服市场%}\n\n​\t同时EVE里物流是有成本的，你在哪个空间站购买的物品购买后物品也只会静静的躺在那个空间站里。所以这就导致了不同物品在不同的空间站价格是不同的。且游戏里NPC不会出售任何游戏的物资（除了一些技能学习书之外）。游戏里一切战斗生产用的物资都有玩家自己挖掘制造。游戏彻底贯彻了任何物品不一定有价值但是可以有价格的理念。所以一些对游戏性没有任何帮助的收藏品在游戏的市场里也会有价格。\n\n​\t我觉得EVE完善的市场机制里更重要的一点游戏里所有用到的舰船制造都是玩家制造的，制造得使用一些基础的矿石也是玩家挖掘的。生产这一环节关联了所有物资，它使得所有物品的价格和基础的矿石息息相关。\n\n​\t在声讨中国网游没有一点玩家的心态做一款用心的网游而不是坑钱的网游之前不如来讨论一下为什么中国网游的经济系统那么糟糕。\n\n​\t我们在现实生活中每天都用到货币，但是货币背后代表着这什么随着金融制度发展也几经变革。从一般等价物到金本位，如今金本位废除用国家税收做担保发行货币。在原始社会人们使用一般等价物进行商品的交换，这里这个一般等价物就承担着货币的功能，在这条世界线的历史里大部分人类选择用贵金属金，银作为一般等价物用来交易。我想是因为在这个世界的进程里金银这种金属在那个科技水平下开采的速率与社会生产率相当。当然中国因为是贫银国，所以古代民间交易更多的是使用铜币。这是不是古装剧描述的不太一致。在当今，金银的生产率早就比不上工业化后人类生产物资的速率的，所以抛弃金本位也是理所当然。如今使用国家税收做担保，规定税收必须使用法定货币。在唯有死亡和税收不可避免的今天看似理所当然。\n\n​\t所以在游戏里要怎么推行官方指定的货币呢？大部分游戏里是没有税收的。游戏使用的是把货币与一些NPC关联起来，如果你想要购买一些消耗品就必须使用游戏指定的货币。而这些消耗品或者NPC提供的服务是游戏不可避免的一环，这样相当于对每个玩家变现收了一把人头税。而EVE则是在一些空间站的服务中收取ISK。\n\n​\t在成为货币之后就是其货币的价值问题了。货币的价值是由GDP和货币流通量共同决定的。游戏里的GDP最好统计不过了。游戏的GDP则是各种物资的产出。实时，准确，无误差。\n\n​\t货币流通量由发行量和回收量决定。发行在游戏里大多通过刷怪获得，而通过NPC的各种服务回收。在提供RMB兑换游戏流通货币的游戏里货币量完全是不可决定的。在游戏的初始物资不丰富的阶段无限制的货币对游戏的经济系统打击是巨大的。\n\n​\t在EVE里可以通过调控物资和ISK的产出来调整游戏里的经济系统，EVE雇了经济学家每个月都会出EVE的[月度经济报告\t](https://www.eveonline.com/article/p8f6o4/monthly-economic-report-april-2018)，上面有每个星域的产出，ISK的发放，总量。在年度是会出一份经济学家的报告告诉玩家EVE做了什么。\n\n{% asset_img EVE经济图表.png EVE经济图表%}\n\n​\t或许希望国内的网游能有这一份意识，提供一个更真实，更有趣的游戏环境。","slug":"为什么我不喜欢国内网游","published":1,"updated":"2018-07-25T13:30:08.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknrz001jgvd98dysp9x6","content":"<p>​    我为什么不喜欢中国的网游</p>\n<p>​    在我玩过的所有网络游戏里我个人认为最耐玩的就是EVE了，我尤其喜欢EVE里面的经济系统，它的经济系统和我玩过的所有网游都不同。那就是它的经济系统完全是没有任何管制的。</p>\n<p>​    对，不受管制的经济系统，没有各种元宝，绑定元宝，金币，绑定金币的设定。游戏里通用的货币叫做ISK（这也是游戏开发地冰岛的货币名称）。相比中国的网游，游戏是月卡制。这也就没有中国网游的RMB对游戏货币的官方转换。</p>\n<p>​    在这之前不如看看中国网游经济系统和EVE的对比</p>\n<p>​    在我玩过网游说起来最早的一款是巨人网络的<a href=\"https://my.99.com/index/\" target=\"_blank\" rel=\"noopener\">魔域</a>,游戏中的货币有两种，金币和魔石。金币的获得来源是在游戏中击杀怪物会掉落一定数量的金币（游戏中很常见的设定，击杀怪物给予玩家一定的奖励，但是值得吐槽的是你一个魔兽干嘛随身带着人类货币啦！）。这是游戏世界里大部分NPC售卖游戏消耗品接受的货币。还有一个价值较高的货币叫魔石，魔石通过在游戏中充值获得。魔石在游戏中通过NPC购买高价值的物品，这些高价值物品的价值就是能够即时的提高玩家的战斗力。通过魔石游戏玩家还可以购买一些金币玩家没有的便捷功能。比如远程购买，原地复活。</p>\n<p>​    在这个游戏里是直接由一个货币是直接和现实中的货币相对应的。那么直接这个货币就是不可控的。你手里魔石货币的价值完全取决于土豪愿意对这个游戏氪金多少而不以游戏中物资的生产率决定。（当然，这个游戏NPC手里的物资都是无限的。。。什么经济学原理在这里都崩溃了），同时，金币和魔石之间的转换也有一个官方兜底价（官方的魔石商店里有金币出售），这也保证了金币上一定程度的也无限制供应了。</p>\n<p>​    在这个游戏的经济世界里。你手里物资的价值完全取决与土豪往这个游戏氪金多少，如果土豪今天心情好，氪了一单。游戏里的货币就会嘭的一声多了出来。你手里的货币就能购买到的物资也会相应减少（当然，市场反映需要时间）。如果土豪把手里的货币通过官方换成物资，嘭的一声游戏里的物资就凭空产生出来，你手里物资对应的货币减少。所以不管怎么土豪通过氪金并把得到的东西流通进市场，你的物资或者货币总有一方会受到损害。可喜的是通常都会同时发生。</p>\n<p>​    我第二款网游是DNF，游戏相比第一款游戏收敛了许多，游戏里与现实货币关联的货币叫做点券。点券在游戏商城里只能购买礼服，礼服能增强人物的各种属性。能通过游戏获得的货币并不与礼券相关联，同时礼券在游戏的商城里也不能购买游戏里的装备和物资(好像还是能买一些辅助性的药剂？)。这就保证了游戏里货币的独立性。游戏货币完全在游戏里通过玩家的参与产生。所以游戏里物资的价格也真实反映了它在游戏中的生产率。这时候游戏对于所有手动参与的玩家是相对公平的。至今DNF的经济系统还能保持在相对稳定的币值，让搬砖玩家每天日复一日的下地下城。当然，对于金币的消耗我们的凯丽小姐也功不可没。也只有她日复一日的吞噬玩家金币才让地下城的金融系统没被数字后面无数的0覆盖。</p>\n<p>​    通常国内RPG网游都会是这种模式，通过氪金能让你的角色原地变强。虽然有的游戏会克制一点只会在商城里出售游戏的稀缺物资而不直接出售金币，但是物资也会间接的剥削那些没有氪金辛苦搬砖的游戏玩家啊。同时以上所有的游戏交易都是通过在官方的市场面对面即时交易（DNF新版本上线了交易行，好像DNF可也以用礼券交换金币了）。</p>\n<p>​    在EVE里，游戏的货币是ISK，同时游戏也有点券，游戏点券可以购买游戏时长（游戏是包月制度的）。同时，同时！游戏里的任何物品都是可以卖的！。游戏的点卡在游戏商城里叫做飞行员执照，使用可以增加30天的游戏时间，甚至这玩意都可以挂在游戏的空间站市场里出售。诶，你刚才不是说用现实货币购买的物资会冲击游戏市场吗。没错，但是飞行员执照不是游戏物资啊，他能增加游戏人物的可游戏时间但是不能给你带来任何的增强。</p>\n<p>​    EVE和其他游戏不同的一点在他的市场完全是挂单式的。游戏里每个空间站都有一个市场，你可以吧游戏里任何物品挂到市场出售，也可以挂一个买单！所以在市场里信息是公开的，你可以在市场里看到一个物品过去的成交价格，涨幅。你甚至可以在一个玩家自发搭建的网站上查询EVE里各个物品的实时价格</p>\n<img src=\"/2018/05/29/为什么我不喜欢国内网游/EVE国服市场.png\" title=\"EVE国服市场\">\n<p>​    同时EVE里物流是有成本的，你在哪个空间站购买的物品购买后物品也只会静静的躺在那个空间站里。所以这就导致了不同物品在不同的空间站价格是不同的。且游戏里NPC不会出售任何游戏的物资（除了一些技能学习书之外）。游戏里一切战斗生产用的物资都有玩家自己挖掘制造。游戏彻底贯彻了任何物品不一定有价值但是可以有价格的理念。所以一些对游戏性没有任何帮助的收藏品在游戏的市场里也会有价格。</p>\n<p>​    我觉得EVE完善的市场机制里更重要的一点游戏里所有用到的舰船制造都是玩家制造的，制造得使用一些基础的矿石也是玩家挖掘的。生产这一环节关联了所有物资，它使得所有物品的价格和基础的矿石息息相关。</p>\n<p>​    在声讨中国网游没有一点玩家的心态做一款用心的网游而不是坑钱的网游之前不如来讨论一下为什么中国网游的经济系统那么糟糕。</p>\n<p>​    我们在现实生活中每天都用到货币，但是货币背后代表着这什么随着金融制度发展也几经变革。从一般等价物到金本位，如今金本位废除用国家税收做担保发行货币。在原始社会人们使用一般等价物进行商品的交换，这里这个一般等价物就承担着货币的功能，在这条世界线的历史里大部分人类选择用贵金属金，银作为一般等价物用来交易。我想是因为在这个世界的进程里金银这种金属在那个科技水平下开采的速率与社会生产率相当。当然中国因为是贫银国，所以古代民间交易更多的是使用铜币。这是不是古装剧描述的不太一致。在当今，金银的生产率早就比不上工业化后人类生产物资的速率的，所以抛弃金本位也是理所当然。如今使用国家税收做担保，规定税收必须使用法定货币。在唯有死亡和税收不可避免的今天看似理所当然。</p>\n<p>​    所以在游戏里要怎么推行官方指定的货币呢？大部分游戏里是没有税收的。游戏使用的是把货币与一些NPC关联起来，如果你想要购买一些消耗品就必须使用游戏指定的货币。而这些消耗品或者NPC提供的服务是游戏不可避免的一环，这样相当于对每个玩家变现收了一把人头税。而EVE则是在一些空间站的服务中收取ISK。</p>\n<p>​    在成为货币之后就是其货币的价值问题了。货币的价值是由GDP和货币流通量共同决定的。游戏里的GDP最好统计不过了。游戏的GDP则是各种物资的产出。实时，准确，无误差。</p>\n<p>​    货币流通量由发行量和回收量决定。发行在游戏里大多通过刷怪获得，而通过NPC的各种服务回收。在提供RMB兑换游戏流通货币的游戏里货币量完全是不可决定的。在游戏的初始物资不丰富的阶段无限制的货币对游戏的经济系统打击是巨大的。</p>\n<p>​    在EVE里可以通过调控物资和ISK的产出来调整游戏里的经济系统，EVE雇了经济学家每个月都会出EVE的<a href=\"https://www.eveonline.com/article/p8f6o4/monthly-economic-report-april-2018\" target=\"_blank\" rel=\"noopener\">月度经济报告    </a>，上面有每个星域的产出，ISK的发放，总量。在年度是会出一份经济学家的报告告诉玩家EVE做了什么。</p>\n<img src=\"/2018/05/29/为什么我不喜欢国内网游/EVE经济图表.png\" title=\"EVE经济图表\">\n<p>​    或许希望国内的网游能有这一份意识，提供一个更真实，更有趣的游戏环境。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    我为什么不喜欢中国的网游</p>\n<p>​    在我玩过的所有网络游戏里我个人认为最耐玩的就是EVE了，我尤其喜欢EVE里面的经济系统，它的经济系统和我玩过的所有网游都不同。那就是它的经济系统完全是没有任何管制的。</p>\n<p>​    对，不受管制的经济系统，没有各种元宝，绑定元宝，金币，绑定金币的设定。游戏里通用的货币叫做ISK（这也是游戏开发地冰岛的货币名称）。相比中国的网游，游戏是月卡制。这也就没有中国网游的RMB对游戏货币的官方转换。</p>\n<p>​    在这之前不如看看中国网游经济系统和EVE的对比</p>\n<p>​    在我玩过网游说起来最早的一款是巨人网络的<a href=\"https://my.99.com/index/\" target=\"_blank\" rel=\"noopener\">魔域</a>,游戏中的货币有两种，金币和魔石。金币的获得来源是在游戏中击杀怪物会掉落一定数量的金币（游戏中很常见的设定，击杀怪物给予玩家一定的奖励，但是值得吐槽的是你一个魔兽干嘛随身带着人类货币啦！）。这是游戏世界里大部分NPC售卖游戏消耗品接受的货币。还有一个价值较高的货币叫魔石，魔石通过在游戏中充值获得。魔石在游戏中通过NPC购买高价值的物品，这些高价值物品的价值就是能够即时的提高玩家的战斗力。通过魔石游戏玩家还可以购买一些金币玩家没有的便捷功能。比如远程购买，原地复活。</p>\n<p>​    在这个游戏里是直接由一个货币是直接和现实中的货币相对应的。那么直接这个货币就是不可控的。你手里魔石货币的价值完全取决于土豪愿意对这个游戏氪金多少而不以游戏中物资的生产率决定。（当然，这个游戏NPC手里的物资都是无限的。。。什么经济学原理在这里都崩溃了），同时，金币和魔石之间的转换也有一个官方兜底价（官方的魔石商店里有金币出售），这也保证了金币上一定程度的也无限制供应了。</p>\n<p>​    在这个游戏的经济世界里。你手里物资的价值完全取决与土豪往这个游戏氪金多少，如果土豪今天心情好，氪了一单。游戏里的货币就会嘭的一声多了出来。你手里的货币就能购买到的物资也会相应减少（当然，市场反映需要时间）。如果土豪把手里的货币通过官方换成物资，嘭的一声游戏里的物资就凭空产生出来，你手里物资对应的货币减少。所以不管怎么土豪通过氪金并把得到的东西流通进市场，你的物资或者货币总有一方会受到损害。可喜的是通常都会同时发生。</p>\n<p>​    我第二款网游是DNF，游戏相比第一款游戏收敛了许多，游戏里与现实货币关联的货币叫做点券。点券在游戏商城里只能购买礼服，礼服能增强人物的各种属性。能通过游戏获得的货币并不与礼券相关联，同时礼券在游戏的商城里也不能购买游戏里的装备和物资(好像还是能买一些辅助性的药剂？)。这就保证了游戏里货币的独立性。游戏货币完全在游戏里通过玩家的参与产生。所以游戏里物资的价格也真实反映了它在游戏中的生产率。这时候游戏对于所有手动参与的玩家是相对公平的。至今DNF的经济系统还能保持在相对稳定的币值，让搬砖玩家每天日复一日的下地下城。当然，对于金币的消耗我们的凯丽小姐也功不可没。也只有她日复一日的吞噬玩家金币才让地下城的金融系统没被数字后面无数的0覆盖。</p>\n<p>​    通常国内RPG网游都会是这种模式，通过氪金能让你的角色原地变强。虽然有的游戏会克制一点只会在商城里出售游戏的稀缺物资而不直接出售金币，但是物资也会间接的剥削那些没有氪金辛苦搬砖的游戏玩家啊。同时以上所有的游戏交易都是通过在官方的市场面对面即时交易（DNF新版本上线了交易行，好像DNF可也以用礼券交换金币了）。</p>\n<p>​    在EVE里，游戏的货币是ISK，同时游戏也有点券，游戏点券可以购买游戏时长（游戏是包月制度的）。同时，同时！游戏里的任何物品都是可以卖的！。游戏的点卡在游戏商城里叫做飞行员执照，使用可以增加30天的游戏时间，甚至这玩意都可以挂在游戏的空间站市场里出售。诶，你刚才不是说用现实货币购买的物资会冲击游戏市场吗。没错，但是飞行员执照不是游戏物资啊，他能增加游戏人物的可游戏时间但是不能给你带来任何的增强。</p>\n<p>​    EVE和其他游戏不同的一点在他的市场完全是挂单式的。游戏里每个空间站都有一个市场，你可以吧游戏里任何物品挂到市场出售，也可以挂一个买单！所以在市场里信息是公开的，你可以在市场里看到一个物品过去的成交价格，涨幅。你甚至可以在一个玩家自发搭建的网站上查询EVE里各个物品的实时价格</p>\n<img src=\"/2018/05/29/为什么我不喜欢国内网游/EVE国服市场.png\" title=\"EVE国服市场\">\n<p>​    同时EVE里物流是有成本的，你在哪个空间站购买的物品购买后物品也只会静静的躺在那个空间站里。所以这就导致了不同物品在不同的空间站价格是不同的。且游戏里NPC不会出售任何游戏的物资（除了一些技能学习书之外）。游戏里一切战斗生产用的物资都有玩家自己挖掘制造。游戏彻底贯彻了任何物品不一定有价值但是可以有价格的理念。所以一些对游戏性没有任何帮助的收藏品在游戏的市场里也会有价格。</p>\n<p>​    我觉得EVE完善的市场机制里更重要的一点游戏里所有用到的舰船制造都是玩家制造的，制造得使用一些基础的矿石也是玩家挖掘的。生产这一环节关联了所有物资，它使得所有物品的价格和基础的矿石息息相关。</p>\n<p>​    在声讨中国网游没有一点玩家的心态做一款用心的网游而不是坑钱的网游之前不如来讨论一下为什么中国网游的经济系统那么糟糕。</p>\n<p>​    我们在现实生活中每天都用到货币，但是货币背后代表着这什么随着金融制度发展也几经变革。从一般等价物到金本位，如今金本位废除用国家税收做担保发行货币。在原始社会人们使用一般等价物进行商品的交换，这里这个一般等价物就承担着货币的功能，在这条世界线的历史里大部分人类选择用贵金属金，银作为一般等价物用来交易。我想是因为在这个世界的进程里金银这种金属在那个科技水平下开采的速率与社会生产率相当。当然中国因为是贫银国，所以古代民间交易更多的是使用铜币。这是不是古装剧描述的不太一致。在当今，金银的生产率早就比不上工业化后人类生产物资的速率的，所以抛弃金本位也是理所当然。如今使用国家税收做担保，规定税收必须使用法定货币。在唯有死亡和税收不可避免的今天看似理所当然。</p>\n<p>​    所以在游戏里要怎么推行官方指定的货币呢？大部分游戏里是没有税收的。游戏使用的是把货币与一些NPC关联起来，如果你想要购买一些消耗品就必须使用游戏指定的货币。而这些消耗品或者NPC提供的服务是游戏不可避免的一环，这样相当于对每个玩家变现收了一把人头税。而EVE则是在一些空间站的服务中收取ISK。</p>\n<p>​    在成为货币之后就是其货币的价值问题了。货币的价值是由GDP和货币流通量共同决定的。游戏里的GDP最好统计不过了。游戏的GDP则是各种物资的产出。实时，准确，无误差。</p>\n<p>​    货币流通量由发行量和回收量决定。发行在游戏里大多通过刷怪获得，而通过NPC的各种服务回收。在提供RMB兑换游戏流通货币的游戏里货币量完全是不可决定的。在游戏的初始物资不丰富的阶段无限制的货币对游戏的经济系统打击是巨大的。</p>\n<p>​    在EVE里可以通过调控物资和ISK的产出来调整游戏里的经济系统，EVE雇了经济学家每个月都会出EVE的<a href=\"https://www.eveonline.com/article/p8f6o4/monthly-economic-report-april-2018\" target=\"_blank\" rel=\"noopener\">月度经济报告    </a>，上面有每个星域的产出，ISK的发放，总量。在年度是会出一份经济学家的报告告诉玩家EVE做了什么。</p>\n<img src=\"/2018/05/29/为什么我不喜欢国内网游/EVE经济图表.png\" title=\"EVE经济图表\">\n<p>​    或许希望国内的网游能有这一份意识，提供一个更真实，更有趣的游戏环境。</p>\n"},{"title":"“在github上搭建静态博客”","date":"2017-06-04T09:55:30.000Z","_content":"\n​\tGitHub 是一个通过 Git 进行版本控制的代码托管平台，它提供一个二级域名解析其域名下仓库的master分支下的html页面。那么我们就可以通过这个服务假设一个自己的博客。\n\n​\t但是自己写 html 无疑是重复照轮子，而且自己诚实的来讲，实在是懒。而且人家写的脚本生成出来的页面设计好看得多嘛。于是我这里使用 hexo 框架生成静态的博客页面，当然也有其他的框架比如 jekyll。这里使用hexo纯粹就是我个人选择问题了。\n\n​\t首先你得注册一个 github 的帐号，这里默认你已经有github账号了。然后申请一个名字为 user.github.io （user为你的用户名）的仓库，访问 user.github.io 会默认解析你master分支下的index.html页面。\n\n{% asset_img 主页.png 仓库申请页面 %}\n\n​\t安装 hexo， hexo 是用node编写的，所以你得安装node环境。\n\n下载Node.js安装文件：\n\n- [Windows Installer 32-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi)\n- [Windows Installer 64-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n\n下载Git安装文件：\n\n- [Git-2.6.3-64-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe)\n\n​\t必要的环境安装完成后就可以安装hexo了。在命令行下进入你需要安装的目录然后\n\n​\t在命令行中输入：\n\n```\nnpm install hexo-cli -g\n```\n\n然后你将会看到:\n\n{% asset_img npm-install-hexo-cli.png npm-install-hexo-cli %}\n\n可能你会看到一个`WARN`，但是不用担心，这不会影响你的正常使用。 然后输入\n\n```\nnpm install hexo --save\n\n```\n\n然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：\n\n```\nhexo -v\n\n```\n\n如果你看到了如图文字，则说明已经安装成功了。\n\n{% asset_img hexo-v.png hexo-v %}\n\n## 初始化Hexo\n\n接着上面的操作，输入：\n\n```\nhexo init\n```\n\n然后输入：\n\n```\nnpm install\n\n\n```\n\n之后npm将会自动安装你需要的组件，只需要等待npm操作即可。\n\n## 首次体验Hexo\n\n继续操作，同样是在命令行中，输入：\n\n```\nhexo g\n```\n\n然后输入：\n\n```\nhexo s\n\n```\n\n然后会提示：\n\n```\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n```\n\n在浏览器中打开`http://localhost:4000/`，你将会看到：\n\n{% asset_img hexo-first-time.png hexo-first-time %}\n\n到目前为止，Hexo在本地的配置已经全都结束了。\n\n## 修改全局配置文件\n\n*此段落引用自Hexo官方文档*\n\n您可以在 `_config.yml` 中修改大部份的配置。\n\n### 网站\n\n| 参数            | 描述                                       |\n| ------------- | ---------------------------------------- |\n| `title`       | 网站标题                                     |\n| `subtitle`    | 网站副标题                                    |\n| `description` | 网站描述                                     |\n| `author`      | 您的名字                                     |\n| `language`    | 网站使用的语言                                  |\n| `timezone`    | 网站时区。Hexo 默认使用您电脑的时区。[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)。比如说：`America/New_York`, `Japan`, 和 `UTC` 。 |\n\n### 网址\n\n| 参数                  | 描述                                       | 默认值                         |\n| ------------------- | ---------------------------------------- | --------------------------- |\n| `url`               | 网址                                       |                             |\n| `root`              | 网站根目录                                    |                             |\n| `permalink`         | 文章的 [永久链接](https://xuanwo.org/2015/03/26/hexo-intor/permalinks.html) 格式 | `:year/:month/:day/:title/` |\n| `permalink_default` | 永久链接中各部分的默认值                             |                             |\n\n> 如果您的网站存放在子目录中，例如 `http://yoursite.com/blog`，则请将您的 `url` 设为 `http://yoursite.com/blog` 并把 `root` 设为 `/blog/`。\n\n### 目录\n\n| 参数             | 描述                                       | 默认值             |\n| -------------- | ---------------------------------------- | --------------- |\n| `source_dir`   | 资源文件夹，这个文件夹用来存放内容。                       | `source`        |\n| `public_dir`   | 公共文件夹，这个文件夹用于存放生成的站点文件。                  | `public`        |\n| `tag_dir`      | 标签文件夹                                    | `tags`          |\n| `archive_dir`  | 归档文件夹                                    | `archives`      |\n| `category_dir` | 分类文件夹                                    | `categories`    |\n| `code_dir`     | Include code 文件夹                         | `downloads/code |\n| `i18n_dir`     | 国际化（i18n）文件夹                             | `:lang`         |\n| `skip_render`  | 跳过指定文件的渲染，您可使用 [glob 表达式](https://github.com/isaacs/node-glob)来匹配路径。 |                 |\n\n### 文章\n\n| 参数                  | 描述                                       | 默认值       |\n| ------------------- | ---------------------------------------- | --------- |\n| `new_post_name`     | 新文章的文件名称                                 | :title.md |\n| `default_layout`    | 预设布局                                     | post      |\n| `auto_spacing`      | 在中文和英文之间加入空格                             | false     |\n| `titlecase`         | 把标题转换为 title case                        | false     |\n| `external_link`     | 在新标签中打开链接                                | true      |\n| `filename_case`     | 把文件名称转换为 (1) 小写或 (2) 大写                  | 0         |\n| `render_drafts`     | 显示草稿                                     | false     |\n| `post_asset_folder` | 启动 [Asset 文件夹](https://xuanwo.org/2015/03/26/hexo-intor/asset-folders.html) | false     |\n| `relative_link`     | 把链接改为与根目录的相对位址                           | false     |\n| `future`            | 显示未来的文章                                  | true      |\n| `highlight`         | 代码块的设置                                   |           |\n\n### 分类 & 标签\n\n| 参数                 | 描述   | 默认值             |\n| ------------------ | ---- | --------------- |\n| `default_category` | 默认分类 | `uncategorized` |\n| `category_map`     | 分类别名 |                 |\n| `tag_map`          | 标签别名 |                 |\n\n### 日期 / 时间格式\n\nHexo 使用 [Moment.js](http://momentjs.com/) 来解析和显示时间。\n\n| 参数            | 描述   | 默认值          |\n| ------------- | ---- | ------------ |\n| `date_format` | 日期格式 | `MMM D YYYY` |\n| `time_format` | 时间格式 | `H:mm:ss`    |\n\n### 分页\n\n| 参数               | 描述                    | 默认值    |\n| ---------------- | --------------------- | ------ |\n| `per_page`       | 每页显示的文章量 (0 = 关闭分页功能) | `10`   |\n| `pagination_dir` | 分页目录                  | `page` |\n\n### 扩展\n\n| 参数       | 描述                    |\n| -------- | --------------------- |\n| `theme`  | 当前主题名称。值为`false`时禁用主题 |\n| `deploy` | 部署部分的设置               |\n\n## 配置Deployment\n\n首先，你需要为自己配置身份信息，打开命令行，然后输入：\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n\n```\n\n同样在`_config.yml`文件中，找到`Deployment`，然后按照如下修改：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n\n```\n\n> 如果使用git方式进行部署，执行`npm install hexo-deployer-git --save`来安装所需的插件\n\n然后在当前目录打开命令行，输入：\n\n```\nhexo d\n\n```\n\n随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过http://yourname.github.io/来访问自己刚刚上传的网站。\n\n## 添加新文章\n\n打开Hexo目录下的`source`文件夹，所有的文章都会以md形式保存在`_post`文件夹中，只要在`_post`文件夹中新建md类型的文档，就能在执行`hexo g`的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：\n\n```\n---\ntitle: hello-world   //在此处添加你的标题。\ndate: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。\ncategories: Exercise   //在此处输入这篇文章的分类。\ntoc: true  //在此处设定是否开启目录，需要主题支持。\n---\n\n```\n\n# 进阶\n\n如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。\n\n## 更换主题\n\n*可以在此处寻找自己喜欢的主题* 下载所有的主题文件，保存到Hexo目录下的`themes`文件夹下。然后在`_config.yml`文件中修改：\n\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape //themes文件夹中对应文件夹的名称\n\n```\n\n然后先执行`hexo clean`，然后重新`hexo g`，并且`hexo d`，很快就能看到新主题的效果了~\n\n## 更换域名\n\n首先，需要注册一个域名。在中国的话，`.cn`全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用[godaddy](https://www.godaddy.com/)或[新网](http://www.xinnet.com/)或[万网](http://www.xinnet.com/)中的任意一家，自己权衡价格即可。 \n\n这里我是从是主机壳买的域名，主要这里卖moe的域名而已。在域名DNS解析管理里把CNAME类型的解析值映射到你的GitHub.io就行。\n\n{% asset_img DNS解析.png DNS解析 %}\n\n","source":"_posts/在github上搭建静态博客.md","raw":"---\ntitle: “在github上搭建静态博客”\ndate: 2017-06-04 17:55:30\ntags: 英才工程\n---\n\n​\tGitHub 是一个通过 Git 进行版本控制的代码托管平台，它提供一个二级域名解析其域名下仓库的master分支下的html页面。那么我们就可以通过这个服务假设一个自己的博客。\n\n​\t但是自己写 html 无疑是重复照轮子，而且自己诚实的来讲，实在是懒。而且人家写的脚本生成出来的页面设计好看得多嘛。于是我这里使用 hexo 框架生成静态的博客页面，当然也有其他的框架比如 jekyll。这里使用hexo纯粹就是我个人选择问题了。\n\n​\t首先你得注册一个 github 的帐号，这里默认你已经有github账号了。然后申请一个名字为 user.github.io （user为你的用户名）的仓库，访问 user.github.io 会默认解析你master分支下的index.html页面。\n\n{% asset_img 主页.png 仓库申请页面 %}\n\n​\t安装 hexo， hexo 是用node编写的，所以你得安装node环境。\n\n下载Node.js安装文件：\n\n- [Windows Installer 32-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi)\n- [Windows Installer 64-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n\n下载Git安装文件：\n\n- [Git-2.6.3-64-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe)\n\n​\t必要的环境安装完成后就可以安装hexo了。在命令行下进入你需要安装的目录然后\n\n​\t在命令行中输入：\n\n```\nnpm install hexo-cli -g\n```\n\n然后你将会看到:\n\n{% asset_img npm-install-hexo-cli.png npm-install-hexo-cli %}\n\n可能你会看到一个`WARN`，但是不用担心，这不会影响你的正常使用。 然后输入\n\n```\nnpm install hexo --save\n\n```\n\n然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：\n\n```\nhexo -v\n\n```\n\n如果你看到了如图文字，则说明已经安装成功了。\n\n{% asset_img hexo-v.png hexo-v %}\n\n## 初始化Hexo\n\n接着上面的操作，输入：\n\n```\nhexo init\n```\n\n然后输入：\n\n```\nnpm install\n\n\n```\n\n之后npm将会自动安装你需要的组件，只需要等待npm操作即可。\n\n## 首次体验Hexo\n\n继续操作，同样是在命令行中，输入：\n\n```\nhexo g\n```\n\n然后输入：\n\n```\nhexo s\n\n```\n\n然后会提示：\n\n```\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n```\n\n在浏览器中打开`http://localhost:4000/`，你将会看到：\n\n{% asset_img hexo-first-time.png hexo-first-time %}\n\n到目前为止，Hexo在本地的配置已经全都结束了。\n\n## 修改全局配置文件\n\n*此段落引用自Hexo官方文档*\n\n您可以在 `_config.yml` 中修改大部份的配置。\n\n### 网站\n\n| 参数            | 描述                                       |\n| ------------- | ---------------------------------------- |\n| `title`       | 网站标题                                     |\n| `subtitle`    | 网站副标题                                    |\n| `description` | 网站描述                                     |\n| `author`      | 您的名字                                     |\n| `language`    | 网站使用的语言                                  |\n| `timezone`    | 网站时区。Hexo 默认使用您电脑的时区。[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)。比如说：`America/New_York`, `Japan`, 和 `UTC` 。 |\n\n### 网址\n\n| 参数                  | 描述                                       | 默认值                         |\n| ------------------- | ---------------------------------------- | --------------------------- |\n| `url`               | 网址                                       |                             |\n| `root`              | 网站根目录                                    |                             |\n| `permalink`         | 文章的 [永久链接](https://xuanwo.org/2015/03/26/hexo-intor/permalinks.html) 格式 | `:year/:month/:day/:title/` |\n| `permalink_default` | 永久链接中各部分的默认值                             |                             |\n\n> 如果您的网站存放在子目录中，例如 `http://yoursite.com/blog`，则请将您的 `url` 设为 `http://yoursite.com/blog` 并把 `root` 设为 `/blog/`。\n\n### 目录\n\n| 参数             | 描述                                       | 默认值             |\n| -------------- | ---------------------------------------- | --------------- |\n| `source_dir`   | 资源文件夹，这个文件夹用来存放内容。                       | `source`        |\n| `public_dir`   | 公共文件夹，这个文件夹用于存放生成的站点文件。                  | `public`        |\n| `tag_dir`      | 标签文件夹                                    | `tags`          |\n| `archive_dir`  | 归档文件夹                                    | `archives`      |\n| `category_dir` | 分类文件夹                                    | `categories`    |\n| `code_dir`     | Include code 文件夹                         | `downloads/code |\n| `i18n_dir`     | 国际化（i18n）文件夹                             | `:lang`         |\n| `skip_render`  | 跳过指定文件的渲染，您可使用 [glob 表达式](https://github.com/isaacs/node-glob)来匹配路径。 |                 |\n\n### 文章\n\n| 参数                  | 描述                                       | 默认值       |\n| ------------------- | ---------------------------------------- | --------- |\n| `new_post_name`     | 新文章的文件名称                                 | :title.md |\n| `default_layout`    | 预设布局                                     | post      |\n| `auto_spacing`      | 在中文和英文之间加入空格                             | false     |\n| `titlecase`         | 把标题转换为 title case                        | false     |\n| `external_link`     | 在新标签中打开链接                                | true      |\n| `filename_case`     | 把文件名称转换为 (1) 小写或 (2) 大写                  | 0         |\n| `render_drafts`     | 显示草稿                                     | false     |\n| `post_asset_folder` | 启动 [Asset 文件夹](https://xuanwo.org/2015/03/26/hexo-intor/asset-folders.html) | false     |\n| `relative_link`     | 把链接改为与根目录的相对位址                           | false     |\n| `future`            | 显示未来的文章                                  | true      |\n| `highlight`         | 代码块的设置                                   |           |\n\n### 分类 & 标签\n\n| 参数                 | 描述   | 默认值             |\n| ------------------ | ---- | --------------- |\n| `default_category` | 默认分类 | `uncategorized` |\n| `category_map`     | 分类别名 |                 |\n| `tag_map`          | 标签别名 |                 |\n\n### 日期 / 时间格式\n\nHexo 使用 [Moment.js](http://momentjs.com/) 来解析和显示时间。\n\n| 参数            | 描述   | 默认值          |\n| ------------- | ---- | ------------ |\n| `date_format` | 日期格式 | `MMM D YYYY` |\n| `time_format` | 时间格式 | `H:mm:ss`    |\n\n### 分页\n\n| 参数               | 描述                    | 默认值    |\n| ---------------- | --------------------- | ------ |\n| `per_page`       | 每页显示的文章量 (0 = 关闭分页功能) | `10`   |\n| `pagination_dir` | 分页目录                  | `page` |\n\n### 扩展\n\n| 参数       | 描述                    |\n| -------- | --------------------- |\n| `theme`  | 当前主题名称。值为`false`时禁用主题 |\n| `deploy` | 部署部分的设置               |\n\n## 配置Deployment\n\n首先，你需要为自己配置身份信息，打开命令行，然后输入：\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n\n```\n\n同样在`_config.yml`文件中，找到`Deployment`，然后按照如下修改：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n\n```\n\n> 如果使用git方式进行部署，执行`npm install hexo-deployer-git --save`来安装所需的插件\n\n然后在当前目录打开命令行，输入：\n\n```\nhexo d\n\n```\n\n随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过http://yourname.github.io/来访问自己刚刚上传的网站。\n\n## 添加新文章\n\n打开Hexo目录下的`source`文件夹，所有的文章都会以md形式保存在`_post`文件夹中，只要在`_post`文件夹中新建md类型的文档，就能在执行`hexo g`的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：\n\n```\n---\ntitle: hello-world   //在此处添加你的标题。\ndate: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。\ncategories: Exercise   //在此处输入这篇文章的分类。\ntoc: true  //在此处设定是否开启目录，需要主题支持。\n---\n\n```\n\n# 进阶\n\n如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。\n\n## 更换主题\n\n*可以在此处寻找自己喜欢的主题* 下载所有的主题文件，保存到Hexo目录下的`themes`文件夹下。然后在`_config.yml`文件中修改：\n\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape //themes文件夹中对应文件夹的名称\n\n```\n\n然后先执行`hexo clean`，然后重新`hexo g`，并且`hexo d`，很快就能看到新主题的效果了~\n\n## 更换域名\n\n首先，需要注册一个域名。在中国的话，`.cn`全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用[godaddy](https://www.godaddy.com/)或[新网](http://www.xinnet.com/)或[万网](http://www.xinnet.com/)中的任意一家，自己权衡价格即可。 \n\n这里我是从是主机壳买的域名，主要这里卖moe的域名而已。在域名DNS解析管理里把CNAME类型的解析值映射到你的GitHub.io就行。\n\n{% asset_img DNS解析.png DNS解析 %}\n\n","slug":"在github上搭建静态博客","published":1,"updated":"2018-07-25T13:30:08.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9okns1001lgvd9jt4t2grc","content":"<p>​    GitHub 是一个通过 Git 进行版本控制的代码托管平台，它提供一个二级域名解析其域名下仓库的master分支下的html页面。那么我们就可以通过这个服务假设一个自己的博客。</p>\n<p>​    但是自己写 html 无疑是重复照轮子，而且自己诚实的来讲，实在是懒。而且人家写的脚本生成出来的页面设计好看得多嘛。于是我这里使用 hexo 框架生成静态的博客页面，当然也有其他的框架比如 jekyll。这里使用hexo纯粹就是我个人选择问题了。</p>\n<p>​    首先你得注册一个 github 的帐号，这里默认你已经有github账号了。然后申请一个名字为 user.github.io （user为你的用户名）的仓库，访问 user.github.io 会默认解析你master分支下的index.html页面。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/主页.png\" title=\"仓库申请页面\">\n<p>​    安装 hexo， hexo 是用node编写的，所以你得安装node环境。</p>\n<p>下载Node.js安装文件：</p>\n<ul>\n<li><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi\" target=\"_blank\" rel=\"noopener\">Windows Installer 32-bit</a></li>\n<li><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\" target=\"_blank\" rel=\"noopener\">Windows Installer 64-bit</a></li>\n</ul>\n<p>下载Git安装文件：</p>\n<ul>\n<li><a href=\"https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe\" target=\"_blank\" rel=\"noopener\">Git-2.6.3-64-bit.exe</a></li>\n</ul>\n<p>​    必要的环境安装完成后就可以安装hexo了。在命令行下进入你需要安装的目录然后</p>\n<p>​    在命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>然后你将会看到:</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/npm-install-hexo-cli.png\" title=\"npm-install-hexo-cli\">\n<p>可能你会看到一个<code>WARN</code>，但是不用担心，这不会影响你的正常使用。 然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n<p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p>如果你看到了如图文字，则说明已经安装成功了。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/hexo-v.png\" title=\"hexo-v\">\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>接着上面的操作，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>\n<h2 id=\"首次体验Hexo\"><a href=\"#首次体验Hexo\" class=\"headerlink\" title=\"首次体验Hexo\"></a>首次体验Hexo</h2><p>继续操作，同样是在命令行中，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>然后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开<code>http://localhost:4000/</code>，你将会看到：</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/hexo-first-time.png\" title=\"hexo-first-time\">\n<p>到目前为止，Hexo在本地的配置已经全都结束了。</p>\n<h2 id=\"修改全局配置文件\"><a href=\"#修改全局配置文件\" class=\"headerlink\" title=\"修改全局配置文件\"></a>修改全局配置文件</h2><p><em>此段落引用自Hexo官方文档</em></p>\n<p>您可以在 <code>_config.yml</code> 中修改大部份的配置。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td><code>subtitle</code></td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td><code>timezone</code></td>\n<td>网站时区。Hexo 默认使用您电脑的时区。<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>url</code></td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>文章的 <a href=\"https://xuanwo.org/2015/03/26/hexo-intor/permalinks.html\" target=\"_blank\" rel=\"noopener\">永久链接</a> 格式</td>\n<td><code>:year/:month/:day/:title/</code></td>\n</tr>\n<tr>\n<td><code>permalink_default</code></td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>\n</blockquote>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>source_dir</code></td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td><code>source</code></td>\n</tr>\n<tr>\n<td><code>public_dir</code></td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td><code>public</code></td>\n</tr>\n<tr>\n<td><code>tag_dir</code></td>\n<td>标签文件夹</td>\n<td><code>tags</code></td>\n</tr>\n<tr>\n<td><code>archive_dir</code></td>\n<td>归档文件夹</td>\n<td><code>archives</code></td>\n</tr>\n<tr>\n<td><code>category_dir</code></td>\n<td>分类文件夹</td>\n<td><code>categories</code></td>\n</tr>\n<tr>\n<td><code>code_dir</code></td>\n<td>Include code 文件夹</td>\n<td>`downloads/code</td>\n</tr>\n<tr>\n<td><code>i18n_dir</code></td>\n<td>国际化（i18n）文件夹</td>\n<td><code>:lang</code></td>\n</tr>\n<tr>\n<td><code>skip_render</code></td>\n<td>跳过指定文件的渲染，您可使用 <a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"noopener\">glob 表达式</a>来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>new_post_name</code></td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td><code>default_layout</code></td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td><code>auto_spacing</code></td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>titlecase</code></td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>external_link</code></td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>filename_case</code></td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>render_drafts</code></td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>post_asset_folder</code></td>\n<td>启动 <a href=\"https://xuanwo.org/2015/03/26/hexo-intor/asset-folders.html\" target=\"_blank\" rel=\"noopener\">Asset 文件夹</a></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>relative_link</code></td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>future</code></td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>default_category</code></td>\n<td>默认分类</td>\n<td><code>uncategorized</code></td>\n</tr>\n<tr>\n<td><code>category_map</code></td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td><code>tag_map</code></td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h3><p>Hexo 使用 <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment.js</a> 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>date_format</code></td>\n<td>日期格式</td>\n<td><code>MMM D YYYY</code></td>\n</tr>\n<tr>\n<td><code>time_format</code></td>\n<td>时间格式</td>\n<td><code>H:mm:ss</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>per_page</code></td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td><code>pagination_dir</code></td>\n<td>分页目录</td>\n<td><code>page</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>theme</code></td>\n<td>当前主题名称。值为<code>false</code>时禁用主题</td>\n</tr>\n<tr>\n<td><code>deploy</code></td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"配置Deployment\"><a href=\"#配置Deployment\" class=\"headerlink\" title=\"配置Deployment\"></a>配置Deployment</h2><p>首先，你需要为自己配置身份信息，打开命令行，然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>同样在<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果使用git方式进行部署，执行<code>npm install hexo-deployer-git --save</code>来安装所需的插件</p>\n</blockquote>\n<p>然后在当前目录打开命令行，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过<a href=\"http://yourname.github.io/来访问自己刚刚上传的网站。\" target=\"_blank\" rel=\"noopener\">http://yourname.github.io/来访问自己刚刚上传的网站。</a></p>\n<h2 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h2><p>打开Hexo目录下的<code>source</code>文件夹，所有的文章都会以md形式保存在<code>_post</code>文件夹中，只要在<code>_post</code>文件夹中新建md类型的文档，就能在执行<code>hexo g</code>的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hello-world   //在此处添加你的标题。</span><br><span class=\"line\">date: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。</span><br><span class=\"line\">categories: Exercise   //在此处输入这篇文章的分类。</span><br><span class=\"line\">toc: true  //在此处设定是否开启目录，需要主题支持。</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。</p>\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p><em>可以在此处寻找自己喜欢的主题</em> 下载所有的主题文件，保存到Hexo目录下的<code>themes</code>文件夹下。然后在<code>_config.yml</code>文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http://hexo.io/plugins/</span><br><span class=\"line\">## Themes: http://hexo.io/themes/</span><br><span class=\"line\">theme: landscape //themes文件夹中对应文件夹的名称</span><br></pre></td></tr></table></figure>\n<p>然后先执行<code>hexo clean</code>，然后重新<code>hexo g</code>，并且<code>hexo d</code>，很快就能看到新主题的效果了~</p>\n<h2 id=\"更换域名\"><a href=\"#更换域名\" class=\"headerlink\" title=\"更换域名\"></a>更换域名</h2><p>首先，需要注册一个域名。在中国的话，<code>.cn</code>全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">godaddy</a>或<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">新网</a>或<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">万网</a>中的任意一家，自己权衡价格即可。 </p>\n<p>这里我是从是主机壳买的域名，主要这里卖moe的域名而已。在域名DNS解析管理里把CNAME类型的解析值映射到你的GitHub.io就行。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/DNS解析.png\" title=\"DNS解析\">\n","site":{"data":{}},"excerpt":"","more":"<p>​    GitHub 是一个通过 Git 进行版本控制的代码托管平台，它提供一个二级域名解析其域名下仓库的master分支下的html页面。那么我们就可以通过这个服务假设一个自己的博客。</p>\n<p>​    但是自己写 html 无疑是重复照轮子，而且自己诚实的来讲，实在是懒。而且人家写的脚本生成出来的页面设计好看得多嘛。于是我这里使用 hexo 框架生成静态的博客页面，当然也有其他的框架比如 jekyll。这里使用hexo纯粹就是我个人选择问题了。</p>\n<p>​    首先你得注册一个 github 的帐号，这里默认你已经有github账号了。然后申请一个名字为 user.github.io （user为你的用户名）的仓库，访问 user.github.io 会默认解析你master分支下的index.html页面。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/主页.png\" title=\"仓库申请页面\">\n<p>​    安装 hexo， hexo 是用node编写的，所以你得安装node环境。</p>\n<p>下载Node.js安装文件：</p>\n<ul>\n<li><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi\" target=\"_blank\" rel=\"noopener\">Windows Installer 32-bit</a></li>\n<li><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\" target=\"_blank\" rel=\"noopener\">Windows Installer 64-bit</a></li>\n</ul>\n<p>下载Git安装文件：</p>\n<ul>\n<li><a href=\"https://github.com/git-for-windows/git/releases/download/v2.6.3.windows.1/Git-2.6.3-64-bit.exe\" target=\"_blank\" rel=\"noopener\">Git-2.6.3-64-bit.exe</a></li>\n</ul>\n<p>​    必要的环境安装完成后就可以安装hexo了。在命令行下进入你需要安装的目录然后</p>\n<p>​    在命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>然后你将会看到:</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/npm-install-hexo-cli.png\" title=\"npm-install-hexo-cli\">\n<p>可能你会看到一个<code>WARN</code>，但是不用担心，这不会影响你的正常使用。 然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n<p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p>如果你看到了如图文字，则说明已经安装成功了。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/hexo-v.png\" title=\"hexo-v\">\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>接着上面的操作，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>\n<h2 id=\"首次体验Hexo\"><a href=\"#首次体验Hexo\" class=\"headerlink\" title=\"首次体验Hexo\"></a>首次体验Hexo</h2><p>继续操作，同样是在命令行中，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>然后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开<code>http://localhost:4000/</code>，你将会看到：</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/hexo-first-time.png\" title=\"hexo-first-time\">\n<p>到目前为止，Hexo在本地的配置已经全都结束了。</p>\n<h2 id=\"修改全局配置文件\"><a href=\"#修改全局配置文件\" class=\"headerlink\" title=\"修改全局配置文件\"></a>修改全局配置文件</h2><p><em>此段落引用自Hexo官方文档</em></p>\n<p>您可以在 <code>_config.yml</code> 中修改大部份的配置。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td><code>subtitle</code></td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td><code>timezone</code></td>\n<td>网站时区。Hexo 默认使用您电脑的时区。<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>url</code></td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>文章的 <a href=\"https://xuanwo.org/2015/03/26/hexo-intor/permalinks.html\" target=\"_blank\" rel=\"noopener\">永久链接</a> 格式</td>\n<td><code>:year/:month/:day/:title/</code></td>\n</tr>\n<tr>\n<td><code>permalink_default</code></td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>\n</blockquote>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>source_dir</code></td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td><code>source</code></td>\n</tr>\n<tr>\n<td><code>public_dir</code></td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td><code>public</code></td>\n</tr>\n<tr>\n<td><code>tag_dir</code></td>\n<td>标签文件夹</td>\n<td><code>tags</code></td>\n</tr>\n<tr>\n<td><code>archive_dir</code></td>\n<td>归档文件夹</td>\n<td><code>archives</code></td>\n</tr>\n<tr>\n<td><code>category_dir</code></td>\n<td>分类文件夹</td>\n<td><code>categories</code></td>\n</tr>\n<tr>\n<td><code>code_dir</code></td>\n<td>Include code 文件夹</td>\n<td>`downloads/code</td>\n</tr>\n<tr>\n<td><code>i18n_dir</code></td>\n<td>国际化（i18n）文件夹</td>\n<td><code>:lang</code></td>\n</tr>\n<tr>\n<td><code>skip_render</code></td>\n<td>跳过指定文件的渲染，您可使用 <a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"noopener\">glob 表达式</a>来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>new_post_name</code></td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td><code>default_layout</code></td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td><code>auto_spacing</code></td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>titlecase</code></td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>external_link</code></td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>filename_case</code></td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>render_drafts</code></td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>post_asset_folder</code></td>\n<td>启动 <a href=\"https://xuanwo.org/2015/03/26/hexo-intor/asset-folders.html\" target=\"_blank\" rel=\"noopener\">Asset 文件夹</a></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>relative_link</code></td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>future</code></td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>default_category</code></td>\n<td>默认分类</td>\n<td><code>uncategorized</code></td>\n</tr>\n<tr>\n<td><code>category_map</code></td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td><code>tag_map</code></td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h3><p>Hexo 使用 <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment.js</a> 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>date_format</code></td>\n<td>日期格式</td>\n<td><code>MMM D YYYY</code></td>\n</tr>\n<tr>\n<td><code>time_format</code></td>\n<td>时间格式</td>\n<td><code>H:mm:ss</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>per_page</code></td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td><code>pagination_dir</code></td>\n<td>分页目录</td>\n<td><code>page</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>theme</code></td>\n<td>当前主题名称。值为<code>false</code>时禁用主题</td>\n</tr>\n<tr>\n<td><code>deploy</code></td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"配置Deployment\"><a href=\"#配置Deployment\" class=\"headerlink\" title=\"配置Deployment\"></a>配置Deployment</h2><p>首先，你需要为自己配置身份信息，打开命令行，然后输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>同样在<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果使用git方式进行部署，执行<code>npm install hexo-deployer-git --save</code>来安装所需的插件</p>\n</blockquote>\n<p>然后在当前目录打开命令行，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过<a href=\"http://yourname.github.io/来访问自己刚刚上传的网站。\" target=\"_blank\" rel=\"noopener\">http://yourname.github.io/来访问自己刚刚上传的网站。</a></p>\n<h2 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h2><p>打开Hexo目录下的<code>source</code>文件夹，所有的文章都会以md形式保存在<code>_post</code>文件夹中，只要在<code>_post</code>文件夹中新建md类型的文档，就能在执行<code>hexo g</code>的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hello-world   //在此处添加你的标题。</span><br><span class=\"line\">date: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。</span><br><span class=\"line\">categories: Exercise   //在此处输入这篇文章的分类。</span><br><span class=\"line\">toc: true  //在此处设定是否开启目录，需要主题支持。</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂，下面的进阶技巧将会让你获得对Hexo更为深入的了解。</p>\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p><em>可以在此处寻找自己喜欢的主题</em> 下载所有的主题文件，保存到Hexo目录下的<code>themes</code>文件夹下。然后在<code>_config.yml</code>文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http://hexo.io/plugins/</span><br><span class=\"line\">## Themes: http://hexo.io/themes/</span><br><span class=\"line\">theme: landscape //themes文件夹中对应文件夹的名称</span><br></pre></td></tr></table></figure>\n<p>然后先执行<code>hexo clean</code>，然后重新<code>hexo g</code>，并且<code>hexo d</code>，很快就能看到新主题的效果了~</p>\n<h2 id=\"更换域名\"><a href=\"#更换域名\" class=\"headerlink\" title=\"更换域名\"></a>更换域名</h2><p>首先，需要注册一个域名。在中国的话，<code>.cn</code>全都需要进行备案，如果不想备案的话，请注册别的顶级域名，可以使用<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">godaddy</a>或<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">新网</a>或<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">万网</a>中的任意一家，自己权衡价格即可。 </p>\n<p>这里我是从是主机壳买的域名，主要这里卖moe的域名而已。在域名DNS解析管理里把CNAME类型的解析值映射到你的GitHub.io就行。</p>\n<img src=\"/2017/06/04/在github上搭建静态博客/DNS解析.png\" title=\"DNS解析\">\n"},{"title":"多贝云的一次电话面试","date":"2018-05-19T14:41:48.000Z","_content":"\n​\t在上一次多贝云的笔试完之后，宣讲会上介绍公司都是处理上万的QPS, 每天上百G的日子，特别是CTO讲到现在特别需求的是C++的程序员后就没报太大希望了。 本以为技术栈不符合会被拒的。。。但是一天中午我微信有个好友申请说是多贝云的人。我就一下子激灵了。\n\n​\t他先自我介绍了一方，讲了一下多贝云现在的技术栈，使用的语言，和Python现在在它们公司在做的事情。说是想和我先聊聊。先是问题是对Python有特别的偏好吗?是什么原因让你学Python呢?\n\n​\t之前在绿盟也谈到为什么要学Python语言，有什么喜欢的地方。然后就说了因为之前写一个项目技术栈用到Flask， 感觉Python语言特别方便，语法糖很喜欢。故现在做课程作业也都在用Python写。也不是对编程语言有啥特别的偏好，如果做的事情有意思我觉得语言不是障碍。\n\n​\t之前绿盟的面试官在我讲到语法糖后突然让我表达一下什么是语法糖。我就说了 for in 这样的循环，在迭代一个列表的时候特别直观。C++里就得循环一个下标列表，使用下标去从数组里取。话说 for 循环算不算 while 的一个语法糖？然后装饰器也算一个？ （那时候面对面的情况慌得不行，感觉很多情况下我想表达的东西都没能正确无误的表达出来）\n\n​\t之后问了我以后是否想来北京工作，我回答我之后想去北上广。当然真实情况是那个地方有广式的烤鸭就行。。。\t武汉的烤鸭和我印象里的烤鸭根本不一样！！！真的，每个人都应该了解下广式的烤鸭。真的不是武汉这样干巴巴的。\n\n​\t之后就说让HR和我约下面试时间！不久一个小姐姐就打电话过来，预约了两天后的早上十点，电话面试。还特别提到需要一台电脑，可能会用到。\n\n​\t预约的那天早上10点钟过一点就有一个北京的电话打进来，自我介绍了一下是多贝云的且那天在微信和我聊过之后面试就开始了。面试官那边还说了看过我的博客，了解了我的一些技术栈，然后让我介绍一下我简历上做的项目。（话说我简历上也没写上我的博客地址，估计还翻了一下我的Github，真是感激了。），然后我简单的说了一下交易所做的事情，然后问了项目是否在线上跑，问了一下地址。我说了[HTTPS://Stock.malu.moe](https://Stock.malu.moe), 那时候觉得里面爬的都是里番。。直接给面试官看是不是不太好。。他突然说了是不是[ACGN-STOCK.com](ACGN-STOCK.com)，连忙解释不是这个，但是是按照这个做的，很喜欢这个网站。后面面试官也没深究是哪个网站。。。不知道是不在乎还是在博文里找到了。\n\n​\t接下来便是面试官一轮一轮的提问了，期间交流了一个小时，我只尽量回忆起一些问题并记录下来。\n\nQ.然后就着项目问我项目在服务器上是怎么运行的，我说了uwsgi+nginx。问道了session是怎么管理的，\n\nA.使用的Flask里内置的。但是Falsk的session在客户端是以cookie储存的。\n\nQ.有了解过Falsk里面session储存是怎么实现的吗？\n\nA.没有，后面了解Flask里面每个请求的默认的 session 对象是 `SecureCookieSession`，这个类就是一个基本的字典，外加一些特殊的属性。\n\nQ.假如你这项目由多个后端，你觉得该怎么解决session在后端的储存，怎么保证用户的登录状态。\n\nA.先是回答没有了解过，但是面试官会鼓励你尝试的去给个解决方案，我说道使用同步保存session的数据库，或者保证处理用户的始终是一个，不变的服务器。最后面试官说确实这两种方法都会用到，也都是混合使用的。\n\nQ.你项目里用到Redis做了什么，是怎么缓存数据库的数据的。怎么保证数据的状态是最新的。\n\nA.做了爬虫的缓存，和一些查询数据库的缓存。查询到数据库数据后格式化为JSON数据储存起来，下次查询先查Redis时候由这条查询，如果由就直接返回Redis里的数据，没有就查询数据库把查询到的数据储存到Redis里再染回数据。Redis里我会设置过期时间，而缓存的数据有效性都是一天的，因为我爬虫设置每天才更新一次，这样解决数据有效性的问题。\n\n之后有问到网页怎么架设的，我说uwsgi + Nginx 但是估计我Nginx发音有问题？他没听清，我也怂了。。就说了没有，他也很困惑的结束了这个问题。估计是想问Nginx ?\n\nQ.多进程对处理多个用户是怎么处理的，有什么好处\n\nA.这个没了解。但是在鼓励下说了多个进程能够处理多个用户的同时请求。感觉不是很满意？当然不满意！\n\n那时候我感觉4个进程只能同时解决4个用户同时请求，多了就得等待？自己也感觉不对。\n\n之后了解了下Nginx现在是多进程+异步非阻塞的方式实现高并发。使用异步能大幅度的解决多个用户同时访问的问题，多个socket使用一个进程，当socket处理到出现阻塞时进程便处理其他的socket，当socket请求来了再回调进程去给他处理。\n\n类似处理网络请求的实现是在Linux上是一些IO操作，而Linux上的IO操作模式至今可分为三个阶段，分别为select，poll，epoll。poll解决了select的一些问题，但是其模式还是类似任务调度的轮询，在处理多个任务（socket）时性能会大幅下降。epoll的出现彻底实现了回调的操作，使得相较poll的方法性能有大幅度的提升。\n\n\n\n而使用多个进程能够充分利用现在CPU的多核，但是每个进程下仍是处理多个socket。使得实现了现在的高并发。\n\n但是系统的问题多个进程会有 ” 惊群“ 问题，大概意思就是又回到需要一个进程处理但是系统会唤起所有进程。又退回到轮询的状态，好在现在各有个的解决方案。\n\n\n\n之后面试官微信发给我一个链接，打开后是编辑器的页面，两边能够同时在上面码代码。\n\n写了一个函数的框架，叫我实现具体细节，类似寻找数组里的数返回其下标，期间根据要求修改了几次。在做题的时候时刻提醒自己要考虑各种输入情况，但是实战的时候还是实现功能就感觉完成了。\n\n之后问到了迭代器和生成器，那一段时间因为我页面不在打开的页面没有看到面试官的输入，也没理解面试官问的是什么问题。。。神游了一段时间，那段时间真的感觉无比漫长，感觉那时候都要挂了。\n\n提问大概是搜索数据库返回的是什么，大概是想问题迭代器的问题？然后我没有看到他的输入，估计也是对着代码对我提问，等我切回页面一看多了一大段代码。。。神游回来顿时出了冷汗。\n\n面试官看我不明白还给我解释了好多。。。\n\n我发现我对生成器和迭代器的概念弄错了。。我还以为我以前用的这个是生成器，但是这个是列表生成式\n\n```python\niter = [i for i in range(0, 5)]\n```\n\n下面这个才是生成器，\n\n```python\niter = (i for i in range(0, 5))\n```\n\n[] 返回的是一个列表，()返回一个生成器。生成器的计算是惰性的，当使用next()计算是才会返回下一个值\n\n而可以被next()函数不断调用返回下一个值的是迭代器，不同于可被迭代的概念，迭代器内部是yield实现的，\n\n会记录你的返回位置下一次从这里开始。\n\n在for 循环里是通过iter()方法将可迭代对象转化成迭代器，重复调用next()方法实现的。知道for语句捕获到`StopIteration` 异常。\n\n之后还问了我可变对象和不可变对象，除了列表和字典外都是不可变对象。问了我 is 和 == 的区别。\n\n问了我是否知道那些数据在Python底层的实现，回答不知道。大概是想问我字典那一类的数据是怎么储存的？\n\n然后借此聊到hash表？怎么解决冲突？\n\n然后问了我能否解释的结果\n\n```python\na = 3\nb = 3\na == b\na is b\n\nstr1 == 'test'\nstr2 == 'test'\nstr1 == str2\nstr1 is str2\n```\n\n我回答 is 是判断两个对象是否相等，== 是判断两个对象的值是相等。\n\n结果是两个结果都是True。。。我还以为我至少数字答对了呢。。结果不是\n\nPython对于小整数有对象池技术，在Python2.7中，“小整数”的定义是[-5,256]，在这个范围内的整数Python提前建立一段内存储存用于共享，\n\nPyhon的字符串有Intern机制。它指的就是在创建一个新的字符串对象时，如果已经有了和它的值相同的字符串对象，那么就直接返回那个对象的引用，而不返回新创建的字符串对象。\n\n顺便还问了我是否知道id()这个函数，我回答知道，查看对象内存地址的值？不知道是否能够领会我的意思，反正肯定不是标准答案。\n\n之后问道了我[REST API ](http://www.restapitutorial.com/)是怎么的一个概念。回答到用URL表示资源,HTTP 请求方法对资源的操作。返回的状态表示操作的结果。（在绿盟的时候面试官说了http请求请求方法不就是这么用的么？自己突然怀疑起自己是否真的了解RESTful，和他举例会有URL里有add的字段表示对这个资源的一个get请求是一个添加的操作这个请求方法是不对应的但是感觉他也不是很赞同。但是我也看到同学会用post方法请求一个数据说法是post方法更安全且不会被缓存，可以可被请求的资源为什么要隐藏地址呢？还是需要什么字段验证身份吗？使用cookie会不会更优雅？）\n\n之后问到了VUE，赶紧解释道只是我页面需要我才学了一点，不是很精通，现在前端发展得都是各种框架。和当初认识的根本不是一个样子。面试官人也很好没问了。。。\n\n之后便是问道今后的发展规划，想去的城市，爱好之类的。\n\n其实讲到发展规划我到也没特别在意，是不是感觉给人规划好自己五年十年的道路这个人会靠谱些对自己负责？\n\n有时候确实是这种感觉，可是我高中的时候我还想当一名前端工程师呢？如今看起来感觉当初对前后端也没多了解接触更多的是前端这方面的东西，而且后端那时候对我感觉像是一团迷雾，我根本不知道在服务器后面是怎么处理一起请求并返回数据给前端的。或许我觉得我在一个又一个项目中总能你朝着自己感兴趣的方向学习就是对自己的负责了吧。现在看来我更喜欢处理后端的事物，对高并发，大量数据有种蜜汁快感。\n\n","source":"_posts/多贝云的一次电话面试.md","raw":"---\ntitle: 多贝云的一次电话面试\ndate: 2018-05-19 22:41:48\ntags: 面试， 多贝云\n---\n\n​\t在上一次多贝云的笔试完之后，宣讲会上介绍公司都是处理上万的QPS, 每天上百G的日子，特别是CTO讲到现在特别需求的是C++的程序员后就没报太大希望了。 本以为技术栈不符合会被拒的。。。但是一天中午我微信有个好友申请说是多贝云的人。我就一下子激灵了。\n\n​\t他先自我介绍了一方，讲了一下多贝云现在的技术栈，使用的语言，和Python现在在它们公司在做的事情。说是想和我先聊聊。先是问题是对Python有特别的偏好吗?是什么原因让你学Python呢?\n\n​\t之前在绿盟也谈到为什么要学Python语言，有什么喜欢的地方。然后就说了因为之前写一个项目技术栈用到Flask， 感觉Python语言特别方便，语法糖很喜欢。故现在做课程作业也都在用Python写。也不是对编程语言有啥特别的偏好，如果做的事情有意思我觉得语言不是障碍。\n\n​\t之前绿盟的面试官在我讲到语法糖后突然让我表达一下什么是语法糖。我就说了 for in 这样的循环，在迭代一个列表的时候特别直观。C++里就得循环一个下标列表，使用下标去从数组里取。话说 for 循环算不算 while 的一个语法糖？然后装饰器也算一个？ （那时候面对面的情况慌得不行，感觉很多情况下我想表达的东西都没能正确无误的表达出来）\n\n​\t之后问了我以后是否想来北京工作，我回答我之后想去北上广。当然真实情况是那个地方有广式的烤鸭就行。。。\t武汉的烤鸭和我印象里的烤鸭根本不一样！！！真的，每个人都应该了解下广式的烤鸭。真的不是武汉这样干巴巴的。\n\n​\t之后就说让HR和我约下面试时间！不久一个小姐姐就打电话过来，预约了两天后的早上十点，电话面试。还特别提到需要一台电脑，可能会用到。\n\n​\t预约的那天早上10点钟过一点就有一个北京的电话打进来，自我介绍了一下是多贝云的且那天在微信和我聊过之后面试就开始了。面试官那边还说了看过我的博客，了解了我的一些技术栈，然后让我介绍一下我简历上做的项目。（话说我简历上也没写上我的博客地址，估计还翻了一下我的Github，真是感激了。），然后我简单的说了一下交易所做的事情，然后问了项目是否在线上跑，问了一下地址。我说了[HTTPS://Stock.malu.moe](https://Stock.malu.moe), 那时候觉得里面爬的都是里番。。直接给面试官看是不是不太好。。他突然说了是不是[ACGN-STOCK.com](ACGN-STOCK.com)，连忙解释不是这个，但是是按照这个做的，很喜欢这个网站。后面面试官也没深究是哪个网站。。。不知道是不在乎还是在博文里找到了。\n\n​\t接下来便是面试官一轮一轮的提问了，期间交流了一个小时，我只尽量回忆起一些问题并记录下来。\n\nQ.然后就着项目问我项目在服务器上是怎么运行的，我说了uwsgi+nginx。问道了session是怎么管理的，\n\nA.使用的Flask里内置的。但是Falsk的session在客户端是以cookie储存的。\n\nQ.有了解过Falsk里面session储存是怎么实现的吗？\n\nA.没有，后面了解Flask里面每个请求的默认的 session 对象是 `SecureCookieSession`，这个类就是一个基本的字典，外加一些特殊的属性。\n\nQ.假如你这项目由多个后端，你觉得该怎么解决session在后端的储存，怎么保证用户的登录状态。\n\nA.先是回答没有了解过，但是面试官会鼓励你尝试的去给个解决方案，我说道使用同步保存session的数据库，或者保证处理用户的始终是一个，不变的服务器。最后面试官说确实这两种方法都会用到，也都是混合使用的。\n\nQ.你项目里用到Redis做了什么，是怎么缓存数据库的数据的。怎么保证数据的状态是最新的。\n\nA.做了爬虫的缓存，和一些查询数据库的缓存。查询到数据库数据后格式化为JSON数据储存起来，下次查询先查Redis时候由这条查询，如果由就直接返回Redis里的数据，没有就查询数据库把查询到的数据储存到Redis里再染回数据。Redis里我会设置过期时间，而缓存的数据有效性都是一天的，因为我爬虫设置每天才更新一次，这样解决数据有效性的问题。\n\n之后有问到网页怎么架设的，我说uwsgi + Nginx 但是估计我Nginx发音有问题？他没听清，我也怂了。。就说了没有，他也很困惑的结束了这个问题。估计是想问Nginx ?\n\nQ.多进程对处理多个用户是怎么处理的，有什么好处\n\nA.这个没了解。但是在鼓励下说了多个进程能够处理多个用户的同时请求。感觉不是很满意？当然不满意！\n\n那时候我感觉4个进程只能同时解决4个用户同时请求，多了就得等待？自己也感觉不对。\n\n之后了解了下Nginx现在是多进程+异步非阻塞的方式实现高并发。使用异步能大幅度的解决多个用户同时访问的问题，多个socket使用一个进程，当socket处理到出现阻塞时进程便处理其他的socket，当socket请求来了再回调进程去给他处理。\n\n类似处理网络请求的实现是在Linux上是一些IO操作，而Linux上的IO操作模式至今可分为三个阶段，分别为select，poll，epoll。poll解决了select的一些问题，但是其模式还是类似任务调度的轮询，在处理多个任务（socket）时性能会大幅下降。epoll的出现彻底实现了回调的操作，使得相较poll的方法性能有大幅度的提升。\n\n\n\n而使用多个进程能够充分利用现在CPU的多核，但是每个进程下仍是处理多个socket。使得实现了现在的高并发。\n\n但是系统的问题多个进程会有 ” 惊群“ 问题，大概意思就是又回到需要一个进程处理但是系统会唤起所有进程。又退回到轮询的状态，好在现在各有个的解决方案。\n\n\n\n之后面试官微信发给我一个链接，打开后是编辑器的页面，两边能够同时在上面码代码。\n\n写了一个函数的框架，叫我实现具体细节，类似寻找数组里的数返回其下标，期间根据要求修改了几次。在做题的时候时刻提醒自己要考虑各种输入情况，但是实战的时候还是实现功能就感觉完成了。\n\n之后问到了迭代器和生成器，那一段时间因为我页面不在打开的页面没有看到面试官的输入，也没理解面试官问的是什么问题。。。神游了一段时间，那段时间真的感觉无比漫长，感觉那时候都要挂了。\n\n提问大概是搜索数据库返回的是什么，大概是想问题迭代器的问题？然后我没有看到他的输入，估计也是对着代码对我提问，等我切回页面一看多了一大段代码。。。神游回来顿时出了冷汗。\n\n面试官看我不明白还给我解释了好多。。。\n\n我发现我对生成器和迭代器的概念弄错了。。我还以为我以前用的这个是生成器，但是这个是列表生成式\n\n```python\niter = [i for i in range(0, 5)]\n```\n\n下面这个才是生成器，\n\n```python\niter = (i for i in range(0, 5))\n```\n\n[] 返回的是一个列表，()返回一个生成器。生成器的计算是惰性的，当使用next()计算是才会返回下一个值\n\n而可以被next()函数不断调用返回下一个值的是迭代器，不同于可被迭代的概念，迭代器内部是yield实现的，\n\n会记录你的返回位置下一次从这里开始。\n\n在for 循环里是通过iter()方法将可迭代对象转化成迭代器，重复调用next()方法实现的。知道for语句捕获到`StopIteration` 异常。\n\n之后还问了我可变对象和不可变对象，除了列表和字典外都是不可变对象。问了我 is 和 == 的区别。\n\n问了我是否知道那些数据在Python底层的实现，回答不知道。大概是想问我字典那一类的数据是怎么储存的？\n\n然后借此聊到hash表？怎么解决冲突？\n\n然后问了我能否解释的结果\n\n```python\na = 3\nb = 3\na == b\na is b\n\nstr1 == 'test'\nstr2 == 'test'\nstr1 == str2\nstr1 is str2\n```\n\n我回答 is 是判断两个对象是否相等，== 是判断两个对象的值是相等。\n\n结果是两个结果都是True。。。我还以为我至少数字答对了呢。。结果不是\n\nPython对于小整数有对象池技术，在Python2.7中，“小整数”的定义是[-5,256]，在这个范围内的整数Python提前建立一段内存储存用于共享，\n\nPyhon的字符串有Intern机制。它指的就是在创建一个新的字符串对象时，如果已经有了和它的值相同的字符串对象，那么就直接返回那个对象的引用，而不返回新创建的字符串对象。\n\n顺便还问了我是否知道id()这个函数，我回答知道，查看对象内存地址的值？不知道是否能够领会我的意思，反正肯定不是标准答案。\n\n之后问道了我[REST API ](http://www.restapitutorial.com/)是怎么的一个概念。回答到用URL表示资源,HTTP 请求方法对资源的操作。返回的状态表示操作的结果。（在绿盟的时候面试官说了http请求请求方法不就是这么用的么？自己突然怀疑起自己是否真的了解RESTful，和他举例会有URL里有add的字段表示对这个资源的一个get请求是一个添加的操作这个请求方法是不对应的但是感觉他也不是很赞同。但是我也看到同学会用post方法请求一个数据说法是post方法更安全且不会被缓存，可以可被请求的资源为什么要隐藏地址呢？还是需要什么字段验证身份吗？使用cookie会不会更优雅？）\n\n之后问到了VUE，赶紧解释道只是我页面需要我才学了一点，不是很精通，现在前端发展得都是各种框架。和当初认识的根本不是一个样子。面试官人也很好没问了。。。\n\n之后便是问道今后的发展规划，想去的城市，爱好之类的。\n\n其实讲到发展规划我到也没特别在意，是不是感觉给人规划好自己五年十年的道路这个人会靠谱些对自己负责？\n\n有时候确实是这种感觉，可是我高中的时候我还想当一名前端工程师呢？如今看起来感觉当初对前后端也没多了解接触更多的是前端这方面的东西，而且后端那时候对我感觉像是一团迷雾，我根本不知道在服务器后面是怎么处理一起请求并返回数据给前端的。或许我觉得我在一个又一个项目中总能你朝着自己感兴趣的方向学习就是对自己的负责了吧。现在看来我更喜欢处理后端的事物，对高并发，大量数据有种蜜汁快感。\n\n","slug":"多贝云的一次电话面试","published":1,"updated":"2018-07-25T13:30:08.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9okns2001mgvd9fwu2py8w","content":"<p>​    在上一次多贝云的笔试完之后，宣讲会上介绍公司都是处理上万的QPS, 每天上百G的日子，特别是CTO讲到现在特别需求的是C++的程序员后就没报太大希望了。 本以为技术栈不符合会被拒的。。。但是一天中午我微信有个好友申请说是多贝云的人。我就一下子激灵了。</p>\n<p>​    他先自我介绍了一方，讲了一下多贝云现在的技术栈，使用的语言，和Python现在在它们公司在做的事情。说是想和我先聊聊。先是问题是对Python有特别的偏好吗?是什么原因让你学Python呢?</p>\n<p>​    之前在绿盟也谈到为什么要学Python语言，有什么喜欢的地方。然后就说了因为之前写一个项目技术栈用到Flask， 感觉Python语言特别方便，语法糖很喜欢。故现在做课程作业也都在用Python写。也不是对编程语言有啥特别的偏好，如果做的事情有意思我觉得语言不是障碍。</p>\n<p>​    之前绿盟的面试官在我讲到语法糖后突然让我表达一下什么是语法糖。我就说了 for in 这样的循环，在迭代一个列表的时候特别直观。C++里就得循环一个下标列表，使用下标去从数组里取。话说 for 循环算不算 while 的一个语法糖？然后装饰器也算一个？ （那时候面对面的情况慌得不行，感觉很多情况下我想表达的东西都没能正确无误的表达出来）</p>\n<p>​    之后问了我以后是否想来北京工作，我回答我之后想去北上广。当然真实情况是那个地方有广式的烤鸭就行。。。    武汉的烤鸭和我印象里的烤鸭根本不一样！！！真的，每个人都应该了解下广式的烤鸭。真的不是武汉这样干巴巴的。</p>\n<p>​    之后就说让HR和我约下面试时间！不久一个小姐姐就打电话过来，预约了两天后的早上十点，电话面试。还特别提到需要一台电脑，可能会用到。</p>\n<p>​    预约的那天早上10点钟过一点就有一个北京的电话打进来，自我介绍了一下是多贝云的且那天在微信和我聊过之后面试就开始了。面试官那边还说了看过我的博客，了解了我的一些技术栈，然后让我介绍一下我简历上做的项目。（话说我简历上也没写上我的博客地址，估计还翻了一下我的Github，真是感激了。），然后我简单的说了一下交易所做的事情，然后问了项目是否在线上跑，问了一下地址。我说了<a href=\"https://Stock.malu.moe\" target=\"_blank\" rel=\"noopener\">HTTPS://Stock.malu.moe</a>, 那时候觉得里面爬的都是里番。。直接给面试官看是不是不太好。。他突然说了是不是<a href=\"ACGN-STOCK.com\">ACGN-STOCK.com</a>，连忙解释不是这个，但是是按照这个做的，很喜欢这个网站。后面面试官也没深究是哪个网站。。。不知道是不在乎还是在博文里找到了。</p>\n<p>​    接下来便是面试官一轮一轮的提问了，期间交流了一个小时，我只尽量回忆起一些问题并记录下来。</p>\n<p>Q.然后就着项目问我项目在服务器上是怎么运行的，我说了uwsgi+nginx。问道了session是怎么管理的，</p>\n<p>A.使用的Flask里内置的。但是Falsk的session在客户端是以cookie储存的。</p>\n<p>Q.有了解过Falsk里面session储存是怎么实现的吗？</p>\n<p>A.没有，后面了解Flask里面每个请求的默认的 session 对象是 <code>SecureCookieSession</code>，这个类就是一个基本的字典，外加一些特殊的属性。</p>\n<p>Q.假如你这项目由多个后端，你觉得该怎么解决session在后端的储存，怎么保证用户的登录状态。</p>\n<p>A.先是回答没有了解过，但是面试官会鼓励你尝试的去给个解决方案，我说道使用同步保存session的数据库，或者保证处理用户的始终是一个，不变的服务器。最后面试官说确实这两种方法都会用到，也都是混合使用的。</p>\n<p>Q.你项目里用到Redis做了什么，是怎么缓存数据库的数据的。怎么保证数据的状态是最新的。</p>\n<p>A.做了爬虫的缓存，和一些查询数据库的缓存。查询到数据库数据后格式化为JSON数据储存起来，下次查询先查Redis时候由这条查询，如果由就直接返回Redis里的数据，没有就查询数据库把查询到的数据储存到Redis里再染回数据。Redis里我会设置过期时间，而缓存的数据有效性都是一天的，因为我爬虫设置每天才更新一次，这样解决数据有效性的问题。</p>\n<p>之后有问到网页怎么架设的，我说uwsgi + Nginx 但是估计我Nginx发音有问题？他没听清，我也怂了。。就说了没有，他也很困惑的结束了这个问题。估计是想问Nginx ?</p>\n<p>Q.多进程对处理多个用户是怎么处理的，有什么好处</p>\n<p>A.这个没了解。但是在鼓励下说了多个进程能够处理多个用户的同时请求。感觉不是很满意？当然不满意！</p>\n<p>那时候我感觉4个进程只能同时解决4个用户同时请求，多了就得等待？自己也感觉不对。</p>\n<p>之后了解了下Nginx现在是多进程+异步非阻塞的方式实现高并发。使用异步能大幅度的解决多个用户同时访问的问题，多个socket使用一个进程，当socket处理到出现阻塞时进程便处理其他的socket，当socket请求来了再回调进程去给他处理。</p>\n<p>类似处理网络请求的实现是在Linux上是一些IO操作，而Linux上的IO操作模式至今可分为三个阶段，分别为select，poll，epoll。poll解决了select的一些问题，但是其模式还是类似任务调度的轮询，在处理多个任务（socket）时性能会大幅下降。epoll的出现彻底实现了回调的操作，使得相较poll的方法性能有大幅度的提升。</p>\n<p>而使用多个进程能够充分利用现在CPU的多核，但是每个进程下仍是处理多个socket。使得实现了现在的高并发。</p>\n<p>但是系统的问题多个进程会有 ” 惊群“ 问题，大概意思就是又回到需要一个进程处理但是系统会唤起所有进程。又退回到轮询的状态，好在现在各有个的解决方案。</p>\n<p>之后面试官微信发给我一个链接，打开后是编辑器的页面，两边能够同时在上面码代码。</p>\n<p>写了一个函数的框架，叫我实现具体细节，类似寻找数组里的数返回其下标，期间根据要求修改了几次。在做题的时候时刻提醒自己要考虑各种输入情况，但是实战的时候还是实现功能就感觉完成了。</p>\n<p>之后问到了迭代器和生成器，那一段时间因为我页面不在打开的页面没有看到面试官的输入，也没理解面试官问的是什么问题。。。神游了一段时间，那段时间真的感觉无比漫长，感觉那时候都要挂了。</p>\n<p>提问大概是搜索数据库返回的是什么，大概是想问题迭代器的问题？然后我没有看到他的输入，估计也是对着代码对我提问，等我切回页面一看多了一大段代码。。。神游回来顿时出了冷汗。</p>\n<p>面试官看我不明白还给我解释了好多。。。</p>\n<p>我发现我对生成器和迭代器的概念弄错了。。我还以为我以前用的这个是生成器，但是这个是列表生成式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iter = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">5</span>)]</span><br></pre></td></tr></table></figure>\n<p>下面这个才是生成器，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iter = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>[] 返回的是一个列表，()返回一个生成器。生成器的计算是惰性的，当使用next()计算是才会返回下一个值</p>\n<p>而可以被next()函数不断调用返回下一个值的是迭代器，不同于可被迭代的概念，迭代器内部是yield实现的，</p>\n<p>会记录你的返回位置下一次从这里开始。</p>\n<p>在for 循环里是通过iter()方法将可迭代对象转化成迭代器，重复调用next()方法实现的。知道for语句捕获到<code>StopIteration</code> 异常。</p>\n<p>之后还问了我可变对象和不可变对象，除了列表和字典外都是不可变对象。问了我 is 和 == 的区别。</p>\n<p>问了我是否知道那些数据在Python底层的实现，回答不知道。大概是想问我字典那一类的数据是怎么储存的？</p>\n<p>然后借此聊到hash表？怎么解决冲突？</p>\n<p>然后问了我能否解释的结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">3</span></span><br><span class=\"line\">a == b</span><br><span class=\"line\">a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"></span><br><span class=\"line\">str1 == <span class=\"string\">'test'</span></span><br><span class=\"line\">str2 == <span class=\"string\">'test'</span></span><br><span class=\"line\">str1 == str2</span><br><span class=\"line\">str1 <span class=\"keyword\">is</span> str2</span><br></pre></td></tr></table></figure>\n<p>我回答 is 是判断两个对象是否相等，== 是判断两个对象的值是相等。</p>\n<p>结果是两个结果都是True。。。我还以为我至少数字答对了呢。。结果不是</p>\n<p>Python对于小整数有对象池技术，在Python2.7中，“小整数”的定义是[-5,256]，在这个范围内的整数Python提前建立一段内存储存用于共享，</p>\n<p>Pyhon的字符串有Intern机制。它指的就是在创建一个新的字符串对象时，如果已经有了和它的值相同的字符串对象，那么就直接返回那个对象的引用，而不返回新创建的字符串对象。</p>\n<p>顺便还问了我是否知道id()这个函数，我回答知道，查看对象内存地址的值？不知道是否能够领会我的意思，反正肯定不是标准答案。</p>\n<p>之后问道了我<a href=\"http://www.restapitutorial.com/\" target=\"_blank\" rel=\"noopener\">REST API </a>是怎么的一个概念。回答到用URL表示资源,HTTP 请求方法对资源的操作。返回的状态表示操作的结果。（在绿盟的时候面试官说了http请求请求方法不就是这么用的么？自己突然怀疑起自己是否真的了解RESTful，和他举例会有URL里有add的字段表示对这个资源的一个get请求是一个添加的操作这个请求方法是不对应的但是感觉他也不是很赞同。但是我也看到同学会用post方法请求一个数据说法是post方法更安全且不会被缓存，可以可被请求的资源为什么要隐藏地址呢？还是需要什么字段验证身份吗？使用cookie会不会更优雅？）</p>\n<p>之后问到了VUE，赶紧解释道只是我页面需要我才学了一点，不是很精通，现在前端发展得都是各种框架。和当初认识的根本不是一个样子。面试官人也很好没问了。。。</p>\n<p>之后便是问道今后的发展规划，想去的城市，爱好之类的。</p>\n<p>其实讲到发展规划我到也没特别在意，是不是感觉给人规划好自己五年十年的道路这个人会靠谱些对自己负责？</p>\n<p>有时候确实是这种感觉，可是我高中的时候我还想当一名前端工程师呢？如今看起来感觉当初对前后端也没多了解接触更多的是前端这方面的东西，而且后端那时候对我感觉像是一团迷雾，我根本不知道在服务器后面是怎么处理一起请求并返回数据给前端的。或许我觉得我在一个又一个项目中总能你朝着自己感兴趣的方向学习就是对自己的负责了吧。现在看来我更喜欢处理后端的事物，对高并发，大量数据有种蜜汁快感。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在上一次多贝云的笔试完之后，宣讲会上介绍公司都是处理上万的QPS, 每天上百G的日子，特别是CTO讲到现在特别需求的是C++的程序员后就没报太大希望了。 本以为技术栈不符合会被拒的。。。但是一天中午我微信有个好友申请说是多贝云的人。我就一下子激灵了。</p>\n<p>​    他先自我介绍了一方，讲了一下多贝云现在的技术栈，使用的语言，和Python现在在它们公司在做的事情。说是想和我先聊聊。先是问题是对Python有特别的偏好吗?是什么原因让你学Python呢?</p>\n<p>​    之前在绿盟也谈到为什么要学Python语言，有什么喜欢的地方。然后就说了因为之前写一个项目技术栈用到Flask， 感觉Python语言特别方便，语法糖很喜欢。故现在做课程作业也都在用Python写。也不是对编程语言有啥特别的偏好，如果做的事情有意思我觉得语言不是障碍。</p>\n<p>​    之前绿盟的面试官在我讲到语法糖后突然让我表达一下什么是语法糖。我就说了 for in 这样的循环，在迭代一个列表的时候特别直观。C++里就得循环一个下标列表，使用下标去从数组里取。话说 for 循环算不算 while 的一个语法糖？然后装饰器也算一个？ （那时候面对面的情况慌得不行，感觉很多情况下我想表达的东西都没能正确无误的表达出来）</p>\n<p>​    之后问了我以后是否想来北京工作，我回答我之后想去北上广。当然真实情况是那个地方有广式的烤鸭就行。。。    武汉的烤鸭和我印象里的烤鸭根本不一样！！！真的，每个人都应该了解下广式的烤鸭。真的不是武汉这样干巴巴的。</p>\n<p>​    之后就说让HR和我约下面试时间！不久一个小姐姐就打电话过来，预约了两天后的早上十点，电话面试。还特别提到需要一台电脑，可能会用到。</p>\n<p>​    预约的那天早上10点钟过一点就有一个北京的电话打进来，自我介绍了一下是多贝云的且那天在微信和我聊过之后面试就开始了。面试官那边还说了看过我的博客，了解了我的一些技术栈，然后让我介绍一下我简历上做的项目。（话说我简历上也没写上我的博客地址，估计还翻了一下我的Github，真是感激了。），然后我简单的说了一下交易所做的事情，然后问了项目是否在线上跑，问了一下地址。我说了<a href=\"https://Stock.malu.moe\" target=\"_blank\" rel=\"noopener\">HTTPS://Stock.malu.moe</a>, 那时候觉得里面爬的都是里番。。直接给面试官看是不是不太好。。他突然说了是不是<a href=\"ACGN-STOCK.com\">ACGN-STOCK.com</a>，连忙解释不是这个，但是是按照这个做的，很喜欢这个网站。后面面试官也没深究是哪个网站。。。不知道是不在乎还是在博文里找到了。</p>\n<p>​    接下来便是面试官一轮一轮的提问了，期间交流了一个小时，我只尽量回忆起一些问题并记录下来。</p>\n<p>Q.然后就着项目问我项目在服务器上是怎么运行的，我说了uwsgi+nginx。问道了session是怎么管理的，</p>\n<p>A.使用的Flask里内置的。但是Falsk的session在客户端是以cookie储存的。</p>\n<p>Q.有了解过Falsk里面session储存是怎么实现的吗？</p>\n<p>A.没有，后面了解Flask里面每个请求的默认的 session 对象是 <code>SecureCookieSession</code>，这个类就是一个基本的字典，外加一些特殊的属性。</p>\n<p>Q.假如你这项目由多个后端，你觉得该怎么解决session在后端的储存，怎么保证用户的登录状态。</p>\n<p>A.先是回答没有了解过，但是面试官会鼓励你尝试的去给个解决方案，我说道使用同步保存session的数据库，或者保证处理用户的始终是一个，不变的服务器。最后面试官说确实这两种方法都会用到，也都是混合使用的。</p>\n<p>Q.你项目里用到Redis做了什么，是怎么缓存数据库的数据的。怎么保证数据的状态是最新的。</p>\n<p>A.做了爬虫的缓存，和一些查询数据库的缓存。查询到数据库数据后格式化为JSON数据储存起来，下次查询先查Redis时候由这条查询，如果由就直接返回Redis里的数据，没有就查询数据库把查询到的数据储存到Redis里再染回数据。Redis里我会设置过期时间，而缓存的数据有效性都是一天的，因为我爬虫设置每天才更新一次，这样解决数据有效性的问题。</p>\n<p>之后有问到网页怎么架设的，我说uwsgi + Nginx 但是估计我Nginx发音有问题？他没听清，我也怂了。。就说了没有，他也很困惑的结束了这个问题。估计是想问Nginx ?</p>\n<p>Q.多进程对处理多个用户是怎么处理的，有什么好处</p>\n<p>A.这个没了解。但是在鼓励下说了多个进程能够处理多个用户的同时请求。感觉不是很满意？当然不满意！</p>\n<p>那时候我感觉4个进程只能同时解决4个用户同时请求，多了就得等待？自己也感觉不对。</p>\n<p>之后了解了下Nginx现在是多进程+异步非阻塞的方式实现高并发。使用异步能大幅度的解决多个用户同时访问的问题，多个socket使用一个进程，当socket处理到出现阻塞时进程便处理其他的socket，当socket请求来了再回调进程去给他处理。</p>\n<p>类似处理网络请求的实现是在Linux上是一些IO操作，而Linux上的IO操作模式至今可分为三个阶段，分别为select，poll，epoll。poll解决了select的一些问题，但是其模式还是类似任务调度的轮询，在处理多个任务（socket）时性能会大幅下降。epoll的出现彻底实现了回调的操作，使得相较poll的方法性能有大幅度的提升。</p>\n<p>而使用多个进程能够充分利用现在CPU的多核，但是每个进程下仍是处理多个socket。使得实现了现在的高并发。</p>\n<p>但是系统的问题多个进程会有 ” 惊群“ 问题，大概意思就是又回到需要一个进程处理但是系统会唤起所有进程。又退回到轮询的状态，好在现在各有个的解决方案。</p>\n<p>之后面试官微信发给我一个链接，打开后是编辑器的页面，两边能够同时在上面码代码。</p>\n<p>写了一个函数的框架，叫我实现具体细节，类似寻找数组里的数返回其下标，期间根据要求修改了几次。在做题的时候时刻提醒自己要考虑各种输入情况，但是实战的时候还是实现功能就感觉完成了。</p>\n<p>之后问到了迭代器和生成器，那一段时间因为我页面不在打开的页面没有看到面试官的输入，也没理解面试官问的是什么问题。。。神游了一段时间，那段时间真的感觉无比漫长，感觉那时候都要挂了。</p>\n<p>提问大概是搜索数据库返回的是什么，大概是想问题迭代器的问题？然后我没有看到他的输入，估计也是对着代码对我提问，等我切回页面一看多了一大段代码。。。神游回来顿时出了冷汗。</p>\n<p>面试官看我不明白还给我解释了好多。。。</p>\n<p>我发现我对生成器和迭代器的概念弄错了。。我还以为我以前用的这个是生成器，但是这个是列表生成式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iter = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">5</span>)]</span><br></pre></td></tr></table></figure>\n<p>下面这个才是生成器，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iter = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>[] 返回的是一个列表，()返回一个生成器。生成器的计算是惰性的，当使用next()计算是才会返回下一个值</p>\n<p>而可以被next()函数不断调用返回下一个值的是迭代器，不同于可被迭代的概念，迭代器内部是yield实现的，</p>\n<p>会记录你的返回位置下一次从这里开始。</p>\n<p>在for 循环里是通过iter()方法将可迭代对象转化成迭代器，重复调用next()方法实现的。知道for语句捕获到<code>StopIteration</code> 异常。</p>\n<p>之后还问了我可变对象和不可变对象，除了列表和字典外都是不可变对象。问了我 is 和 == 的区别。</p>\n<p>问了我是否知道那些数据在Python底层的实现，回答不知道。大概是想问我字典那一类的数据是怎么储存的？</p>\n<p>然后借此聊到hash表？怎么解决冲突？</p>\n<p>然后问了我能否解释的结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\">b = <span class=\"number\">3</span></span><br><span class=\"line\">a == b</span><br><span class=\"line\">a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"></span><br><span class=\"line\">str1 == <span class=\"string\">'test'</span></span><br><span class=\"line\">str2 == <span class=\"string\">'test'</span></span><br><span class=\"line\">str1 == str2</span><br><span class=\"line\">str1 <span class=\"keyword\">is</span> str2</span><br></pre></td></tr></table></figure>\n<p>我回答 is 是判断两个对象是否相等，== 是判断两个对象的值是相等。</p>\n<p>结果是两个结果都是True。。。我还以为我至少数字答对了呢。。结果不是</p>\n<p>Python对于小整数有对象池技术，在Python2.7中，“小整数”的定义是[-5,256]，在这个范围内的整数Python提前建立一段内存储存用于共享，</p>\n<p>Pyhon的字符串有Intern机制。它指的就是在创建一个新的字符串对象时，如果已经有了和它的值相同的字符串对象，那么就直接返回那个对象的引用，而不返回新创建的字符串对象。</p>\n<p>顺便还问了我是否知道id()这个函数，我回答知道，查看对象内存地址的值？不知道是否能够领会我的意思，反正肯定不是标准答案。</p>\n<p>之后问道了我<a href=\"http://www.restapitutorial.com/\" target=\"_blank\" rel=\"noopener\">REST API </a>是怎么的一个概念。回答到用URL表示资源,HTTP 请求方法对资源的操作。返回的状态表示操作的结果。（在绿盟的时候面试官说了http请求请求方法不就是这么用的么？自己突然怀疑起自己是否真的了解RESTful，和他举例会有URL里有add的字段表示对这个资源的一个get请求是一个添加的操作这个请求方法是不对应的但是感觉他也不是很赞同。但是我也看到同学会用post方法请求一个数据说法是post方法更安全且不会被缓存，可以可被请求的资源为什么要隐藏地址呢？还是需要什么字段验证身份吗？使用cookie会不会更优雅？）</p>\n<p>之后问到了VUE，赶紧解释道只是我页面需要我才学了一点，不是很精通，现在前端发展得都是各种框架。和当初认识的根本不是一个样子。面试官人也很好没问了。。。</p>\n<p>之后便是问道今后的发展规划，想去的城市，爱好之类的。</p>\n<p>其实讲到发展规划我到也没特别在意，是不是感觉给人规划好自己五年十年的道路这个人会靠谱些对自己负责？</p>\n<p>有时候确实是这种感觉，可是我高中的时候我还想当一名前端工程师呢？如今看起来感觉当初对前后端也没多了解接触更多的是前端这方面的东西，而且后端那时候对我感觉像是一团迷雾，我根本不知道在服务器后面是怎么处理一起请求并返回数据给前端的。或许我觉得我在一个又一个项目中总能你朝着自己感兴趣的方向学习就是对自己的负责了吧。现在看来我更喜欢处理后端的事物，对高并发，大量数据有种蜜汁快感。</p>\n"},{"title":"关于一些网站的传说","date":"2017-08-17T04:10:59.000Z","_content":"\n昨天，作为最大的中文色情站点之一的草榴社区无法访问，一则关于草榴社区遭到攻击且数据尽数丢失的传言也于社交网络蔓延。尽管流量倾灌式的攻击仅会造成带宽上的压力，而不太可能直接摧毁物理层面的数据储存，但是显然，常识在刻奇面前不堪一击。在“1024”早已成为一个流行性的网络符号的时代，人们抢着献祭的，不仅是草榴社区本身，还有终将失去它的恐慌。\n\n其实，在这个严厉管制色情产业、并推行强烈的道德意志的国家，草榴社区的崛起和兴盛，及其大隐隐于市的经营模式，无不堪称奇迹。\n\n**色情经济的原罪**\n\n人性如同弹簧，压得越紧，弹力越大。\n\n根据以色列一家市场调研公司Similar Web的报告显示，保守国家在对色情网站的人均访问数据要远高于开放国家，科威特、沙特阿拉伯、埃及等国家均名列前茅，美国、加拿大、荷兰等国家反而拖了后腿。\n\n这份榜单里并无中国的踪影，不过并不是中国足够“洁身自好”，而是统计样本皆为英文语种的色情网站，由于语言隔阂和教育程度，这些网站很难获得规模化的中国用户的访问。不过，如果将英文水准普遍较高的香港单独拿出来就会发现，这个弹丸之城在色情网站的人均浏览时长上在全球排到了第6位。\n\n周鸿祎曾分享过一个极具代表性的例子，他说曾有人将木马封包装进色情影片里进行传播，[360](http://tech.163.com/company/360/)在用户试图播放影片文件时弹出风险警告，但是大多数用户的选择都是关掉弹窗，“如果360再弹，就把360彻底的卸掉”。\n\n什么是刚需？这就是。\n\n改革开放以来，色情之于中国社会，有着解冻和非罪化的趋势，情趣用品等敏感产业也从遮掩走向坦然。但是，由于“扫黄打非”始终占据着行政意义上的制高点，“可以做爱，但是不许了解做爱”也成为了某种悖论。\n\n以现行法律而言，购买、下载和观看色情影片并不违法，但是只要涉及制作、运输、传播和租售行为，就属于触犯法律了，且量刑尺度极大。\n\n两个实际的案例，可以形象说明中国法律为色情所设立的边界：\n\n2002年，延安一对夫妻因在家里看“黄碟”而被当地警察刑拘一事，曾在社会舆论上引起极大争议，最后，公安机关正式道歉，并做出了赔偿。当时就有媒体称，如果按照是否观赏色情影片作为抓人的标准，恐怕中国剩不了多少清白之身的人口了。\n\n2013年，广州一名李姓男子在电脑摊位上以1元1部的价格售卖他个人收藏的色情影片，在刚刚获得5元“非法收益”之后就被警方抓获，最终法院以“复制、贩卖淫秽物品牟利罪、情节特别严重”将其判刑5年。\n\n因此，在尚未脱离原罪的色情领域，中国市场兼具高风险和低回报的不对等特性，以致于供需失衡。\n\n**草榴社区的上位**\n\n就像上文所言，在一个将色情视为洪水猛兽的国家兜售相关内容，如同于沙漠中心贩卖水源，丝毫毋需担忧客群。饭岛爱、武藤兰、苍井空分别代表了碟片、ADSL和宽带三个时代，而P2P技术的空前发达，则使中国成为全球最大的色情影片消费国。\n\n早期的中文色情网站鱼龙混杂，挂羊头卖狗肉的采集模式层出不穷，用户点击一张又一张的图片，在一个又一个垃圾站之间来回跳转，就是无法抵达想要下载的文件，已是寻常之事。此时，只要小心不让[Google](http://tech.163.com/company/google/) Adsense等广告联盟“K站”，操控流量的站长利用色情内容日赚过万美金，并不算难。\n\n而在这样一个用户体验为负值、全赖原始荷尔蒙驱动的行业里，一旦出现超出及格线的行为，很快就会形成标杆效应。\n\n2004年注定是值得铭记的一年，在这一年，草榴社区、情色六月天、爱城、色中色、18P2P、九九情色先后成立。迄今，谁也无法解释为什么这些制定了“行业标准”的色情网站品牌为何集中于2004年爆发诞生，而它们的迥异命运，亦令人不胜唏嘘。\n\n换句话说，草榴社区的幸存和独大，恐怕也有着时运成分。\n\n2006年，拥有60万余注册用户的情色六月天被太原警方捣毁，由于使用境内银行卡收款，其站长坑了整个版主团队，案件也一度被广为宣传，体现扫黄成绩。\n\n在查处情色六月天的过程中，九九情色的“色情网站矩阵”被首度曝光，当时的资料显示，网名为“戏子”的一名华人以半投资半收购的方式，控制了高达48个中文色情站点。由于“戏子”身在美国，所以相当安全，但是用现在的话来讲，他是“不作就不会死”，躺着挣钱之余，竟然涉足儿童色情的内容，这在美国也属于犯罪范畴。2011年，中国公安部与美国警方协作，将“戏子”抓捕并引渡回国。\n\n2011年，色中色产生内部分裂，技术负责人与网站经营者“理念不合”，前者利用技术权限将网站数据拷贝另建新站，而后者在联合其他知名色情网站，对“叛徒”进行通缉，直到现在，若是下载当年的色情影片资源，仍然能够看到被装入文件中的控诉信件。\n\n2012年，新兴色情论坛MM公寓被定性为“特大淫秽色情网站”，超过两千名用户遭到抓捕，这种夸张的执法尺度一度遭到质疑，由于站长依然身在海外，办案人员甚至向其亲属施加压力，迫使关闭服务器。\n\n面对既是竞争对手又是同行伙伴的纷纷倒下，草榴社区的稳如磐石，更显珍贵。草榴社区明哲保身的一条重要原则是坚决不碰面向用户的经济账，据称业内有着“公开的秘密”，即监管部门会特别注意有着明显收费行为的色情网站，若是避开这道把柄，安全性会相对高很多。\n\n另外，草榴社区也拒绝身在中国境内的用户担任版主等职位，防止留下牵一发而动全身的创口。\n\n**并不复杂的产业**\n\n尽管草榴社区几近一枝独秀的地位，但是从中国色情内容的产业链而言，草榴社区处在相当下游的位置。\n\n位于最上游的，是色情电影的购买者。一部新问世的日本AV，在DMM上通常会以1000-4000日元不等的价格售卖，就像任何盗版电影的流出过程一样，必须要有人掏出真金白银，购买获得影片文件。\n\n由于日本对于数字资产的保护措施十分严格，其AV生产商可以放心在DMM这样的线上渠道发行数字版的AV影片，日本国内也少有复刻行为。但是，这个规矩在中国人看来，并不值得遵守。\n\nDMM使用[微软](http://tech.163.com/company/microsoft/)媒体文件WMV格式的DRM版权手段防止购买者进行复制，但是，由于微软的更新漏洞，导致目前仍然有一些老旧电脑能够运行未更新DRM保护的WMV文件，完成破解。所以，中国的这批购买者通常会与色情网站合作，将购买所得的影片内销回来。\n\n很遗憾，松散管理的草榴社区并无力竞价这些稀缺资源，诸如上文提及的色中色以及从里面分裂出来的第一会所才是最大的买单者。这些网站设有发片员的角色，主要用于完成色情影片的压制、封装（通常会植入网站的推广文件）、发布和做种流程。\n\n接下来，是相当于义务工作者的转帖者，这些用户出于在其他网站赚取积分等动机，会迅速激活P2P所需要的各处网络节点，用互联网的术语来讲，就是“分发”，草榴社区就是一个举重若轻的分发渠道。\n\n最尾端的，也是最为大众的消费者，尽管他们（我们）没有付出任何钱物，但是就如互联网的经典商业模式一样，一切生产及流通成本最终都会转嫁到用户身上。\n\n2010年之后，许多“老资格”的发片员相继隐退，新一批发片员开始以团队组织运作，比较典型的是ID为“第六天魔王”的团队，他垄断了大量的热门片源——一般而言，如果某片源已被购买，其他发片员不会重复购买以避免浪费——进而在影片画面中加入网络赌场的水印广告，尽管引起用户的强烈抗议，却也取得了商业上的奇效。有消息称，由于影片传播人群足够广泛，“第六天魔王”所代理的网络赌场分账不菲，已让发片成为一门生意。\n\n同时，利用色情影片建立于刚性需求之上的特点，在用户与内容中间人为设置障碍、然后进行雁过拔毛式的碎片变现，也是当前色情内容产业链里的重要营生。\n\n比如，故意将帖子里的预览图片的尺寸缩小，引导用户“点击观看大图”，进而进入充满各种弹窗广告的图片托管代理站点，用户的每一次点击都会给作者增加CPC收入；\n\n比如，将种子上传到需要多次跳转的网盘里，并限制用户的下载间隔，无论用户是误点广告，还是在该网盘开通VIP账户，作者也都能够拿到佣金分成；\n\n再比如，伪造某些断档的番号，故意传播错误的种子，在里面留下付费购买的信息，借此点对点的吸引对该资源有着特定需求的少数用户。\n\n包括草榴社区在内的色情网站，对于这些产业链上游的单位急于变现的行为保持既不鼓励亦不反对的态度。毕竟，没有核心内容的持续供给，网站只是一个空空如也的坛子。某色情论坛曾经透露，一名发片员在一年时间里赚了数十万的美金，这位老兄感激网站对他的支持，转手给站方捐赠了五万美金，以示“君以国士待我，我必国士报之”的情谊。\n\n**杯弓蛇影的情绪**\n\n[快播](http://tech.163.com/company/kuaibo/)的覆灭，是对中国网络色情文化的一次重大打击。\n\n快播在实质上并不主动提供色情内容，但是站长和用户的默契使用，使得快播被赋予了那些特殊情绪凝结而成的共性，当一个以快播播放器窗口为主体的网页被打开时，它也就象征了某种似由窃取而来的快感。\n\n草榴社区的现实处境，或与快播不可同日而语，但是就其文化的传承性而言，它们具有惊人的一致性。\n\n这次，人们之所以忧心忡忡的分享关于草榴社区可能永久关闭的伪劣传闻，委实是恐慌世间再无第二个草榴社区。我在微博上吐槽，称草榴社区的民间地位有点虚高，因为从功能性出发，只要掌握种子搜索引擎和番号索引数据库两类工具就能完全摆脱对于草榴社区等网站的内容依赖，但是很多慕名前来反驳我的“榴友”说得也理直气壮：在他们看来，草榴社区的价值在于其兼容并蓄的平等氛围，除了注册与非注册的区别，草榴社区的用户之间没有阶级，访问权限也趋于扁平化，近年以来，专注于自拍的版块“达盖尔的旗帜”和崇尚信息自由的“技术讨论区”起色极快，更是营造了乌托邦式的场景。\n\n谁也不曾料到，仅是因为站方心猿意马不太注重管理，这个色情BBS竟然在无意中承载了人们对于粗放型田园平台的全部要求：没有莫名其妙的删帖、没有脸红脖子粗的骂架、没有逼人弃坑的戾气、也没有阿谀奉承的水军。\n\n饱暖方思淫欲，而在淫欲之上，草榴社区偶然融合了关于表达、审美和避世等诉求，进而在中文互联网里树立出了一支独立品牌，如此究竟福兮祸兮，还很难说。但是，就像俄罗斯诗人马雅可夫斯基所说的那样——“我们感激灯塔，因为它为夜里难以出航的人，用火光照亮前路”——草榴社区的面前，注定泥泞坎坷，而在它的身后，是整整一代受到启蒙的互联网原住民。\n\n祝福草榴，祝福我们自己。\n\n **历史**\n\n草榴社区创建于2006年，服务器在美国的科罗拉多州，时值中国曾经最大的色情论坛情色六月天东窗事发——其服务器虽然设在美国，但是论坛的主要管理员却都是不折不扣的中国人，又因内部斗争(主要为收入的分配)而造成不和，最后被山西省公安厅将部分论坛管理者抓获在案。草榴社区充分吸收了前辈失足的经验和教训，基本上不会设置太多的论坛管理者角色，即使需要存在的某些拥有管理权限的帐号，也都是不会在社区里发言和互动的(早期有过，但是后来就隐匿掉了)，这样就尽可能的避免了信息外泄或者产生纷争的风险。而草榴社区的实际控制者，都有着海外国籍，受到他国法律保护。\n\n　　因为目睹太多由利益而起的纠纷最终牵连网站的案例，加上草榴的主要创始人(几名美籍华人)家境尚好本就不算缺钱，所以并没有在盈利上花太大功夫。因为草榴社区一直是免费运营的政策——除了小范围内的展示型广告、网盘链接分成之外，都没有太多商业化的机制，这使得草榴社区的“名声”一直很好，一个不弹广告窗口、也不限定用户购买VIP方可浏览的色情论坛，怎么可能不受欢迎呢？2011年6月，草榴社区曾经尝试开放注册一天，结果一夜之内多了十三万新注册用户，管理方发现这样下去数据库会崩溃，于是就继续采用邀请注册的机制至今。\n\n　　但是草榴社区并非是中国色情网站行业的翘楚，它只是色情影片进行分销的一个主要渠道，更上游的，是那些收费运营、更加隐蔽的色情网站。借助P2P的共享模式，下载色情影片成为了中国网民接触色情信息的主流方式，而影片并非凭空出现的，它的片源在日本、欧美等国家以商品的形式存在，那么这中间就需要当地华人掏钱去将光碟购买下来，再将其转码成为网络流行的AVI或RMVB等文件格式，制作成种子之后上传到色情网站提供P2P下载，这些人属于“发片员”。“发片员”少数是义务性质，大多还是会从色情网站的运营方那里拿到费用补贴，而后者则利用他们带来的影片更新内容，吸引用户下载、传播、付费。而有些用户则以这些种子作为资源，将其分享到草榴社区等网站，造就了后者的繁荣。\n\n　　能力出众的“发片员”，甚至会在论坛里享有至高的特权，比如18P2P著名的“nike”(用户ID)，这是一名香港网友，本身从事的就是色情影片光碟租售业务(在香港合法)，因其能够以每天几十G的网络发片规模持续了好几年而闻名于世，在网络上一度有80%以上的日本有码片源都是出自他那里。18P2P对此贵客也是多方担待，明文告示任何人不得打扰nike，包括在其帖子下面回复攻击性言论、或是发送论坛短消息给他求片等，都会直接遭到封杀ID的处理。nike最终因为自己要结婚以及其最爱的AV女优松岛枫传出退役消息，而退出江湖，真正的“深藏功与名”，只留下传说。\n\n**关于DMM**\t\n\n8年左右，dmm部分片商开始提供6000码率的720P和1080P的高清片源，发展到现在大部分片商都能提供HD版本，所以我们经常看到的高清片来源都是破解者从DMM下载，再解密DRM，所以我们才能有机会享有高清片子，但市面上流出的3000码率普清片子仍旧很少。\n\n2014年上半年，秋叶原在线，一个叫Yipman(叶问)的网友，开始在收费网盘大量发布破解dmm新片，此人的特点是，可以超越dmm配信日期提前发布新片，也就是说，dmm还没开始卖这部片子，结果叶问就已经把片源以mkv的格式发布到网上，据传闻叶问是利用dmm漏洞扫片，无需成本，也有人说他是dmm的内部工作人员，当然没有人去考证，不清楚他为何要发布有损的mkv格式而不是原档的无损wmv格式，毕竟14年下半年，解密drm就已经不是秘密。他最后一次发片是6.25日，然后就不告而别，从此下落不明，网上所有的mkv源头都是叶问，坚持了一年多大量发片，要不是这次微软突如其来的政策，叶问应该肯定还会继续发片，可以说是个传奇人物。\n\n因为，dmm原先的服务器是windowserver 2003，微软在7月14号停止支持window server 2003，  所以dmm今年四月份左右发公告说将在6.30号以后配合微软升级改版，630以后 ，改用新加密手段，只能有dmm专属播放器dmm player才能播放，新加密手段听说是用微软的128位加密，至今没有人成功破解出这个解密，至少在可预见的时间内是看不到希望。\n\n6月初，sokmil开始启用新加密。\n\n7月4号，dmm新片开始启用新加密，所有7月4号以后所有的新片都只能转录。\n\n7月14号，dmm月额旧片服务器也开始启用新加密，所有dmm电影都无法破解，所以dmm的旧片也只能转录，。\n\n因此mkv的源头，叶问没办法继续发mkv，包括其他破解者，叶问现在消失了， 自然mkv也没有了。\n\n如今我们还能看到破解DMM加密租售做代沟的一些人，可是发片已经成为一门生意，破解，高清什么的在金钱面前果然还是澳门大赌场好。\n\n **关于第六天大魔王**\n\n2014年DMM更新了加密方式，各大站都没能力提供大量优质的片源了\n\n然后第六天大魔王开始垄断片源并加上了广告\n\n那时候片源还只能是屏幕录像的方式，所以片源很不好\n\n但是后期好像也自暴自弃了，\n\n但是现在明明又可以破解了，但是这已经是一门生意了。\n\n赌场给利润的百分之40.，，，谁和钱过不去啊\n\n话说大魔王的用户名搜索一阵\n\n我发现在网易云音乐上有一个注册帐号\n\n关注着发姐。。。\n\n天涯同名的帐号发过两贴\n\n在无锡的的分区下说是学电气自动化，经常回帖的样子.……现在倒是不玩了\n\n估计有正经工作了吧\n\n \n\n \n\n \n\n \n\n ","source":"_posts/关于一些网站的传说.md","raw":"---\ntitle: 关于一些网站的传说\ndate: 2017-08-17 12:10:59\ntags: H\n---\n\n昨天，作为最大的中文色情站点之一的草榴社区无法访问，一则关于草榴社区遭到攻击且数据尽数丢失的传言也于社交网络蔓延。尽管流量倾灌式的攻击仅会造成带宽上的压力，而不太可能直接摧毁物理层面的数据储存，但是显然，常识在刻奇面前不堪一击。在“1024”早已成为一个流行性的网络符号的时代，人们抢着献祭的，不仅是草榴社区本身，还有终将失去它的恐慌。\n\n其实，在这个严厉管制色情产业、并推行强烈的道德意志的国家，草榴社区的崛起和兴盛，及其大隐隐于市的经营模式，无不堪称奇迹。\n\n**色情经济的原罪**\n\n人性如同弹簧，压得越紧，弹力越大。\n\n根据以色列一家市场调研公司Similar Web的报告显示，保守国家在对色情网站的人均访问数据要远高于开放国家，科威特、沙特阿拉伯、埃及等国家均名列前茅，美国、加拿大、荷兰等国家反而拖了后腿。\n\n这份榜单里并无中国的踪影，不过并不是中国足够“洁身自好”，而是统计样本皆为英文语种的色情网站，由于语言隔阂和教育程度，这些网站很难获得规模化的中国用户的访问。不过，如果将英文水准普遍较高的香港单独拿出来就会发现，这个弹丸之城在色情网站的人均浏览时长上在全球排到了第6位。\n\n周鸿祎曾分享过一个极具代表性的例子，他说曾有人将木马封包装进色情影片里进行传播，[360](http://tech.163.com/company/360/)在用户试图播放影片文件时弹出风险警告，但是大多数用户的选择都是关掉弹窗，“如果360再弹，就把360彻底的卸掉”。\n\n什么是刚需？这就是。\n\n改革开放以来，色情之于中国社会，有着解冻和非罪化的趋势，情趣用品等敏感产业也从遮掩走向坦然。但是，由于“扫黄打非”始终占据着行政意义上的制高点，“可以做爱，但是不许了解做爱”也成为了某种悖论。\n\n以现行法律而言，购买、下载和观看色情影片并不违法，但是只要涉及制作、运输、传播和租售行为，就属于触犯法律了，且量刑尺度极大。\n\n两个实际的案例，可以形象说明中国法律为色情所设立的边界：\n\n2002年，延安一对夫妻因在家里看“黄碟”而被当地警察刑拘一事，曾在社会舆论上引起极大争议，最后，公安机关正式道歉，并做出了赔偿。当时就有媒体称，如果按照是否观赏色情影片作为抓人的标准，恐怕中国剩不了多少清白之身的人口了。\n\n2013年，广州一名李姓男子在电脑摊位上以1元1部的价格售卖他个人收藏的色情影片，在刚刚获得5元“非法收益”之后就被警方抓获，最终法院以“复制、贩卖淫秽物品牟利罪、情节特别严重”将其判刑5年。\n\n因此，在尚未脱离原罪的色情领域，中国市场兼具高风险和低回报的不对等特性，以致于供需失衡。\n\n**草榴社区的上位**\n\n就像上文所言，在一个将色情视为洪水猛兽的国家兜售相关内容，如同于沙漠中心贩卖水源，丝毫毋需担忧客群。饭岛爱、武藤兰、苍井空分别代表了碟片、ADSL和宽带三个时代，而P2P技术的空前发达，则使中国成为全球最大的色情影片消费国。\n\n早期的中文色情网站鱼龙混杂，挂羊头卖狗肉的采集模式层出不穷，用户点击一张又一张的图片，在一个又一个垃圾站之间来回跳转，就是无法抵达想要下载的文件，已是寻常之事。此时，只要小心不让[Google](http://tech.163.com/company/google/) Adsense等广告联盟“K站”，操控流量的站长利用色情内容日赚过万美金，并不算难。\n\n而在这样一个用户体验为负值、全赖原始荷尔蒙驱动的行业里，一旦出现超出及格线的行为，很快就会形成标杆效应。\n\n2004年注定是值得铭记的一年，在这一年，草榴社区、情色六月天、爱城、色中色、18P2P、九九情色先后成立。迄今，谁也无法解释为什么这些制定了“行业标准”的色情网站品牌为何集中于2004年爆发诞生，而它们的迥异命运，亦令人不胜唏嘘。\n\n换句话说，草榴社区的幸存和独大，恐怕也有着时运成分。\n\n2006年，拥有60万余注册用户的情色六月天被太原警方捣毁，由于使用境内银行卡收款，其站长坑了整个版主团队，案件也一度被广为宣传，体现扫黄成绩。\n\n在查处情色六月天的过程中，九九情色的“色情网站矩阵”被首度曝光，当时的资料显示，网名为“戏子”的一名华人以半投资半收购的方式，控制了高达48个中文色情站点。由于“戏子”身在美国，所以相当安全，但是用现在的话来讲，他是“不作就不会死”，躺着挣钱之余，竟然涉足儿童色情的内容，这在美国也属于犯罪范畴。2011年，中国公安部与美国警方协作，将“戏子”抓捕并引渡回国。\n\n2011年，色中色产生内部分裂，技术负责人与网站经营者“理念不合”，前者利用技术权限将网站数据拷贝另建新站，而后者在联合其他知名色情网站，对“叛徒”进行通缉，直到现在，若是下载当年的色情影片资源，仍然能够看到被装入文件中的控诉信件。\n\n2012年，新兴色情论坛MM公寓被定性为“特大淫秽色情网站”，超过两千名用户遭到抓捕，这种夸张的执法尺度一度遭到质疑，由于站长依然身在海外，办案人员甚至向其亲属施加压力，迫使关闭服务器。\n\n面对既是竞争对手又是同行伙伴的纷纷倒下，草榴社区的稳如磐石，更显珍贵。草榴社区明哲保身的一条重要原则是坚决不碰面向用户的经济账，据称业内有着“公开的秘密”，即监管部门会特别注意有着明显收费行为的色情网站，若是避开这道把柄，安全性会相对高很多。\n\n另外，草榴社区也拒绝身在中国境内的用户担任版主等职位，防止留下牵一发而动全身的创口。\n\n**并不复杂的产业**\n\n尽管草榴社区几近一枝独秀的地位，但是从中国色情内容的产业链而言，草榴社区处在相当下游的位置。\n\n位于最上游的，是色情电影的购买者。一部新问世的日本AV，在DMM上通常会以1000-4000日元不等的价格售卖，就像任何盗版电影的流出过程一样，必须要有人掏出真金白银，购买获得影片文件。\n\n由于日本对于数字资产的保护措施十分严格，其AV生产商可以放心在DMM这样的线上渠道发行数字版的AV影片，日本国内也少有复刻行为。但是，这个规矩在中国人看来，并不值得遵守。\n\nDMM使用[微软](http://tech.163.com/company/microsoft/)媒体文件WMV格式的DRM版权手段防止购买者进行复制，但是，由于微软的更新漏洞，导致目前仍然有一些老旧电脑能够运行未更新DRM保护的WMV文件，完成破解。所以，中国的这批购买者通常会与色情网站合作，将购买所得的影片内销回来。\n\n很遗憾，松散管理的草榴社区并无力竞价这些稀缺资源，诸如上文提及的色中色以及从里面分裂出来的第一会所才是最大的买单者。这些网站设有发片员的角色，主要用于完成色情影片的压制、封装（通常会植入网站的推广文件）、发布和做种流程。\n\n接下来，是相当于义务工作者的转帖者，这些用户出于在其他网站赚取积分等动机，会迅速激活P2P所需要的各处网络节点，用互联网的术语来讲，就是“分发”，草榴社区就是一个举重若轻的分发渠道。\n\n最尾端的，也是最为大众的消费者，尽管他们（我们）没有付出任何钱物，但是就如互联网的经典商业模式一样，一切生产及流通成本最终都会转嫁到用户身上。\n\n2010年之后，许多“老资格”的发片员相继隐退，新一批发片员开始以团队组织运作，比较典型的是ID为“第六天魔王”的团队，他垄断了大量的热门片源——一般而言，如果某片源已被购买，其他发片员不会重复购买以避免浪费——进而在影片画面中加入网络赌场的水印广告，尽管引起用户的强烈抗议，却也取得了商业上的奇效。有消息称，由于影片传播人群足够广泛，“第六天魔王”所代理的网络赌场分账不菲，已让发片成为一门生意。\n\n同时，利用色情影片建立于刚性需求之上的特点，在用户与内容中间人为设置障碍、然后进行雁过拔毛式的碎片变现，也是当前色情内容产业链里的重要营生。\n\n比如，故意将帖子里的预览图片的尺寸缩小，引导用户“点击观看大图”，进而进入充满各种弹窗广告的图片托管代理站点，用户的每一次点击都会给作者增加CPC收入；\n\n比如，将种子上传到需要多次跳转的网盘里，并限制用户的下载间隔，无论用户是误点广告，还是在该网盘开通VIP账户，作者也都能够拿到佣金分成；\n\n再比如，伪造某些断档的番号，故意传播错误的种子，在里面留下付费购买的信息，借此点对点的吸引对该资源有着特定需求的少数用户。\n\n包括草榴社区在内的色情网站，对于这些产业链上游的单位急于变现的行为保持既不鼓励亦不反对的态度。毕竟，没有核心内容的持续供给，网站只是一个空空如也的坛子。某色情论坛曾经透露，一名发片员在一年时间里赚了数十万的美金，这位老兄感激网站对他的支持，转手给站方捐赠了五万美金，以示“君以国士待我，我必国士报之”的情谊。\n\n**杯弓蛇影的情绪**\n\n[快播](http://tech.163.com/company/kuaibo/)的覆灭，是对中国网络色情文化的一次重大打击。\n\n快播在实质上并不主动提供色情内容，但是站长和用户的默契使用，使得快播被赋予了那些特殊情绪凝结而成的共性，当一个以快播播放器窗口为主体的网页被打开时，它也就象征了某种似由窃取而来的快感。\n\n草榴社区的现实处境，或与快播不可同日而语，但是就其文化的传承性而言，它们具有惊人的一致性。\n\n这次，人们之所以忧心忡忡的分享关于草榴社区可能永久关闭的伪劣传闻，委实是恐慌世间再无第二个草榴社区。我在微博上吐槽，称草榴社区的民间地位有点虚高，因为从功能性出发，只要掌握种子搜索引擎和番号索引数据库两类工具就能完全摆脱对于草榴社区等网站的内容依赖，但是很多慕名前来反驳我的“榴友”说得也理直气壮：在他们看来，草榴社区的价值在于其兼容并蓄的平等氛围，除了注册与非注册的区别，草榴社区的用户之间没有阶级，访问权限也趋于扁平化，近年以来，专注于自拍的版块“达盖尔的旗帜”和崇尚信息自由的“技术讨论区”起色极快，更是营造了乌托邦式的场景。\n\n谁也不曾料到，仅是因为站方心猿意马不太注重管理，这个色情BBS竟然在无意中承载了人们对于粗放型田园平台的全部要求：没有莫名其妙的删帖、没有脸红脖子粗的骂架、没有逼人弃坑的戾气、也没有阿谀奉承的水军。\n\n饱暖方思淫欲，而在淫欲之上，草榴社区偶然融合了关于表达、审美和避世等诉求，进而在中文互联网里树立出了一支独立品牌，如此究竟福兮祸兮，还很难说。但是，就像俄罗斯诗人马雅可夫斯基所说的那样——“我们感激灯塔，因为它为夜里难以出航的人，用火光照亮前路”——草榴社区的面前，注定泥泞坎坷，而在它的身后，是整整一代受到启蒙的互联网原住民。\n\n祝福草榴，祝福我们自己。\n\n **历史**\n\n草榴社区创建于2006年，服务器在美国的科罗拉多州，时值中国曾经最大的色情论坛情色六月天东窗事发——其服务器虽然设在美国，但是论坛的主要管理员却都是不折不扣的中国人，又因内部斗争(主要为收入的分配)而造成不和，最后被山西省公安厅将部分论坛管理者抓获在案。草榴社区充分吸收了前辈失足的经验和教训，基本上不会设置太多的论坛管理者角色，即使需要存在的某些拥有管理权限的帐号，也都是不会在社区里发言和互动的(早期有过，但是后来就隐匿掉了)，这样就尽可能的避免了信息外泄或者产生纷争的风险。而草榴社区的实际控制者，都有着海外国籍，受到他国法律保护。\n\n　　因为目睹太多由利益而起的纠纷最终牵连网站的案例，加上草榴的主要创始人(几名美籍华人)家境尚好本就不算缺钱，所以并没有在盈利上花太大功夫。因为草榴社区一直是免费运营的政策——除了小范围内的展示型广告、网盘链接分成之外，都没有太多商业化的机制，这使得草榴社区的“名声”一直很好，一个不弹广告窗口、也不限定用户购买VIP方可浏览的色情论坛，怎么可能不受欢迎呢？2011年6月，草榴社区曾经尝试开放注册一天，结果一夜之内多了十三万新注册用户，管理方发现这样下去数据库会崩溃，于是就继续采用邀请注册的机制至今。\n\n　　但是草榴社区并非是中国色情网站行业的翘楚，它只是色情影片进行分销的一个主要渠道，更上游的，是那些收费运营、更加隐蔽的色情网站。借助P2P的共享模式，下载色情影片成为了中国网民接触色情信息的主流方式，而影片并非凭空出现的，它的片源在日本、欧美等国家以商品的形式存在，那么这中间就需要当地华人掏钱去将光碟购买下来，再将其转码成为网络流行的AVI或RMVB等文件格式，制作成种子之后上传到色情网站提供P2P下载，这些人属于“发片员”。“发片员”少数是义务性质，大多还是会从色情网站的运营方那里拿到费用补贴，而后者则利用他们带来的影片更新内容，吸引用户下载、传播、付费。而有些用户则以这些种子作为资源，将其分享到草榴社区等网站，造就了后者的繁荣。\n\n　　能力出众的“发片员”，甚至会在论坛里享有至高的特权，比如18P2P著名的“nike”(用户ID)，这是一名香港网友，本身从事的就是色情影片光碟租售业务(在香港合法)，因其能够以每天几十G的网络发片规模持续了好几年而闻名于世，在网络上一度有80%以上的日本有码片源都是出自他那里。18P2P对此贵客也是多方担待，明文告示任何人不得打扰nike，包括在其帖子下面回复攻击性言论、或是发送论坛短消息给他求片等，都会直接遭到封杀ID的处理。nike最终因为自己要结婚以及其最爱的AV女优松岛枫传出退役消息，而退出江湖，真正的“深藏功与名”，只留下传说。\n\n**关于DMM**\t\n\n8年左右，dmm部分片商开始提供6000码率的720P和1080P的高清片源，发展到现在大部分片商都能提供HD版本，所以我们经常看到的高清片来源都是破解者从DMM下载，再解密DRM，所以我们才能有机会享有高清片子，但市面上流出的3000码率普清片子仍旧很少。\n\n2014年上半年，秋叶原在线，一个叫Yipman(叶问)的网友，开始在收费网盘大量发布破解dmm新片，此人的特点是，可以超越dmm配信日期提前发布新片，也就是说，dmm还没开始卖这部片子，结果叶问就已经把片源以mkv的格式发布到网上，据传闻叶问是利用dmm漏洞扫片，无需成本，也有人说他是dmm的内部工作人员，当然没有人去考证，不清楚他为何要发布有损的mkv格式而不是原档的无损wmv格式，毕竟14年下半年，解密drm就已经不是秘密。他最后一次发片是6.25日，然后就不告而别，从此下落不明，网上所有的mkv源头都是叶问，坚持了一年多大量发片，要不是这次微软突如其来的政策，叶问应该肯定还会继续发片，可以说是个传奇人物。\n\n因为，dmm原先的服务器是windowserver 2003，微软在7月14号停止支持window server 2003，  所以dmm今年四月份左右发公告说将在6.30号以后配合微软升级改版，630以后 ，改用新加密手段，只能有dmm专属播放器dmm player才能播放，新加密手段听说是用微软的128位加密，至今没有人成功破解出这个解密，至少在可预见的时间内是看不到希望。\n\n6月初，sokmil开始启用新加密。\n\n7月4号，dmm新片开始启用新加密，所有7月4号以后所有的新片都只能转录。\n\n7月14号，dmm月额旧片服务器也开始启用新加密，所有dmm电影都无法破解，所以dmm的旧片也只能转录，。\n\n因此mkv的源头，叶问没办法继续发mkv，包括其他破解者，叶问现在消失了， 自然mkv也没有了。\n\n如今我们还能看到破解DMM加密租售做代沟的一些人，可是发片已经成为一门生意，破解，高清什么的在金钱面前果然还是澳门大赌场好。\n\n **关于第六天大魔王**\n\n2014年DMM更新了加密方式，各大站都没能力提供大量优质的片源了\n\n然后第六天大魔王开始垄断片源并加上了广告\n\n那时候片源还只能是屏幕录像的方式，所以片源很不好\n\n但是后期好像也自暴自弃了，\n\n但是现在明明又可以破解了，但是这已经是一门生意了。\n\n赌场给利润的百分之40.，，，谁和钱过不去啊\n\n话说大魔王的用户名搜索一阵\n\n我发现在网易云音乐上有一个注册帐号\n\n关注着发姐。。。\n\n天涯同名的帐号发过两贴\n\n在无锡的的分区下说是学电气自动化，经常回帖的样子.……现在倒是不玩了\n\n估计有正经工作了吧\n\n \n\n \n\n \n\n \n\n ","slug":"关于一些网站的传说","published":1,"updated":"2018-07-25T13:30:08.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl9oknss001ygvd9ahvr9lhw","content":"<p>昨天，作为最大的中文色情站点之一的草榴社区无法访问，一则关于草榴社区遭到攻击且数据尽数丢失的传言也于社交网络蔓延。尽管流量倾灌式的攻击仅会造成带宽上的压力，而不太可能直接摧毁物理层面的数据储存，但是显然，常识在刻奇面前不堪一击。在“1024”早已成为一个流行性的网络符号的时代，人们抢着献祭的，不仅是草榴社区本身，还有终将失去它的恐慌。</p>\n<p>其实，在这个严厉管制色情产业、并推行强烈的道德意志的国家，草榴社区的崛起和兴盛，及其大隐隐于市的经营模式，无不堪称奇迹。</p>\n<p><strong>色情经济的原罪</strong></p>\n<p>人性如同弹簧，压得越紧，弹力越大。</p>\n<p>根据以色列一家市场调研公司Similar Web的报告显示，保守国家在对色情网站的人均访问数据要远高于开放国家，科威特、沙特阿拉伯、埃及等国家均名列前茅，美国、加拿大、荷兰等国家反而拖了后腿。</p>\n<p>这份榜单里并无中国的踪影，不过并不是中国足够“洁身自好”，而是统计样本皆为英文语种的色情网站，由于语言隔阂和教育程度，这些网站很难获得规模化的中国用户的访问。不过，如果将英文水准普遍较高的香港单独拿出来就会发现，这个弹丸之城在色情网站的人均浏览时长上在全球排到了第6位。</p>\n<p>周鸿祎曾分享过一个极具代表性的例子，他说曾有人将木马封包装进色情影片里进行传播，<a href=\"http://tech.163.com/company/360/\" target=\"_blank\" rel=\"noopener\">360</a>在用户试图播放影片文件时弹出风险警告，但是大多数用户的选择都是关掉弹窗，“如果360再弹，就把360彻底的卸掉”。</p>\n<p>什么是刚需？这就是。</p>\n<p>改革开放以来，色情之于中国社会，有着解冻和非罪化的趋势，情趣用品等敏感产业也从遮掩走向坦然。但是，由于“扫黄打非”始终占据着行政意义上的制高点，“可以做爱，但是不许了解做爱”也成为了某种悖论。</p>\n<p>以现行法律而言，购买、下载和观看色情影片并不违法，但是只要涉及制作、运输、传播和租售行为，就属于触犯法律了，且量刑尺度极大。</p>\n<p>两个实际的案例，可以形象说明中国法律为色情所设立的边界：</p>\n<p>2002年，延安一对夫妻因在家里看“黄碟”而被当地警察刑拘一事，曾在社会舆论上引起极大争议，最后，公安机关正式道歉，并做出了赔偿。当时就有媒体称，如果按照是否观赏色情影片作为抓人的标准，恐怕中国剩不了多少清白之身的人口了。</p>\n<p>2013年，广州一名李姓男子在电脑摊位上以1元1部的价格售卖他个人收藏的色情影片，在刚刚获得5元“非法收益”之后就被警方抓获，最终法院以“复制、贩卖淫秽物品牟利罪、情节特别严重”将其判刑5年。</p>\n<p>因此，在尚未脱离原罪的色情领域，中国市场兼具高风险和低回报的不对等特性，以致于供需失衡。</p>\n<p><strong>草榴社区的上位</strong></p>\n<p>就像上文所言，在一个将色情视为洪水猛兽的国家兜售相关内容，如同于沙漠中心贩卖水源，丝毫毋需担忧客群。饭岛爱、武藤兰、苍井空分别代表了碟片、ADSL和宽带三个时代，而P2P技术的空前发达，则使中国成为全球最大的色情影片消费国。</p>\n<p>早期的中文色情网站鱼龙混杂，挂羊头卖狗肉的采集模式层出不穷，用户点击一张又一张的图片，在一个又一个垃圾站之间来回跳转，就是无法抵达想要下载的文件，已是寻常之事。此时，只要小心不让<a href=\"http://tech.163.com/company/google/\" target=\"_blank\" rel=\"noopener\">Google</a> Adsense等广告联盟“K站”，操控流量的站长利用色情内容日赚过万美金，并不算难。</p>\n<p>而在这样一个用户体验为负值、全赖原始荷尔蒙驱动的行业里，一旦出现超出及格线的行为，很快就会形成标杆效应。</p>\n<p>2004年注定是值得铭记的一年，在这一年，草榴社区、情色六月天、爱城、色中色、18P2P、九九情色先后成立。迄今，谁也无法解释为什么这些制定了“行业标准”的色情网站品牌为何集中于2004年爆发诞生，而它们的迥异命运，亦令人不胜唏嘘。</p>\n<p>换句话说，草榴社区的幸存和独大，恐怕也有着时运成分。</p>\n<p>2006年，拥有60万余注册用户的情色六月天被太原警方捣毁，由于使用境内银行卡收款，其站长坑了整个版主团队，案件也一度被广为宣传，体现扫黄成绩。</p>\n<p>在查处情色六月天的过程中，九九情色的“色情网站矩阵”被首度曝光，当时的资料显示，网名为“戏子”的一名华人以半投资半收购的方式，控制了高达48个中文色情站点。由于“戏子”身在美国，所以相当安全，但是用现在的话来讲，他是“不作就不会死”，躺着挣钱之余，竟然涉足儿童色情的内容，这在美国也属于犯罪范畴。2011年，中国公安部与美国警方协作，将“戏子”抓捕并引渡回国。</p>\n<p>2011年，色中色产生内部分裂，技术负责人与网站经营者“理念不合”，前者利用技术权限将网站数据拷贝另建新站，而后者在联合其他知名色情网站，对“叛徒”进行通缉，直到现在，若是下载当年的色情影片资源，仍然能够看到被装入文件中的控诉信件。</p>\n<p>2012年，新兴色情论坛MM公寓被定性为“特大淫秽色情网站”，超过两千名用户遭到抓捕，这种夸张的执法尺度一度遭到质疑，由于站长依然身在海外，办案人员甚至向其亲属施加压力，迫使关闭服务器。</p>\n<p>面对既是竞争对手又是同行伙伴的纷纷倒下，草榴社区的稳如磐石，更显珍贵。草榴社区明哲保身的一条重要原则是坚决不碰面向用户的经济账，据称业内有着“公开的秘密”，即监管部门会特别注意有着明显收费行为的色情网站，若是避开这道把柄，安全性会相对高很多。</p>\n<p>另外，草榴社区也拒绝身在中国境内的用户担任版主等职位，防止留下牵一发而动全身的创口。</p>\n<p><strong>并不复杂的产业</strong></p>\n<p>尽管草榴社区几近一枝独秀的地位，但是从中国色情内容的产业链而言，草榴社区处在相当下游的位置。</p>\n<p>位于最上游的，是色情电影的购买者。一部新问世的日本AV，在DMM上通常会以1000-4000日元不等的价格售卖，就像任何盗版电影的流出过程一样，必须要有人掏出真金白银，购买获得影片文件。</p>\n<p>由于日本对于数字资产的保护措施十分严格，其AV生产商可以放心在DMM这样的线上渠道发行数字版的AV影片，日本国内也少有复刻行为。但是，这个规矩在中国人看来，并不值得遵守。</p>\n<p>DMM使用<a href=\"http://tech.163.com/company/microsoft/\" target=\"_blank\" rel=\"noopener\">微软</a>媒体文件WMV格式的DRM版权手段防止购买者进行复制，但是，由于微软的更新漏洞，导致目前仍然有一些老旧电脑能够运行未更新DRM保护的WMV文件，完成破解。所以，中国的这批购买者通常会与色情网站合作，将购买所得的影片内销回来。</p>\n<p>很遗憾，松散管理的草榴社区并无力竞价这些稀缺资源，诸如上文提及的色中色以及从里面分裂出来的第一会所才是最大的买单者。这些网站设有发片员的角色，主要用于完成色情影片的压制、封装（通常会植入网站的推广文件）、发布和做种流程。</p>\n<p>接下来，是相当于义务工作者的转帖者，这些用户出于在其他网站赚取积分等动机，会迅速激活P2P所需要的各处网络节点，用互联网的术语来讲，就是“分发”，草榴社区就是一个举重若轻的分发渠道。</p>\n<p>最尾端的，也是最为大众的消费者，尽管他们（我们）没有付出任何钱物，但是就如互联网的经典商业模式一样，一切生产及流通成本最终都会转嫁到用户身上。</p>\n<p>2010年之后，许多“老资格”的发片员相继隐退，新一批发片员开始以团队组织运作，比较典型的是ID为“第六天魔王”的团队，他垄断了大量的热门片源——一般而言，如果某片源已被购买，其他发片员不会重复购买以避免浪费——进而在影片画面中加入网络赌场的水印广告，尽管引起用户的强烈抗议，却也取得了商业上的奇效。有消息称，由于影片传播人群足够广泛，“第六天魔王”所代理的网络赌场分账不菲，已让发片成为一门生意。</p>\n<p>同时，利用色情影片建立于刚性需求之上的特点，在用户与内容中间人为设置障碍、然后进行雁过拔毛式的碎片变现，也是当前色情内容产业链里的重要营生。</p>\n<p>比如，故意将帖子里的预览图片的尺寸缩小，引导用户“点击观看大图”，进而进入充满各种弹窗广告的图片托管代理站点，用户的每一次点击都会给作者增加CPC收入；</p>\n<p>比如，将种子上传到需要多次跳转的网盘里，并限制用户的下载间隔，无论用户是误点广告，还是在该网盘开通VIP账户，作者也都能够拿到佣金分成；</p>\n<p>再比如，伪造某些断档的番号，故意传播错误的种子，在里面留下付费购买的信息，借此点对点的吸引对该资源有着特定需求的少数用户。</p>\n<p>包括草榴社区在内的色情网站，对于这些产业链上游的单位急于变现的行为保持既不鼓励亦不反对的态度。毕竟，没有核心内容的持续供给，网站只是一个空空如也的坛子。某色情论坛曾经透露，一名发片员在一年时间里赚了数十万的美金，这位老兄感激网站对他的支持，转手给站方捐赠了五万美金，以示“君以国士待我，我必国士报之”的情谊。</p>\n<p><strong>杯弓蛇影的情绪</strong></p>\n<p><a href=\"http://tech.163.com/company/kuaibo/\" target=\"_blank\" rel=\"noopener\">快播</a>的覆灭，是对中国网络色情文化的一次重大打击。</p>\n<p>快播在实质上并不主动提供色情内容，但是站长和用户的默契使用，使得快播被赋予了那些特殊情绪凝结而成的共性，当一个以快播播放器窗口为主体的网页被打开时，它也就象征了某种似由窃取而来的快感。</p>\n<p>草榴社区的现实处境，或与快播不可同日而语，但是就其文化的传承性而言，它们具有惊人的一致性。</p>\n<p>这次，人们之所以忧心忡忡的分享关于草榴社区可能永久关闭的伪劣传闻，委实是恐慌世间再无第二个草榴社区。我在微博上吐槽，称草榴社区的民间地位有点虚高，因为从功能性出发，只要掌握种子搜索引擎和番号索引数据库两类工具就能完全摆脱对于草榴社区等网站的内容依赖，但是很多慕名前来反驳我的“榴友”说得也理直气壮：在他们看来，草榴社区的价值在于其兼容并蓄的平等氛围，除了注册与非注册的区别，草榴社区的用户之间没有阶级，访问权限也趋于扁平化，近年以来，专注于自拍的版块“达盖尔的旗帜”和崇尚信息自由的“技术讨论区”起色极快，更是营造了乌托邦式的场景。</p>\n<p>谁也不曾料到，仅是因为站方心猿意马不太注重管理，这个色情BBS竟然在无意中承载了人们对于粗放型田园平台的全部要求：没有莫名其妙的删帖、没有脸红脖子粗的骂架、没有逼人弃坑的戾气、也没有阿谀奉承的水军。</p>\n<p>饱暖方思淫欲，而在淫欲之上，草榴社区偶然融合了关于表达、审美和避世等诉求，进而在中文互联网里树立出了一支独立品牌，如此究竟福兮祸兮，还很难说。但是，就像俄罗斯诗人马雅可夫斯基所说的那样——“我们感激灯塔，因为它为夜里难以出航的人，用火光照亮前路”——草榴社区的面前，注定泥泞坎坷，而在它的身后，是整整一代受到启蒙的互联网原住民。</p>\n<p>祝福草榴，祝福我们自己。</p>\n<p> <strong>历史</strong></p>\n<p>草榴社区创建于2006年，服务器在美国的科罗拉多州，时值中国曾经最大的色情论坛情色六月天东窗事发——其服务器虽然设在美国，但是论坛的主要管理员却都是不折不扣的中国人，又因内部斗争(主要为收入的分配)而造成不和，最后被山西省公安厅将部分论坛管理者抓获在案。草榴社区充分吸收了前辈失足的经验和教训，基本上不会设置太多的论坛管理者角色，即使需要存在的某些拥有管理权限的帐号，也都是不会在社区里发言和互动的(早期有过，但是后来就隐匿掉了)，这样就尽可能的避免了信息外泄或者产生纷争的风险。而草榴社区的实际控制者，都有着海外国籍，受到他国法律保护。</p>\n<p>　　因为目睹太多由利益而起的纠纷最终牵连网站的案例，加上草榴的主要创始人(几名美籍华人)家境尚好本就不算缺钱，所以并没有在盈利上花太大功夫。因为草榴社区一直是免费运营的政策——除了小范围内的展示型广告、网盘链接分成之外，都没有太多商业化的机制，这使得草榴社区的“名声”一直很好，一个不弹广告窗口、也不限定用户购买VIP方可浏览的色情论坛，怎么可能不受欢迎呢？2011年6月，草榴社区曾经尝试开放注册一天，结果一夜之内多了十三万新注册用户，管理方发现这样下去数据库会崩溃，于是就继续采用邀请注册的机制至今。</p>\n<p>　　但是草榴社区并非是中国色情网站行业的翘楚，它只是色情影片进行分销的一个主要渠道，更上游的，是那些收费运营、更加隐蔽的色情网站。借助P2P的共享模式，下载色情影片成为了中国网民接触色情信息的主流方式，而影片并非凭空出现的，它的片源在日本、欧美等国家以商品的形式存在，那么这中间就需要当地华人掏钱去将光碟购买下来，再将其转码成为网络流行的AVI或RMVB等文件格式，制作成种子之后上传到色情网站提供P2P下载，这些人属于“发片员”。“发片员”少数是义务性质，大多还是会从色情网站的运营方那里拿到费用补贴，而后者则利用他们带来的影片更新内容，吸引用户下载、传播、付费。而有些用户则以这些种子作为资源，将其分享到草榴社区等网站，造就了后者的繁荣。</p>\n<p>　　能力出众的“发片员”，甚至会在论坛里享有至高的特权，比如18P2P著名的“nike”(用户ID)，这是一名香港网友，本身从事的就是色情影片光碟租售业务(在香港合法)，因其能够以每天几十G的网络发片规模持续了好几年而闻名于世，在网络上一度有80%以上的日本有码片源都是出自他那里。18P2P对此贵客也是多方担待，明文告示任何人不得打扰nike，包括在其帖子下面回复攻击性言论、或是发送论坛短消息给他求片等，都会直接遭到封杀ID的处理。nike最终因为自己要结婚以及其最爱的AV女优松岛枫传出退役消息，而退出江湖，真正的“深藏功与名”，只留下传说。</p>\n<p><strong>关于DMM</strong>    </p>\n<p>8年左右，dmm部分片商开始提供6000码率的720P和1080P的高清片源，发展到现在大部分片商都能提供HD版本，所以我们经常看到的高清片来源都是破解者从DMM下载，再解密DRM，所以我们才能有机会享有高清片子，但市面上流出的3000码率普清片子仍旧很少。</p>\n<p>2014年上半年，秋叶原在线，一个叫Yipman(叶问)的网友，开始在收费网盘大量发布破解dmm新片，此人的特点是，可以超越dmm配信日期提前发布新片，也就是说，dmm还没开始卖这部片子，结果叶问就已经把片源以mkv的格式发布到网上，据传闻叶问是利用dmm漏洞扫片，无需成本，也有人说他是dmm的内部工作人员，当然没有人去考证，不清楚他为何要发布有损的mkv格式而不是原档的无损wmv格式，毕竟14年下半年，解密drm就已经不是秘密。他最后一次发片是6.25日，然后就不告而别，从此下落不明，网上所有的mkv源头都是叶问，坚持了一年多大量发片，要不是这次微软突如其来的政策，叶问应该肯定还会继续发片，可以说是个传奇人物。</p>\n<p>因为，dmm原先的服务器是windowserver 2003，微软在7月14号停止支持window server 2003，  所以dmm今年四月份左右发公告说将在6.30号以后配合微软升级改版，630以后 ，改用新加密手段，只能有dmm专属播放器dmm player才能播放，新加密手段听说是用微软的128位加密，至今没有人成功破解出这个解密，至少在可预见的时间内是看不到希望。</p>\n<p>6月初，sokmil开始启用新加密。</p>\n<p>7月4号，dmm新片开始启用新加密，所有7月4号以后所有的新片都只能转录。</p>\n<p>7月14号，dmm月额旧片服务器也开始启用新加密，所有dmm电影都无法破解，所以dmm的旧片也只能转录，。</p>\n<p>因此mkv的源头，叶问没办法继续发mkv，包括其他破解者，叶问现在消失了， 自然mkv也没有了。</p>\n<p>如今我们还能看到破解DMM加密租售做代沟的一些人，可是发片已经成为一门生意，破解，高清什么的在金钱面前果然还是澳门大赌场好。</p>\n<p> <strong>关于第六天大魔王</strong></p>\n<p>2014年DMM更新了加密方式，各大站都没能力提供大量优质的片源了</p>\n<p>然后第六天大魔王开始垄断片源并加上了广告</p>\n<p>那时候片源还只能是屏幕录像的方式，所以片源很不好</p>\n<p>但是后期好像也自暴自弃了，</p>\n<p>但是现在明明又可以破解了，但是这已经是一门生意了。</p>\n<p>赌场给利润的百分之40.，，，谁和钱过不去啊</p>\n<p>话说大魔王的用户名搜索一阵</p>\n<p>我发现在网易云音乐上有一个注册帐号</p>\n<p>关注着发姐。。。</p>\n<p>天涯同名的帐号发过两贴</p>\n<p>在无锡的的分区下说是学电气自动化，经常回帖的样子.……现在倒是不玩了</p>\n<p>估计有正经工作了吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天，作为最大的中文色情站点之一的草榴社区无法访问，一则关于草榴社区遭到攻击且数据尽数丢失的传言也于社交网络蔓延。尽管流量倾灌式的攻击仅会造成带宽上的压力，而不太可能直接摧毁物理层面的数据储存，但是显然，常识在刻奇面前不堪一击。在“1024”早已成为一个流行性的网络符号的时代，人们抢着献祭的，不仅是草榴社区本身，还有终将失去它的恐慌。</p>\n<p>其实，在这个严厉管制色情产业、并推行强烈的道德意志的国家，草榴社区的崛起和兴盛，及其大隐隐于市的经营模式，无不堪称奇迹。</p>\n<p><strong>色情经济的原罪</strong></p>\n<p>人性如同弹簧，压得越紧，弹力越大。</p>\n<p>根据以色列一家市场调研公司Similar Web的报告显示，保守国家在对色情网站的人均访问数据要远高于开放国家，科威特、沙特阿拉伯、埃及等国家均名列前茅，美国、加拿大、荷兰等国家反而拖了后腿。</p>\n<p>这份榜单里并无中国的踪影，不过并不是中国足够“洁身自好”，而是统计样本皆为英文语种的色情网站，由于语言隔阂和教育程度，这些网站很难获得规模化的中国用户的访问。不过，如果将英文水准普遍较高的香港单独拿出来就会发现，这个弹丸之城在色情网站的人均浏览时长上在全球排到了第6位。</p>\n<p>周鸿祎曾分享过一个极具代表性的例子，他说曾有人将木马封包装进色情影片里进行传播，<a href=\"http://tech.163.com/company/360/\" target=\"_blank\" rel=\"noopener\">360</a>在用户试图播放影片文件时弹出风险警告，但是大多数用户的选择都是关掉弹窗，“如果360再弹，就把360彻底的卸掉”。</p>\n<p>什么是刚需？这就是。</p>\n<p>改革开放以来，色情之于中国社会，有着解冻和非罪化的趋势，情趣用品等敏感产业也从遮掩走向坦然。但是，由于“扫黄打非”始终占据着行政意义上的制高点，“可以做爱，但是不许了解做爱”也成为了某种悖论。</p>\n<p>以现行法律而言，购买、下载和观看色情影片并不违法，但是只要涉及制作、运输、传播和租售行为，就属于触犯法律了，且量刑尺度极大。</p>\n<p>两个实际的案例，可以形象说明中国法律为色情所设立的边界：</p>\n<p>2002年，延安一对夫妻因在家里看“黄碟”而被当地警察刑拘一事，曾在社会舆论上引起极大争议，最后，公安机关正式道歉，并做出了赔偿。当时就有媒体称，如果按照是否观赏色情影片作为抓人的标准，恐怕中国剩不了多少清白之身的人口了。</p>\n<p>2013年，广州一名李姓男子在电脑摊位上以1元1部的价格售卖他个人收藏的色情影片，在刚刚获得5元“非法收益”之后就被警方抓获，最终法院以“复制、贩卖淫秽物品牟利罪、情节特别严重”将其判刑5年。</p>\n<p>因此，在尚未脱离原罪的色情领域，中国市场兼具高风险和低回报的不对等特性，以致于供需失衡。</p>\n<p><strong>草榴社区的上位</strong></p>\n<p>就像上文所言，在一个将色情视为洪水猛兽的国家兜售相关内容，如同于沙漠中心贩卖水源，丝毫毋需担忧客群。饭岛爱、武藤兰、苍井空分别代表了碟片、ADSL和宽带三个时代，而P2P技术的空前发达，则使中国成为全球最大的色情影片消费国。</p>\n<p>早期的中文色情网站鱼龙混杂，挂羊头卖狗肉的采集模式层出不穷，用户点击一张又一张的图片，在一个又一个垃圾站之间来回跳转，就是无法抵达想要下载的文件，已是寻常之事。此时，只要小心不让<a href=\"http://tech.163.com/company/google/\" target=\"_blank\" rel=\"noopener\">Google</a> Adsense等广告联盟“K站”，操控流量的站长利用色情内容日赚过万美金，并不算难。</p>\n<p>而在这样一个用户体验为负值、全赖原始荷尔蒙驱动的行业里，一旦出现超出及格线的行为，很快就会形成标杆效应。</p>\n<p>2004年注定是值得铭记的一年，在这一年，草榴社区、情色六月天、爱城、色中色、18P2P、九九情色先后成立。迄今，谁也无法解释为什么这些制定了“行业标准”的色情网站品牌为何集中于2004年爆发诞生，而它们的迥异命运，亦令人不胜唏嘘。</p>\n<p>换句话说，草榴社区的幸存和独大，恐怕也有着时运成分。</p>\n<p>2006年，拥有60万余注册用户的情色六月天被太原警方捣毁，由于使用境内银行卡收款，其站长坑了整个版主团队，案件也一度被广为宣传，体现扫黄成绩。</p>\n<p>在查处情色六月天的过程中，九九情色的“色情网站矩阵”被首度曝光，当时的资料显示，网名为“戏子”的一名华人以半投资半收购的方式，控制了高达48个中文色情站点。由于“戏子”身在美国，所以相当安全，但是用现在的话来讲，他是“不作就不会死”，躺着挣钱之余，竟然涉足儿童色情的内容，这在美国也属于犯罪范畴。2011年，中国公安部与美国警方协作，将“戏子”抓捕并引渡回国。</p>\n<p>2011年，色中色产生内部分裂，技术负责人与网站经营者“理念不合”，前者利用技术权限将网站数据拷贝另建新站，而后者在联合其他知名色情网站，对“叛徒”进行通缉，直到现在，若是下载当年的色情影片资源，仍然能够看到被装入文件中的控诉信件。</p>\n<p>2012年，新兴色情论坛MM公寓被定性为“特大淫秽色情网站”，超过两千名用户遭到抓捕，这种夸张的执法尺度一度遭到质疑，由于站长依然身在海外，办案人员甚至向其亲属施加压力，迫使关闭服务器。</p>\n<p>面对既是竞争对手又是同行伙伴的纷纷倒下，草榴社区的稳如磐石，更显珍贵。草榴社区明哲保身的一条重要原则是坚决不碰面向用户的经济账，据称业内有着“公开的秘密”，即监管部门会特别注意有着明显收费行为的色情网站，若是避开这道把柄，安全性会相对高很多。</p>\n<p>另外，草榴社区也拒绝身在中国境内的用户担任版主等职位，防止留下牵一发而动全身的创口。</p>\n<p><strong>并不复杂的产业</strong></p>\n<p>尽管草榴社区几近一枝独秀的地位，但是从中国色情内容的产业链而言，草榴社区处在相当下游的位置。</p>\n<p>位于最上游的，是色情电影的购买者。一部新问世的日本AV，在DMM上通常会以1000-4000日元不等的价格售卖，就像任何盗版电影的流出过程一样，必须要有人掏出真金白银，购买获得影片文件。</p>\n<p>由于日本对于数字资产的保护措施十分严格，其AV生产商可以放心在DMM这样的线上渠道发行数字版的AV影片，日本国内也少有复刻行为。但是，这个规矩在中国人看来，并不值得遵守。</p>\n<p>DMM使用<a href=\"http://tech.163.com/company/microsoft/\" target=\"_blank\" rel=\"noopener\">微软</a>媒体文件WMV格式的DRM版权手段防止购买者进行复制，但是，由于微软的更新漏洞，导致目前仍然有一些老旧电脑能够运行未更新DRM保护的WMV文件，完成破解。所以，中国的这批购买者通常会与色情网站合作，将购买所得的影片内销回来。</p>\n<p>很遗憾，松散管理的草榴社区并无力竞价这些稀缺资源，诸如上文提及的色中色以及从里面分裂出来的第一会所才是最大的买单者。这些网站设有发片员的角色，主要用于完成色情影片的压制、封装（通常会植入网站的推广文件）、发布和做种流程。</p>\n<p>接下来，是相当于义务工作者的转帖者，这些用户出于在其他网站赚取积分等动机，会迅速激活P2P所需要的各处网络节点，用互联网的术语来讲，就是“分发”，草榴社区就是一个举重若轻的分发渠道。</p>\n<p>最尾端的，也是最为大众的消费者，尽管他们（我们）没有付出任何钱物，但是就如互联网的经典商业模式一样，一切生产及流通成本最终都会转嫁到用户身上。</p>\n<p>2010年之后，许多“老资格”的发片员相继隐退，新一批发片员开始以团队组织运作，比较典型的是ID为“第六天魔王”的团队，他垄断了大量的热门片源——一般而言，如果某片源已被购买，其他发片员不会重复购买以避免浪费——进而在影片画面中加入网络赌场的水印广告，尽管引起用户的强烈抗议，却也取得了商业上的奇效。有消息称，由于影片传播人群足够广泛，“第六天魔王”所代理的网络赌场分账不菲，已让发片成为一门生意。</p>\n<p>同时，利用色情影片建立于刚性需求之上的特点，在用户与内容中间人为设置障碍、然后进行雁过拔毛式的碎片变现，也是当前色情内容产业链里的重要营生。</p>\n<p>比如，故意将帖子里的预览图片的尺寸缩小，引导用户“点击观看大图”，进而进入充满各种弹窗广告的图片托管代理站点，用户的每一次点击都会给作者增加CPC收入；</p>\n<p>比如，将种子上传到需要多次跳转的网盘里，并限制用户的下载间隔，无论用户是误点广告，还是在该网盘开通VIP账户，作者也都能够拿到佣金分成；</p>\n<p>再比如，伪造某些断档的番号，故意传播错误的种子，在里面留下付费购买的信息，借此点对点的吸引对该资源有着特定需求的少数用户。</p>\n<p>包括草榴社区在内的色情网站，对于这些产业链上游的单位急于变现的行为保持既不鼓励亦不反对的态度。毕竟，没有核心内容的持续供给，网站只是一个空空如也的坛子。某色情论坛曾经透露，一名发片员在一年时间里赚了数十万的美金，这位老兄感激网站对他的支持，转手给站方捐赠了五万美金，以示“君以国士待我，我必国士报之”的情谊。</p>\n<p><strong>杯弓蛇影的情绪</strong></p>\n<p><a href=\"http://tech.163.com/company/kuaibo/\" target=\"_blank\" rel=\"noopener\">快播</a>的覆灭，是对中国网络色情文化的一次重大打击。</p>\n<p>快播在实质上并不主动提供色情内容，但是站长和用户的默契使用，使得快播被赋予了那些特殊情绪凝结而成的共性，当一个以快播播放器窗口为主体的网页被打开时，它也就象征了某种似由窃取而来的快感。</p>\n<p>草榴社区的现实处境，或与快播不可同日而语，但是就其文化的传承性而言，它们具有惊人的一致性。</p>\n<p>这次，人们之所以忧心忡忡的分享关于草榴社区可能永久关闭的伪劣传闻，委实是恐慌世间再无第二个草榴社区。我在微博上吐槽，称草榴社区的民间地位有点虚高，因为从功能性出发，只要掌握种子搜索引擎和番号索引数据库两类工具就能完全摆脱对于草榴社区等网站的内容依赖，但是很多慕名前来反驳我的“榴友”说得也理直气壮：在他们看来，草榴社区的价值在于其兼容并蓄的平等氛围，除了注册与非注册的区别，草榴社区的用户之间没有阶级，访问权限也趋于扁平化，近年以来，专注于自拍的版块“达盖尔的旗帜”和崇尚信息自由的“技术讨论区”起色极快，更是营造了乌托邦式的场景。</p>\n<p>谁也不曾料到，仅是因为站方心猿意马不太注重管理，这个色情BBS竟然在无意中承载了人们对于粗放型田园平台的全部要求：没有莫名其妙的删帖、没有脸红脖子粗的骂架、没有逼人弃坑的戾气、也没有阿谀奉承的水军。</p>\n<p>饱暖方思淫欲，而在淫欲之上，草榴社区偶然融合了关于表达、审美和避世等诉求，进而在中文互联网里树立出了一支独立品牌，如此究竟福兮祸兮，还很难说。但是，就像俄罗斯诗人马雅可夫斯基所说的那样——“我们感激灯塔，因为它为夜里难以出航的人，用火光照亮前路”——草榴社区的面前，注定泥泞坎坷，而在它的身后，是整整一代受到启蒙的互联网原住民。</p>\n<p>祝福草榴，祝福我们自己。</p>\n<p> <strong>历史</strong></p>\n<p>草榴社区创建于2006年，服务器在美国的科罗拉多州，时值中国曾经最大的色情论坛情色六月天东窗事发——其服务器虽然设在美国，但是论坛的主要管理员却都是不折不扣的中国人，又因内部斗争(主要为收入的分配)而造成不和，最后被山西省公安厅将部分论坛管理者抓获在案。草榴社区充分吸收了前辈失足的经验和教训，基本上不会设置太多的论坛管理者角色，即使需要存在的某些拥有管理权限的帐号，也都是不会在社区里发言和互动的(早期有过，但是后来就隐匿掉了)，这样就尽可能的避免了信息外泄或者产生纷争的风险。而草榴社区的实际控制者，都有着海外国籍，受到他国法律保护。</p>\n<p>　　因为目睹太多由利益而起的纠纷最终牵连网站的案例，加上草榴的主要创始人(几名美籍华人)家境尚好本就不算缺钱，所以并没有在盈利上花太大功夫。因为草榴社区一直是免费运营的政策——除了小范围内的展示型广告、网盘链接分成之外，都没有太多商业化的机制，这使得草榴社区的“名声”一直很好，一个不弹广告窗口、也不限定用户购买VIP方可浏览的色情论坛，怎么可能不受欢迎呢？2011年6月，草榴社区曾经尝试开放注册一天，结果一夜之内多了十三万新注册用户，管理方发现这样下去数据库会崩溃，于是就继续采用邀请注册的机制至今。</p>\n<p>　　但是草榴社区并非是中国色情网站行业的翘楚，它只是色情影片进行分销的一个主要渠道，更上游的，是那些收费运营、更加隐蔽的色情网站。借助P2P的共享模式，下载色情影片成为了中国网民接触色情信息的主流方式，而影片并非凭空出现的，它的片源在日本、欧美等国家以商品的形式存在，那么这中间就需要当地华人掏钱去将光碟购买下来，再将其转码成为网络流行的AVI或RMVB等文件格式，制作成种子之后上传到色情网站提供P2P下载，这些人属于“发片员”。“发片员”少数是义务性质，大多还是会从色情网站的运营方那里拿到费用补贴，而后者则利用他们带来的影片更新内容，吸引用户下载、传播、付费。而有些用户则以这些种子作为资源，将其分享到草榴社区等网站，造就了后者的繁荣。</p>\n<p>　　能力出众的“发片员”，甚至会在论坛里享有至高的特权，比如18P2P著名的“nike”(用户ID)，这是一名香港网友，本身从事的就是色情影片光碟租售业务(在香港合法)，因其能够以每天几十G的网络发片规模持续了好几年而闻名于世，在网络上一度有80%以上的日本有码片源都是出自他那里。18P2P对此贵客也是多方担待，明文告示任何人不得打扰nike，包括在其帖子下面回复攻击性言论、或是发送论坛短消息给他求片等，都会直接遭到封杀ID的处理。nike最终因为自己要结婚以及其最爱的AV女优松岛枫传出退役消息，而退出江湖，真正的“深藏功与名”，只留下传说。</p>\n<p><strong>关于DMM</strong>    </p>\n<p>8年左右，dmm部分片商开始提供6000码率的720P和1080P的高清片源，发展到现在大部分片商都能提供HD版本，所以我们经常看到的高清片来源都是破解者从DMM下载，再解密DRM，所以我们才能有机会享有高清片子，但市面上流出的3000码率普清片子仍旧很少。</p>\n<p>2014年上半年，秋叶原在线，一个叫Yipman(叶问)的网友，开始在收费网盘大量发布破解dmm新片，此人的特点是，可以超越dmm配信日期提前发布新片，也就是说，dmm还没开始卖这部片子，结果叶问就已经把片源以mkv的格式发布到网上，据传闻叶问是利用dmm漏洞扫片，无需成本，也有人说他是dmm的内部工作人员，当然没有人去考证，不清楚他为何要发布有损的mkv格式而不是原档的无损wmv格式，毕竟14年下半年，解密drm就已经不是秘密。他最后一次发片是6.25日，然后就不告而别，从此下落不明，网上所有的mkv源头都是叶问，坚持了一年多大量发片，要不是这次微软突如其来的政策，叶问应该肯定还会继续发片，可以说是个传奇人物。</p>\n<p>因为，dmm原先的服务器是windowserver 2003，微软在7月14号停止支持window server 2003，  所以dmm今年四月份左右发公告说将在6.30号以后配合微软升级改版，630以后 ，改用新加密手段，只能有dmm专属播放器dmm player才能播放，新加密手段听说是用微软的128位加密，至今没有人成功破解出这个解密，至少在可预见的时间内是看不到希望。</p>\n<p>6月初，sokmil开始启用新加密。</p>\n<p>7月4号，dmm新片开始启用新加密，所有7月4号以后所有的新片都只能转录。</p>\n<p>7月14号，dmm月额旧片服务器也开始启用新加密，所有dmm电影都无法破解，所以dmm的旧片也只能转录，。</p>\n<p>因此mkv的源头，叶问没办法继续发mkv，包括其他破解者，叶问现在消失了， 自然mkv也没有了。</p>\n<p>如今我们还能看到破解DMM加密租售做代沟的一些人，可是发片已经成为一门生意，破解，高清什么的在金钱面前果然还是澳门大赌场好。</p>\n<p> <strong>关于第六天大魔王</strong></p>\n<p>2014年DMM更新了加密方式，各大站都没能力提供大量优质的片源了</p>\n<p>然后第六天大魔王开始垄断片源并加上了广告</p>\n<p>那时候片源还只能是屏幕录像的方式，所以片源很不好</p>\n<p>但是后期好像也自暴自弃了，</p>\n<p>但是现在明明又可以破解了，但是这已经是一门生意了。</p>\n<p>赌场给利润的百分之40.，，，谁和钱过不去啊</p>\n<p>话说大魔王的用户名搜索一阵</p>\n<p>我发现在网易云音乐上有一个注册帐号</p>\n<p>关注着发姐。。。</p>\n<p>天涯同名的帐号发过两贴</p>\n<p>在无锡的的分区下说是学电气自动化，经常回帖的样子.……现在倒是不玩了</p>\n<p>估计有正经工作了吧</p>\n"}],"PostAsset":[{"_id":"source/_posts/援力满满交易所的自动许愿/Sources.png","slug":"Sources.png","post":"cjl9oknqz000hgvd9trsd8ym9","modified":1,"renderable":0},{"_id":"source/_posts/最近的一些想法/百仞滩.jpg","slug":"百仞滩.jpg","post":"cjl9oknr6000ogvd930v8li0k","modified":1,"renderable":0},{"_id":"source/_posts/一出好戏/宗教.jpg","slug":"宗教.jpg","post":"cjl9oknqg0007gvd9m89u49ux","modified":1,"renderable":0},{"_id":"source/_posts/一出好戏/脑袋有问题.png","slug":"脑袋有问题.png","post":"cjl9oknqg0007gvd9m89u49ux","modified":1,"renderable":0},{"_id":"source/_posts/一出好戏/蜥蜴.jpg","post":"cjl9oknqg0007gvd9m89u49ux","slug":"蜥蜴.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一出好戏/黄渤.gif","slug":"黄渤.gif","post":"cjl9oknqg0007gvd9m89u49ux","modified":1,"renderable":0},{"_id":"source/_posts/压制组在做什么/image-1.png","slug":"image-1.png","post":"cjl9oknqt000dgvd9tpzyu7yt","modified":1,"renderable":0},{"_id":"source/_posts/压制组在做什么/image-2.png","slug":"image-2.png","post":"cjl9oknqt000dgvd9tpzyu7yt","modified":1,"renderable":0},{"_id":"source/_posts/压制组在做什么/image-3.png","slug":"image-3.png","post":"cjl9oknqt000dgvd9tpzyu7yt","modified":1,"renderable":0},{"_id":"source/_posts/压制组在做什么/image.png","slug":"image.png","post":"cjl9oknqt000dgvd9tpzyu7yt","modified":1,"renderable":0},{"_id":"source/_posts/援力满满交易所的自动许愿/Network.png","post":"cjl9oknqz000hgvd9trsd8ym9","slug":"Network.png","modified":1,"renderable":1},{"_id":"source/_posts/援力满满交易所的自动许愿/index.png","slug":"index.png","post":"cjl9oknqz000hgvd9trsd8ym9","modified":1,"renderable":0},{"_id":"source/_posts/援力满满交易所的自动许愿/stock.png","post":"cjl9oknqz000hgvd9trsd8ym9","slug":"stock.png","modified":1,"renderable":1},{"_id":"source/_posts/援力满满交易所的自动许愿/死熊猫.gif","post":"cjl9oknqz000hgvd9trsd8ym9","slug":"死熊猫.gif","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/ad.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"ad.png","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/netdisc.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"netdisc.png","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/offcloud.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"offcloud.png","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/porn.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"porn.png","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/promulgator\n-1.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"promulgator\n-1.png","modified":1,"renderable":1},{"_id":"source/_posts/记录新发现的事物，高会中转站/promulgator\n.png","post":"cjl9oknrb000tgvd9hrff9mc0","slug":"promulgator\n.png","modified":1,"renderable":1},{"_id":"source/_posts/东湖绿道/东湖凌波栈道.jpg","slug":"东湖凌波栈道.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖桥1.jpg","slug":"东湖桥1.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖桥2.jpg","slug":"东湖桥2.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖桥3.jpg","slug":"东湖桥3.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖绿道1.jpg","slug":"东湖绿道1.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖绿道2.jpg","slug":"东湖绿道2.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/东湖绿道3.jpg","slug":"东湖绿道3.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/农夫山泉.jpg","slug":"农夫山泉.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/东湖绿道/玩偶.jpg","slug":"玩偶.jpg","post":"cjl9oknq30005gvd9jazdezqz","modified":1,"renderable":0},{"_id":"source/_posts/RSA加密/流程.jpg","post":"cjl9oknry001igvd97ppl0gn4","slug":"流程.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RSA加密/界面.jpg","slug":"界面.jpg","post":"cjl9oknry001igvd97ppl0gn4","modified":1,"renderable":0},{"_id":"source/_posts/为什么我不喜欢国内网游/EVE国服市场.png","post":"cjl9oknrz001jgvd98dysp9x6","slug":"EVE国服市场.png","modified":1,"renderable":1},{"_id":"source/_posts/为什么我不喜欢国内网游/EVE经济图表.png","post":"cjl9oknrz001jgvd98dysp9x6","slug":"EVE经济图表.png","modified":1,"renderable":1},{"_id":"source/_posts/在github上搭建静态博客/DNS解析.png","post":"cjl9okns1001lgvd9jt4t2grc","slug":"DNS解析.png","modified":1,"renderable":1},{"_id":"source/_posts/在github上搭建静态博客/hexo-first-time.png","slug":"hexo-first-time.png","post":"cjl9okns1001lgvd9jt4t2grc","modified":1,"renderable":0},{"_id":"source/_posts/在github上搭建静态博客/hexo-v.png","post":"cjl9okns1001lgvd9jt4t2grc","slug":"hexo-v.png","modified":1,"renderable":1},{"_id":"source/_posts/在github上搭建静态博客/npm-install-hexo-cli.png","post":"cjl9okns1001lgvd9jt4t2grc","slug":"npm-install-hexo-cli.png","modified":1,"renderable":1},{"_id":"source/_posts/在github上搭建静态博客/主页.png","post":"cjl9okns1001lgvd9jt4t2grc","slug":"主页.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjl9oknpn0000gvd9dk9i89qj","tag_id":"cjl9oknq10004gvd94rqtump0","_id":"cjl9oknqk0009gvd9x2zdjp97"},{"post_id":"cjl9oknpv0002gvd9oihn8dvq","tag_id":"cjl9oknqh0008gvd9rfrmyuye","_id":"cjl9oknqv000egvd97m4ruo74"},{"post_id":"cjl9oknq30005gvd9jazdezqz","tag_id":"cjl9oknqt000cgvd933lie288","_id":"cjl9oknr0000igvd91rxoa3yx"},{"post_id":"cjl9oknq60006gvd9ck542jmp","tag_id":"cjl9oknqy000ggvd9vjqrckme","_id":"cjl9oknr4000mgvd9d9f7zjwq"},{"post_id":"cjl9oknr5000ngvd9fdw4m2m6","tag_id":"cjl9oknqt000cgvd933lie288","_id":"cjl9oknra000qgvd9agjfdkbn"},{"post_id":"cjl9oknqg0007gvd9m89u49ux","tag_id":"cjl9oknr3000kgvd9nvh62kqe","_id":"cjl9oknrb000sgvd9kckoqim7"},{"post_id":"cjl9oknr6000ogvd930v8li0k","tag_id":"cjl9oknqt000cgvd933lie288","_id":"cjl9oknrd000vgvd9glsgwymg"},{"post_id":"cjl9oknqk000agvd93djs2453","tag_id":"cjl9oknqt000cgvd933lie288","_id":"cjl9oknre000xgvd9a2jbwapm"},{"post_id":"cjl9oknqs000bgvd9brs1q49q","tag_id":"cjl9oknrc000ugvd9g9qlphgd","_id":"cjl9oknrg0010gvd9c196ajms"},{"post_id":"cjl9oknqt000dgvd9tpzyu7yt","tag_id":"cjl9oknrf000zgvd9e7lzwe5g","_id":"cjl9oknrg0012gvd9ql58e4l2"},{"post_id":"cjl9oknqw000fgvd9neo81x0e","tag_id":"cjl9oknrg0011gvd9ldc8k8g7","_id":"cjl9oknrh0014gvd9iqikorf2"},{"post_id":"cjl9oknqz000hgvd9trsd8ym9","tag_id":"cjl9oknrh0013gvd99gwg3sds","_id":"cjl9oknri0017gvd96vxh89no"},{"post_id":"cjl9oknqz000hgvd9trsd8ym9","tag_id":"cjl9oknrh0015gvd9w4l10psa","_id":"cjl9oknri0018gvd9j5z39r8x"},{"post_id":"cjl9oknr1000jgvd9n8qyeu1u","tag_id":"cjl9oknrh0016gvd95bkj43x3","_id":"cjl9oknri001agvd99wkqxr97"},{"post_id":"cjl9oknra000rgvd9ppjysm8o","tag_id":"cjl9oknri0019gvd9kl3ykvwc","_id":"cjl9oknrj001cgvd9592mq69d"},{"post_id":"cjl9oknrb000tgvd9hrff9mc0","tag_id":"cjl9oknri001bgvd9g37zyddk","_id":"cjl9oknrj001egvd90vt50lwt"},{"post_id":"cjl9oknrd000wgvd9d24zj737","tag_id":"cjl9oknrj001dgvd9alfjembc","_id":"cjl9oknrk001ggvd9ldci7m0u"},{"post_id":"cjl9oknre000ygvd9gog5atgf","tag_id":"cjl9oknrj001fgvd9lx55zda9","_id":"cjl9oknrk001hgvd9gc08fam7"},{"post_id":"cjl9oknry001igvd97ppl0gn4","tag_id":"cjl9okns0001kgvd9kh253n2a","_id":"cjl9okns4001ogvd9hwbxqo3h"},{"post_id":"cjl9oknrz001jgvd98dysp9x6","tag_id":"cjl9okns3001ngvd9i3k69mnd","_id":"cjl9okns7001sgvd9fddmimol"},{"post_id":"cjl9oknrz001jgvd98dysp9x6","tag_id":"cjl9okns5001pgvd97fgt3ui0","_id":"cjl9okns7001tgvd92d4d752r"},{"post_id":"cjl9oknrz001jgvd98dysp9x6","tag_id":"cjl9okns5001qgvd9dgdoynf5","_id":"cjl9okns7001vgvd9nzo5ki6d"},{"post_id":"cjl9okns1001lgvd9jt4t2grc","tag_id":"cjl9okns6001rgvd9kswcwg3q","_id":"cjl9okns8001wgvd9nn734t90"},{"post_id":"cjl9okns2001mgvd9fwu2py8w","tag_id":"cjl9okns7001ugvd9k62h3sq1","_id":"cjl9okns8001xgvd9h50ovef4"},{"post_id":"cjl9oknss001ygvd9ahvr9lhw","tag_id":"cjl9oknsu001zgvd9fr5jopba","_id":"cjl9oknt40020gvd9sa5gyhfl"}],"Tag":[{"name":"IC卡","_id":"cjl9oknq10004gvd94rqtump0"},{"name":"flask","_id":"cjl9oknqh0008gvd9rfrmyuye"},{"name":"碎碎念","_id":"cjl9oknqt000cgvd933lie288"},{"name":"uwsgi nginx Flask","_id":"cjl9oknqy000ggvd9vjqrckme"},{"name":"杂谈","_id":"cjl9oknr3000kgvd9nvh62kqe"},{"name":"笔试","_id":"cjl9oknrc000ugvd9g9qlphgd"},{"name":"压制 视频","_id":"cjl9oknrf000zgvd9e7lzwe5g"},{"name":"翻墙","_id":"cjl9oknrg0011gvd9ldc8k8g7"},{"name":"Python","_id":"cjl9oknrh0013gvd99gwg3sds"},{"name":"ACG，脚本","_id":"cjl9oknrh0015gvd9w4l10psa"},{"name":"https","_id":"cjl9oknrh0016gvd95bkj43x3"},{"name":"后端 redis","_id":"cjl9oknri0019gvd9kl3ykvwc"},{"name":"记录","_id":"cjl9oknri001bgvd9g37zyddk"},{"name":"Falsk VPS","_id":"cjl9oknrj001dgvd9alfjembc"},{"name":"面试","_id":"cjl9oknrj001fgvd9lx55zda9"},{"name":"java RSA","_id":"cjl9okns0001kgvd9kh253n2a"},{"name":"EVE","_id":"cjl9okns3001ngvd9i3k69mnd"},{"name":"网游","_id":"cjl9okns5001pgvd97fgt3ui0"},{"name":"经济","_id":"cjl9okns5001qgvd9dgdoynf5"},{"name":"英才工程","_id":"cjl9okns6001rgvd9kswcwg3q"},{"name":"面试， 多贝云","_id":"cjl9okns7001ugvd9k62h3sq1"},{"name":"H","_id":"cjl9oknsu001zgvd9fr5jopba"}]}}